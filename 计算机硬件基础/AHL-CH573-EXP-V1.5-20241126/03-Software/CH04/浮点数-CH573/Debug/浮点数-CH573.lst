
浮点数-CH573.elf:     file format elf32-littleriscv
浮点数-CH573.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00012000

Program Header:
    LOAD off    0x00001000 vaddr 0x00012000 paddr 0x00012000 align 2**12
         filesz 0x000000ec memsz 0x000000ec flags r-x
    LOAD off    0x00002000 vaddr 0x00013000 paddr 0x00013000 align 2**12
         filesz 0x00003510 memsz 0x00003510 flags r-x
    LOAD off    0x00005600 vaddr 0x20005600 paddr 0x00016510 align 2**12
         filesz 0x00000000 memsz 0x00000080 flags rw-
    LOAD off    0x00005680 vaddr 0x20005680 paddr 0x00016510 align 2**12
         filesz 0x00000000 memsz 0x00000114 flags rw-

Sections:
Idx Name            Size      VMA       LMA       File off  Algn  Flags
  0 .init           00000004  00012000  00012000  00001000  2**1  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .vector         000000e8  00012004  00012004  00001004  2**1  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .highcodelalign 00000000  00013000  00013000  00005510  2**0  CONTENTS
  3 .highcode       00000000  20005600  20005600  00005510  2**0  CONTENTS
  4 .text           00003510  00013000  00013000  00002000  2**3  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .fini           00000000  00016510  00016510  00005510  2**0  CONTENTS, ALLOC, LOAD, CODE
  6 .dalign         00000080  20005600  00016510  00005600  2**0  ALLOC
  7 .dlalign        00000000  00016510  00016510  00005510  2**0  CONTENTS
  8 .data           00000000  20005680  20005680  00005510  2**0  CONTENTS, ALLOC, LOAD, DATA
  9 .bss            00000114  20005680  00016510  00005680  2**2  ALLOC
 10 .stack          00000000  20008000  20008000  00005510  2**0  CONTENTS
 11 .debug_info     00006917  00000000  00000000  00005510  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev   000015b4  00000000  00000000  0000be27  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc      000033df  00000000  00000000  0000d3db  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges  00000248  00000000  00000000  000107c0  2**3  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges   00000230  00000000  00000000  00010a08  2**3  CONTENTS, READONLY, DEBUGGING
 16 .debug_line     000057fb  00000000  00000000  00010c38  2**0  CONTENTS, READONLY, DEBUGGING
 17 .debug_str      00000e1c  00000000  00000000  00016433  2**0  CONTENTS, READONLY, DEBUGGING
 18 .comment        00000033  00000000  00000000  0001724f  2**0  CONTENTS, READONLY
 19 .debug_frame    0000073c  00000000  00000000  00017284  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00012000 l    d  .init	00000000 .init
00012004 l    d  .vector	00000000 .vector
00013000 l    d  .highcodelalign	00000000 .highcodelalign
20005600 l    d  .highcode	00000000 .highcode
00013000 l    d  .text	00000000 .text
00016510 l    d  .fini	00000000 .fini
20005600 l    d  .dalign	00000000 .dalign
00016510 l    d  .dlalign	00000000 .dlalign
20005680 l    d  .data	00000000 .data
20005680 l    d  .bss	00000000 .bss
20008000 l    d  .stack	00000000 .stack
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 ./obj/startup_CH573.o
00012004 l       .vector	00000000 _vector_base
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 flash.c
00000000 l    df *ABS*	00000000 gpio.c
00000000 l    df *ABS*	00000000 gec.c
00000000 l    df *ABS*	00000000 uart.c
00000000 l    df *ABS*	00000000 isr.c
00000000 l    df *ABS*	00000000 printf.c
00013cb2 l     F .text	0000003c printk_putc
00013cee l     F .text	00000082 printk_mknumstr
00013d70 l     F .text	0000003c printk_pad_space
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixunsdfdi.c
00000000 l    df *ABS*	00000000 floatundidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 libgcc2.c
000133d6 g     F .text	000000cc flash_write
00014eea g     F .text	0000006a .hidden __eqdf2
20005e80 g       .data	00000000 __global_pointer$
00000025 g       *ABS*	00000000 GEC_USER_SECTOR_END
00012098  w      .vector	00000000 HardFault_Handler
000120ac  w      .vector	00000000 GPIOB_IRQHandler
000120a8  w      .vector	00000000 GPIOA_IRQHandler
0001209c  w      .vector	00000000 SysTick_Handler
00012094  w      .vector	00000000 NMI_Handler
000120cc  w      .vector	00000000 UART1_IRQHandler
00013a7e g     F .text	000000c6 uart_enable_re_int
20005680 g       .bss	00000000 _sbss
00000012 g       *ABS*	00000000 GEC_USER_SECTOR_START
00013c5a g     F .text	00000058 UART0_IRQHandler
00014f54 g     F .text	000000b6 .hidden __ltdf2
00012004 g       .init	00000000 _einit
000120b4  w      .vector	00000000 BB_IRQHandler
20005680 g     O .bss	000000fa rfsend
00013362 g     F .text	00000026 flash_erase
00013388 g     F .text	00000028 flash_Best
2000577a g     O .bss	00000001 rftaskID
000120a4  w      .vector	00000000 TMR0_IRQHandler
00015e4a g     F .text	000000b2 .hidden __extendsfdf2
00014b5c g     F .text	0000038e .hidden __umoddi3
000147c4 g     F .text	00000398 .hidden __udivdi3
00013dc4 g     F .text	000002e8 printk_mkfloatstr
000120d0  w      .vector	00000000 RTC_IRQHandler
20005794 g       .bss	00000000 _ebss
2000577c g     O .bss	00000004 g_f1
00001000 g       *ABS*	00000000 MCU_SECTORSIZE
00013b44 g     F .text	00000116 uart_get_re_int
20005780 g     O .bss	00000001 rflength
00014f54 g     F .text	000000b6 .hidden __ledf2
20007fff g       *ABS*	00000000 GEC_USER_RAM_END
0001478e g     F .text	00000036 myprintf
000120e0  w      .vector	00000000 UART2_IRQHandler
000120d8  w      .vector	00000000 PWMX_IRQHandler
00015efc g     F .text	00000076 .hidden __clzsi2
000136ca g     F .text	00000228 uart_init
00012000 g       .init	00000000 _start
20005784 g     O .bss	00000004 component_fun
00015cb6 g     F .text	00000194 .hidden __floatundidf
20005600 g       *ABS*	00000000 GEC_USER_RAM_START
000120d4  w      .vector	00000000 ADC_IRQHandler
20005600 g       .highcode	00000000 _highcode_vma_start
000120c4  w      .vector	00000000 TMR2_IRQHandler
20005680 g       .data	00000000 _data_vma
00013dac g     F .text	00000018 out_char
000120bc  w      .vector	00000000 USB_IRQHandler
000140ac g     F .text	000006e2 printk
000133b0 g     F .text	00000026 flash_read_logic
0001500a g     F .text	000004c8 .hidden __muldf3
00013a00 g     F .text	0000007e uart_re1
20005788 g     O .bss	0000000a data
000130c0 g     F .text	000000a8 memset
00013168 g     F .text	000001fa main
00013592 g     F .text	000000b8 IRQ_OPC_CHANGE
00013000 g       .highcodelalign	00000000 _highcode_lma
00014eea g     F .text	0000006a .hidden __nedf2
00015c18 g     F .text	0000009e .hidden __fixunsdfdi
00016410 g     O .text	00000100 .hidden __clz_tab
000120b8  w      .vector	00000000 LLE_IRQHandler
00012000 g       .init	00000000 _sinit
000120e8  w      .vector	00000000 WDOG_BAT_IRQHandler
000120dc  w      .vector	00000000 TMR3_IRQHandler
20008000 g       .stack	00000000 _eusrstack
000120a0  w      .vector	00000000 SW_Handler
0001364a g     F .text	00000080 Vectors_Init
20005680 g       .data	00000000 _edata
000120b0  w      .vector	00000000 SPI0_IRQHandler
20005600 g       .highcode	00000000 _highcode_vma_end
00016510 g       .dlalign	00000000 _data_lma
00013000  w      .text	00000000 handle_reset
00015f72 g     F .text	00000012 strlen
000120e4  w      .vector	00000000 UART3_IRQHandler
000138f2 g     F .text	0000010e uart_send1
000134a2 g     F .text	00000072 gpio_set
00013514 g     F .text	0000007e gpio_init
000154d2 g     F .text	00000746 .hidden __subdf3
000120c0  w      .vector	00000000 TMR1_IRQHandler
00000000 g       *ABS*	00000000 MCU_FLASH_ADDR_START



Disassembly of section .init:

00012000 <_sinit>:
_start():
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:14
	.section	.init,"ax",@progbits   /*ax是 allocation  execute的缩写，表示该节区可分配并且可执行，progbits是类型*/
	.global	_start   /*将_start标签定义为全局可见*/
	.align	1   /*将当前PC地址推进到2的1次方个字节对齐的位置*/
    .option	norelax  /*	不允许链接松弛*/
_start:     /*定义此处的标签为_start*/
	j	handle_reset     /*跳转指令跳转到标签handle_reset所在的位置*/
   12000:	0000106f          	j	13000 <_highcode_lma>

Disassembly of section .vector:

00012004 <_vector_base>:
_vector_base():
   12004:	8000                	0x8000
   12006:	2000                	fld	fs0,0(s0)
   12008:	0000                	unimp
   1200a:	0000                	unimp
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:22
    .align  1
_vector_base:
    .option norvc; /*表示接下来的汇编程序不可以被汇编生成16位宽的压缩指令*/
    .word   _eusrstack
    .word   0
        j   NMI_Handler                 /* NMI Handler */
   1200c:	0880006f          	j	12094 <NMI_Handler>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:23
        j   HardFault_Handler           /* Hard Fault Handler */
   12010:	0880006f          	j	12098 <HardFault_Handler>
	...
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:32
    .word   0
    .word   0
    .word   0
    .word   0
    .word   0
        j   SysTick_Handler            /* SysTick Handler */
   12034:	0680006f          	j	1209c <SysTick_Handler>
   12038:	0000                	unimp
   1203a:	0000                	unimp
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:34
    .word   0
        j   SW_Handler                 /* SW Handler */
   1203c:	0640006f          	j	120a0 <SW_Handler>
   12040:	0000                	unimp
   12042:	0000                	unimp
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:37
    .word   0
    /* External Interrupts */
        j   TMR0_IRQHandler            /* 0:  TMR0 */
   12044:	0600006f          	j	120a4 <TMR0_IRQHandler>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:38
        j   GPIOA_IRQHandler           /* GPIOA */
   12048:	0600006f          	j	120a8 <GPIOA_IRQHandler>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:39
        j   GPIOB_IRQHandler           /* GPIOB */
   1204c:	0600006f          	j	120ac <GPIOB_IRQHandler>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:40
        j   SPI0_IRQHandler            /* SPI0 */
   12050:	0600006f          	j	120b0 <SPI0_IRQHandler>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:41
        j   BB_IRQHandler              /* BLEB */
   12054:	0600006f          	j	120b4 <BB_IRQHandler>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:42
        j   LLE_IRQHandler             /* BLEL */
   12058:	0600006f          	j	120b8 <LLE_IRQHandler>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:43
        j   USB_IRQHandler             /* USB */
   1205c:	0600006f          	j	120bc <USB_IRQHandler>
   12060:	0000                	unimp
   12062:	0000                	unimp
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:45
        .word   0
        j   TMR1_IRQHandler            /* TMR1 */
   12064:	05c0006f          	j	120c0 <TMR1_IRQHandler>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:46
        j   TMR2_IRQHandler            /* TMR2 */
   12068:	05c0006f          	j	120c4 <TMR2_IRQHandler>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:47
        j   UART0_IRQHandler           /* UART0 */
   1206c:	3ef0106f          	j	13c5a <UART0_IRQHandler>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:48
        j   UART1_IRQHandler           /* UART1 */
   12070:	05c0006f          	j	120cc <UART1_IRQHandler>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:49
        j   RTC_IRQHandler             /* RTC */
   12074:	05c0006f          	j	120d0 <RTC_IRQHandler>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:50
        j   ADC_IRQHandler             /* ADC */
   12078:	05c0006f          	j	120d4 <ADC_IRQHandler>
   1207c:	0000                	unimp
   1207e:	0000                	unimp
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:52
        .word   0
        j   PWMX_IRQHandler            /* PWMX */
   12080:	0580006f          	j	120d8 <PWMX_IRQHandler>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:53
        j   TMR3_IRQHandler            /* TMR3 */
   12084:	0580006f          	j	120dc <TMR3_IRQHandler>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:54
        j   UART2_IRQHandler           /* UART2 */
   12088:	0580006f          	j	120e0 <UART2_IRQHandler>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:55
        j   UART3_IRQHandler           /* UART3 */
   1208c:	0580006f          	j	120e4 <UART3_IRQHandler>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:56
        j   WDOG_BAT_IRQHandler        /* WDOG_BAT */
   12090:	0580006f          	j	120e8 <WDOG_BAT_IRQHandler>

00012094 <NMI_Handler>:
NMI_Handler():
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:84
    .weak   TMR3_IRQHandler
    .weak   UART2_IRQHandler
    .weak   UART3_IRQHandler
    .weak   WDOG_BAT_IRQHandler

NMI_Handler:  1:  j 1b     /* 在被引用之时，数字标签通常需要带上一个字母“f”或者“b”的后缀，“f”表示下一行，“b”表示向上一行*/
   12094:	0000006f          	j	12094 <NMI_Handler>

00012098 <HardFault_Handler>:
HardFault_Handler():
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:85
HardFault_Handler:  1:  j 1b
   12098:	0000006f          	j	12098 <HardFault_Handler>

0001209c <SysTick_Handler>:
SysTick_Handler():
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:86
SysTick_Handler:  1:  j 1b
   1209c:	0000006f          	j	1209c <SysTick_Handler>

000120a0 <SW_Handler>:
SW_Handler():
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:87
SW_Handler:  1:  j 1b
   120a0:	0000006f          	j	120a0 <SW_Handler>

000120a4 <TMR0_IRQHandler>:
TMR0_IRQHandler():
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:88
TMR0_IRQHandler:  1:  j 1b
   120a4:	0000006f          	j	120a4 <TMR0_IRQHandler>

000120a8 <GPIOA_IRQHandler>:
GPIOA_IRQHandler():
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:89
GPIOA_IRQHandler:  1:  j 1b
   120a8:	0000006f          	j	120a8 <GPIOA_IRQHandler>

000120ac <GPIOB_IRQHandler>:
GPIOB_IRQHandler():
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:90
GPIOB_IRQHandler:  1:  j 1b
   120ac:	0000006f          	j	120ac <GPIOB_IRQHandler>

000120b0 <SPI0_IRQHandler>:
SPI0_IRQHandler():
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:91
SPI0_IRQHandler:  1:  j 1b
   120b0:	0000006f          	j	120b0 <SPI0_IRQHandler>

000120b4 <BB_IRQHandler>:
BB_IRQHandler():
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:92
BB_IRQHandler:  1:  j 1b
   120b4:	0000006f          	j	120b4 <BB_IRQHandler>

000120b8 <LLE_IRQHandler>:
LLE_IRQHandler():
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:93
LLE_IRQHandler:  1:  j 1b
   120b8:	0000006f          	j	120b8 <LLE_IRQHandler>

000120bc <USB_IRQHandler>:
USB_IRQHandler():
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:94
USB_IRQHandler:  1:  j 1b
   120bc:	0000006f          	j	120bc <USB_IRQHandler>

000120c0 <TMR1_IRQHandler>:
TMR1_IRQHandler():
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:95
TMR1_IRQHandler:  1:  j 1b
   120c0:	0000006f          	j	120c0 <TMR1_IRQHandler>

000120c4 <TMR2_IRQHandler>:
TMR2_IRQHandler():
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:96
TMR2_IRQHandler:  1:  j 1b
   120c4:	0000006f          	j	120c4 <TMR2_IRQHandler>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:97
UART0_IRQHandler:  1:  j 1b
   120c8:	0000006f          	j	120c8 <TMR2_IRQHandler+0x4>

000120cc <UART1_IRQHandler>:
UART1_IRQHandler():
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:98
UART1_IRQHandler:  1:  j 1b
   120cc:	0000006f          	j	120cc <UART1_IRQHandler>

000120d0 <RTC_IRQHandler>:
RTC_IRQHandler():
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:99
RTC_IRQHandler:  1:  j 1b
   120d0:	0000006f          	j	120d0 <RTC_IRQHandler>

000120d4 <ADC_IRQHandler>:
ADC_IRQHandler():
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:100
ADC_IRQHandler:  1:  j 1b
   120d4:	0000006f          	j	120d4 <ADC_IRQHandler>

000120d8 <PWMX_IRQHandler>:
PWMX_IRQHandler():
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:101
PWMX_IRQHandler:  1:  j 1b
   120d8:	0000006f          	j	120d8 <PWMX_IRQHandler>

000120dc <TMR3_IRQHandler>:
TMR3_IRQHandler():
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:102
TMR3_IRQHandler:  1:  j 1b
   120dc:	0000006f          	j	120dc <TMR3_IRQHandler>

000120e0 <UART2_IRQHandler>:
UART2_IRQHandler():
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:103
UART2_IRQHandler:  1:  j 1b
   120e0:	0000006f          	j	120e0 <UART2_IRQHandler>

000120e4 <UART3_IRQHandler>:
UART3_IRQHandler():
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:104
UART3_IRQHandler:  1:  j 1b
   120e4:	0000006f          	j	120e4 <UART3_IRQHandler>

000120e8 <WDOG_BAT_IRQHandler>:
WDOG_BAT_IRQHandler():
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:105
WDOG_BAT_IRQHandler:  1:  j 1b
   120e8:	0000006f          	j	120e8 <WDOG_BAT_IRQHandler>

Disassembly of section .text:

00013000 <handle_reset>:
handle_reset():
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:113
	.weak	handle_reset
	.align	1
handle_reset:
.option push 
.option	norelax 
	la gp, __global_pointer$
   13000:	1fff3197          	auipc	gp,0x1fff3
   13004:	e8018193          	addi	gp,gp,-384 # 20005e80 <__global_pointer$>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:116
.option	pop 
1:
	la sp, _eusrstack 
   13008:	1fff5117          	auipc	sp,0x1fff5
   1300c:	ff810113          	addi	sp,sp,-8 # 20008000 <_eusrstack>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:120

/* Load highcode code  section from flash to RAM */
2:
    la a0, _highcode_lma
   13010:	00000517          	auipc	a0,0x0
   13014:	ff050513          	addi	a0,a0,-16 # 13000 <handle_reset>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:121
    la a1, _highcode_vma_start
   13018:	1fff2597          	auipc	a1,0x1fff2
   1301c:	5e858593          	addi	a1,a1,1512 # 20005600 <GEC_USER_RAM_START>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:122
    la a2, _highcode_vma_end
   13020:	1fff2617          	auipc	a2,0x1fff2
   13024:	5e060613          	addi	a2,a2,1504 # 20005600 <GEC_USER_RAM_START>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:123
    bgeu a1, a2, 2f
   13028:	00c5fc63          	bgeu	a1,a2,13040 <handle_reset+0x40>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:125
1:
    lw t0, (a0)
   1302c:	00052283          	lw	t0,0(a0)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:126
    sw t0, (a1)
   13030:	0055a023          	sw	t0,0(a1)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:127
    addi a0, a0, 4
   13034:	00450513          	addi	a0,a0,4
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:128
    addi a1, a1, 4
   13038:	00458593          	addi	a1,a1,4
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:129
    bltu a1, a2, 1b
   1303c:	fec5e8e3          	bltu	a1,a2,1302c <handle_reset+0x2c>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:133

/* Load data section from flash to RAM */
2:
	la a0, _data_lma
   13040:	00003517          	auipc	a0,0x3
   13044:	4d050513          	addi	a0,a0,1232 # 16510 <_data_lma>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:134
	la a1, _data_vma
   13048:	1fff2597          	auipc	a1,0x1fff2
   1304c:	63858593          	addi	a1,a1,1592 # 20005680 <_data_vma>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:135
	la a2, _edata
   13050:	1fff2617          	auipc	a2,0x1fff2
   13054:	63060613          	addi	a2,a2,1584 # 20005680 <_data_vma>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:136
	bgeu a1, a2, 2f
   13058:	00c5fc63          	bgeu	a1,a2,13070 <handle_reset+0x70>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:138
1:
	lw t0, (a0)
   1305c:	00052283          	lw	t0,0(a0)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:139
	sw t0, (a1)
   13060:	0055a023          	sw	t0,0(a1)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:140
	addi a0, a0, 4
   13064:	00450513          	addi	a0,a0,4
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:141
	addi a1, a1, 4
   13068:	00458593          	addi	a1,a1,4
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:142
	bltu a1, a2, 1b
   1306c:	fec5e8e3          	bltu	a1,a2,1305c <handle_reset+0x5c>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:145
2:
	/* clear bss section */
	la a0, _sbss
   13070:	1fff2517          	auipc	a0,0x1fff2
   13074:	61050513          	addi	a0,a0,1552 # 20005680 <_data_vma>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:146
	la a1, _ebss
   13078:	1fff2597          	auipc	a1,0x1fff2
   1307c:	71c58593          	addi	a1,a1,1820 # 20005794 <_ebss>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:147
	bgeu a0, a1, 2f
   13080:	00b57863          	bgeu	a0,a1,13090 <handle_reset+0x90>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:149
1:
	sw zero, (a0)
   13084:	00052023          	sw	zero,0(a0)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:150
	addi a0, a0, 4
   13088:	00450513          	addi	a0,a0,4
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:151
	bltu a0, a1, 1b
   1308c:	feb56ce3          	bltu	a0,a1,13084 <handle_reset+0x84>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:153
2:
    li t0, 0x1880
   13090:	000022b7          	lui	t0,0x2
   13094:	88028293          	addi	t0,t0,-1920 # 1880 <MCU_SECTORSIZE+0x880>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:154
    csrs mstatus, t0
   13098:	3002a073          	csrs	mstatus,t0
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:156

    jal  Vectors_Init	    /* 跳转并链接到Vectors_Init函数，Vectors_Init：User对BIOS中断向量表的部分继承,构件库函数指针初始化 */		
   1309c:	5ae000ef          	jal	ra,1364a <Vectors_Init>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:157
	la t0, _vector_base
   130a0:	fffff297          	auipc	t0,0xfffff
   130a4:	f6428293          	addi	t0,t0,-156 # 12004 <_einit>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:158
    ori t0, t0, 1
   130a8:	0012e293          	ori	t0,t0,1
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:159
	csrw mtvec, t0
   130ac:	30529073          	csrw	mtvec,t0
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:160
	la t0, main
   130b0:	00000297          	auipc	t0,0x0
   130b4:	0b828293          	addi	t0,t0,184 # 13168 <main>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:161
	csrw mepc, t0
   130b8:	34129073          	csrw	mepc,t0
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcs/startup_CH573.S:168
	/* enable vector relocation
	li t0, 0xE000ED14
	li t1, 1
	sw t1, 0(t0)*/
	
	mret
   130bc:	30200073          	mret

000130c0 <memset>:
memset():
   130c0:	433d                	li	t1,15
   130c2:	872a                	mv	a4,a0
   130c4:	02c37363          	bgeu	t1,a2,130ea <memset+0x2a>
   130c8:	00f77793          	andi	a5,a4,15
   130cc:	efbd                	bnez	a5,1314a <memset+0x8a>
   130ce:	e5ad                	bnez	a1,13138 <memset+0x78>
   130d0:	ff067693          	andi	a3,a2,-16
   130d4:	8a3d                	andi	a2,a2,15
   130d6:	96ba                	add	a3,a3,a4
   130d8:	c30c                	sw	a1,0(a4)
   130da:	c34c                	sw	a1,4(a4)
   130dc:	c70c                	sw	a1,8(a4)
   130de:	c74c                	sw	a1,12(a4)
   130e0:	0741                	addi	a4,a4,16
   130e2:	fed76be3          	bltu	a4,a3,130d8 <memset+0x18>
   130e6:	e211                	bnez	a2,130ea <memset+0x2a>
   130e8:	8082                	ret
   130ea:	40c306b3          	sub	a3,t1,a2
   130ee:	068a                	slli	a3,a3,0x2
   130f0:	00000297          	auipc	t0,0x0
   130f4:	9696                	add	a3,a3,t0
   130f6:	00a68067          	jr	10(a3)
   130fa:	00b70723          	sb	a1,14(a4)
   130fe:	00b706a3          	sb	a1,13(a4)
   13102:	00b70623          	sb	a1,12(a4)
   13106:	00b705a3          	sb	a1,11(a4)
   1310a:	00b70523          	sb	a1,10(a4)
   1310e:	00b704a3          	sb	a1,9(a4)
   13112:	00b70423          	sb	a1,8(a4)
   13116:	00b703a3          	sb	a1,7(a4)
   1311a:	00b70323          	sb	a1,6(a4)
   1311e:	00b702a3          	sb	a1,5(a4)
   13122:	00b70223          	sb	a1,4(a4)
   13126:	00b701a3          	sb	a1,3(a4)
   1312a:	00b70123          	sb	a1,2(a4)
   1312e:	00b700a3          	sb	a1,1(a4)
   13132:	00b70023          	sb	a1,0(a4)
   13136:	8082                	ret
   13138:	0ff5f593          	andi	a1,a1,255
   1313c:	00859693          	slli	a3,a1,0x8
   13140:	8dd5                	or	a1,a1,a3
   13142:	01059693          	slli	a3,a1,0x10
   13146:	8dd5                	or	a1,a1,a3
   13148:	b761                	j	130d0 <memset+0x10>
   1314a:	00279693          	slli	a3,a5,0x2
   1314e:	00000297          	auipc	t0,0x0
   13152:	9696                	add	a3,a3,t0
   13154:	8286                	mv	t0,ra
   13156:	fa8680e7          	jalr	-88(a3)
   1315a:	8096                	mv	ra,t0
   1315c:	17c1                	addi	a5,a5,-16
   1315e:	8f1d                	sub	a4,a4,a5
   13160:	963e                	add	a2,a2,a5
   13162:	f8c374e3          	bgeu	t1,a2,130ea <memset+0x2a>
   13166:	b7a5                	j	130ce <memset+0xe>

00013168 <main>:
main():
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/main.c:17
//main.c使用的内部函数声明处---------------------------------------------

//----------------------------------------------------------------------
//主函数，一般情况下可以认为程序从此开始运行（实际上有启动过程）
int main(void)
{
   13168:	7139                	addi	sp,sp,-64
   1316a:	de06                	sw	ra,60(sp)
   1316c:	dc22                	sw	s0,56(sp)
   1316e:	da26                	sw	s1,52(sp)
   13170:	d84a                	sw	s2,48(sp)
   13172:	d64e                	sw	s3,44(sp)
   13174:	d452                	sw	s4,40(sp)
   13176:	d256                	sw	s5,36(sp)
   13178:	d05a                	sw	s6,32(sp)
   1317a:	ce5e                	sw	s7,28(sp)
   1317c:	cc62                	sw	s8,24(sp)
   1317e:	ca66                	sw	s9,20(sp)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/main.c:18
	printf("------------------------------------------------------\n");
   13180:	00003517          	auipc	a0,0x3
   13184:	e4050513          	addi	a0,a0,-448 # 15fc0 <strlen+0x4e>
   13188:	00001097          	auipc	ra,0x1
   1318c:	606080e7          	jalr	1542(ra) # 1478e <myprintf>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/main.c:19
	printf("★金葫芦提示★                                         \n");
   13190:	00003517          	auipc	a0,0x3
   13194:	e6850513          	addi	a0,a0,-408 # 15ff8 <strlen+0x86>
   13198:	00001097          	auipc	ra,0x1
   1319c:	5f6080e7          	jalr	1526(ra) # 1478e <myprintf>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/main.c:20
    printf("【中文名称】认识浮点数的存储方式                        \n");
   131a0:	00003517          	auipc	a0,0x3
   131a4:	e9450513          	addi	a0,a0,-364 # 16034 <strlen+0xc2>
   131a8:	00001097          	auipc	ra,0x1
   131ac:	5e6080e7          	jalr	1510(ra) # 1478e <myprintf>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/main.c:21
	printf("【程序功能】                                           \n");
   131b0:	00003517          	auipc	a0,0x3
   131b4:	ec050513          	addi	a0,a0,-320 # 16070 <strlen+0xfe>
   131b8:	00001097          	auipc	ra,0x1
   131bc:	5d6080e7          	jalr	1494(ra) # 1478e <myprintf>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/main.c:22
	printf("         ① 蓝色闪烁；                                 \n");
   131c0:	00003517          	auipc	a0,0x3
   131c4:	eec50513          	addi	a0,a0,-276 # 160ac <strlen+0x13a>
   131c8:	00001097          	auipc	ra,0x1
   131cc:	5c6080e7          	jalr	1478(ra) # 1478e <myprintf>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/main.c:23
	printf("         ② 输出浮点数的存储情况。                     \n");
   131d0:	00003517          	auipc	a0,0x3
   131d4:	f1850513          	addi	a0,a0,-232 # 160e8 <strlen+0x176>
   131d8:	00001097          	auipc	ra,0x1
   131dc:	5b6080e7          	jalr	1462(ra) # 1478e <myprintf>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/main.c:24
    printf("---------------------------------------------------\n\n\0"); 
   131e0:	00003517          	auipc	a0,0x3
   131e4:	da450513          	addi	a0,a0,-604 # 15f84 <strlen+0x12>
   131e8:	00001097          	auipc	ra,0x1
   131ec:	5a6080e7          	jalr	1446(ra) # 1478e <myprintf>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/main.c:34
    uint8_t   mFlag;              //灯的状态标志
    uint32_t  mLightCount;        //灯的状态切换次数
    uint32_t mi;
    
    //（1.2）【不变】关总中断
    DISABLE_INTERRUPTS;
   131f0:	42a1                	li	t0,8
   131f2:	3002b073          	csrc	mstatus,t0
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/main.c:37
    
    //（1.3）【根据本函数所用的变量赋初值】给主函数使用的局部变量赋初值
    mMainLoopCount=0;    //主循环次数变量
   131f6:	c602                	sw	zero,12(sp)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/main.c:42
    mFlag='A';           //灯的状态标志
    mLightCount=0;       //灯的闪烁次数
    
    //（1.4）【根据includes.h文件中声明的全局变量】给全局变量赋初值
    g_f1=-0.0078125; 
   131f8:	00003797          	auipc	a5,0x3
   131fc:	dc478793          	addi	a5,a5,-572 # 15fbc <strlen+0x4a>
   13200:	4398                	lw	a4,0(a5)
   13202:	1fff2797          	auipc	a5,0x1fff2
   13206:	57a78793          	addi	a5,a5,1402 # 2000577c <g_f1>
   1320a:	c398                	sw	a4,0(a5)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/main.c:46
   
    //（1.5）【根据所用到的外部硬件设备】进行用户外设模块初始化
    //（1.5.1）初始化蓝灯 
    gpio_init(LIGHT_BLUE,GPIO_OUTPUT,LIGHT_ON);	
   1320c:	4601                	li	a2,0
   1320e:	4585                	li	a1,1
   13210:	10e00513          	li	a0,270
   13214:	00000097          	auipc	ra,0x0
   13218:	300080e7          	jalr	768(ra) # 13514 <gpio_init>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/main.c:48
    //（1.5.2）串口初始化
    uart_init(UART_Debug, 115200);
   1321c:	6471                	lui	s0,0x1c
   1321e:	20040593          	addi	a1,s0,512 # 1c200 <_data_lma+0x5cf0>
   13222:	4505                	li	a0,1
   13224:	00000097          	auipc	ra,0x0
   13228:	4a6080e7          	jalr	1190(ra) # 136ca <uart_init>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/main.c:49
    uart_init(UART_User, 115200);
   1322c:	20040593          	addi	a1,s0,512
   13230:	4501                	li	a0,0
   13232:	00000097          	auipc	ra,0x0
   13236:	498080e7          	jalr	1176(ra) # 136ca <uart_init>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/main.c:52

    //（1.6）【根据所使用的硬件模块中断】使能模块中断
    uart_enable_re_int(UART_Debug);     //使能BIOS串口接收中断
   1323a:	4505                	li	a0,1
   1323c:	00001097          	auipc	ra,0x1
   13240:	842080e7          	jalr	-1982(ra) # 13a7e <uart_enable_re_int>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/main.c:53
    uart_enable_re_int(UART_User);      //使能用户串口接收中断
   13244:	4501                	li	a0,0
   13246:	00001097          	auipc	ra,0x1
   1324a:	838080e7          	jalr	-1992(ra) # 13a7e <uart_enable_re_int>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/main.c:56

    //（1.7）【不变】开总中断
    ENABLE_INTERRUPTS;
   1324e:	42a1                	li	t0,8
   13250:	3002a073          	csrs	mstatus,t0
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/main.c:39
    mLightCount=0;       //灯的闪烁次数
   13254:	4a81                	li	s5,0
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/main.c:38
    mFlag='A';           //灯的状态标志
   13256:	04100913          	li	s2,65
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/main.c:66
   while(1)   //while无限循环（开头）
   {
       //（2.1）主循环次数变量+1
       mMainLoopCount++;
       //（2.2）未达到主循环次数设定值，继续循环
       if (mMainLoopCount<=MAINLOOP_COUNT) continue; //宏常数在user.h中定义
   1325a:	003d14b7          	lui	s1,0x3d1
   1325e:	90048493          	addi	s1,s1,-1792 # 3d0900 <_data_lma+0x3ba3f0>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/main.c:71
       //（2.3）达到主循环次数设定值，执行下列语句，进行灯的亮暗处理
       //（2.3.1）清除循环次数变量
       mMainLoopCount=0; 
       //（2.3.2）根据灯的状态标志mFlag是否'L'进行操作
       if (mFlag=='L')  //若为'L'，置灯亮，灯闪烁次数+1，改变灯状态标志
   13262:	04c00993          	li	s3,76
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/main.c:82
           mFlag='A';   //改变灯状态标志为'A'，下一循环使用
        }
        else            //若不为'L'（即为'A')
        {
           gpio_set(LIGHT_BLUE,LIGHT_OFF);
           printf(" LIGHT_BLUE:OFF  \n");  
   13266:	00003b17          	auipc	s6,0x3
   1326a:	ef2b0b13          	addi	s6,s6,-270 # 16158 <strlen+0x1e6>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/main.c:74
           printf(" LIGHT_BLUE:ON   \n");      //输出提示
   1326e:	00003c97          	auipc	s9,0x3
   13272:	eb6c8c93          	addi	s9,s9,-330 # 16124 <strlen+0x1b2>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/main.c:76
           printf(" 灯闪烁次数mLightCount = %d\n\n",mLightCount);
   13276:	00003c17          	auipc	s8,0x3
   1327a:	ec2c0c13          	addi	s8,s8,-318 # 16138 <strlen+0x1c6>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/main.c:77
           mFlag='A';   //改变灯状态标志为'A'，下一循环使用
   1327e:	04100b93          	li	s7,65
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/main.c:86
           mFlag='L';            
        }
        //（2.3.3）打印输出负整数的实际存储值
        printf("======================\n");
   13282:	00003a17          	auipc	s4,0x3
   13286:	eeaa0a13          	addi	s4,s4,-278 # 1616c <strlen+0x1fa>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/main.c:87
        printf("实数g_f1=%10.7lf\n",g_f1);
   1328a:	1fff2417          	auipc	s0,0x1fff2
   1328e:	4f240413          	addi	s0,s0,1266 # 2000577c <g_f1>
   13292:	a04d                	j	13334 <main+0x1cc>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/main.c:73
           gpio_set(LIGHT_BLUE,LIGHT_ON);      //置灯亮
   13294:	4581                	li	a1,0
   13296:	10e00513          	li	a0,270
   1329a:	00000097          	auipc	ra,0x0
   1329e:	208080e7          	jalr	520(ra) # 134a2 <gpio_set>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/main.c:74
           printf(" LIGHT_BLUE:ON   \n");      //输出提示
   132a2:	8566                	mv	a0,s9
   132a4:	00001097          	auipc	ra,0x1
   132a8:	4ea080e7          	jalr	1258(ra) # 1478e <myprintf>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/main.c:75
           mLightCount++;                       //灯闪烁次数+1
   132ac:	0a85                	addi	s5,s5,1
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/main.c:76
           printf(" 灯闪烁次数mLightCount = %d\n\n",mLightCount);
   132ae:	85d6                	mv	a1,s5
   132b0:	8562                	mv	a0,s8
   132b2:	00001097          	auipc	ra,0x1
   132b6:	4dc080e7          	jalr	1244(ra) # 1478e <myprintf>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/main.c:77
           mFlag='A';   //改变灯状态标志为'A'，下一循环使用
   132ba:	895e                	mv	s2,s7
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/main.c:86
        printf("======================\n");
   132bc:	8552                	mv	a0,s4
   132be:	00001097          	auipc	ra,0x1
   132c2:	4d0080e7          	jalr	1232(ra) # 1478e <myprintf>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/main.c:87
        printf("实数g_f1=%10.7lf\n",g_f1);
   132c6:	4008                	lw	a0,0(s0)
   132c8:	00003097          	auipc	ra,0x3
   132cc:	b82080e7          	jalr	-1150(ra) # 15e4a <__extendsfdf2>
   132d0:	862a                	mv	a2,a0
   132d2:	86ae                	mv	a3,a1
   132d4:	00003517          	auipc	a0,0x3
   132d8:	eb050513          	addi	a0,a0,-336 # 16184 <strlen+0x212>
   132dc:	00001097          	auipc	ra,0x1
   132e0:	4b2080e7          	jalr	1202(ra) # 1478e <myprintf>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/main.c:88
        printf("实数g_f1的存储地址=%x\n",&g_f1);
   132e4:	85a2                	mv	a1,s0
   132e6:	00003517          	auipc	a0,0x3
   132ea:	eb250513          	addi	a0,a0,-334 # 16198 <strlen+0x226>
   132ee:	00001097          	auipc	ra,0x1
   132f2:	4a0080e7          	jalr	1184(ra) # 1478e <myprintf>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/main.c:89
        printf("实数g_f1的浮点数存储形式=0x%x\n",*(int *)(&g_f1));
   132f6:	400c                	lw	a1,0(s0)
   132f8:	00003517          	auipc	a0,0x3
   132fc:	eb850513          	addi	a0,a0,-328 # 161b0 <strlen+0x23e>
   13300:	00001097          	auipc	ra,0x1
   13304:	48e080e7          	jalr	1166(ra) # 1478e <myprintf>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/main.c:90
        printf("以存储地址直观方式读出的值=%10.7f\n",* (float *) (&g_f1));
   13308:	4008                	lw	a0,0(s0)
   1330a:	00003097          	auipc	ra,0x3
   1330e:	b40080e7          	jalr	-1216(ra) # 15e4a <__extendsfdf2>
   13312:	862a                	mv	a2,a0
   13314:	86ae                	mv	a3,a1
   13316:	00003517          	auipc	a0,0x3
   1331a:	eba50513          	addi	a0,a0,-326 # 161d0 <strlen+0x25e>
   1331e:	00001097          	auipc	ra,0x1
   13322:	470080e7          	jalr	1136(ra) # 1478e <myprintf>
   13326:	000f47b7          	lui	a5,0xf4
   1332a:	23f78793          	addi	a5,a5,575 # f423f <_data_lma+0xddd2f>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/main.c:91 (discriminator 3)
        for (mi=0;mi<999999;mi++){asm("nop");}    //延时
   1332e:	0001                	nop
   13330:	17fd                	addi	a5,a5,-1
   13332:	fff5                	bnez	a5,1332e <main+0x1c6>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/main.c:64
       mMainLoopCount++;
   13334:	47b2                	lw	a5,12(sp)
   13336:	0785                	addi	a5,a5,1
   13338:	c63e                	sw	a5,12(sp)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/main.c:66
       if (mMainLoopCount<=MAINLOOP_COUNT) continue; //宏常数在user.h中定义
   1333a:	47b2                	lw	a5,12(sp)
   1333c:	fef4fce3          	bgeu	s1,a5,13334 <main+0x1cc>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/main.c:69
       mMainLoopCount=0; 
   13340:	c602                	sw	zero,12(sp)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/main.c:71
       if (mFlag=='L')  //若为'L'，置灯亮，灯闪烁次数+1，改变灯状态标志
   13342:	f53909e3          	beq	s2,s3,13294 <main+0x12c>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/main.c:81
           gpio_set(LIGHT_BLUE,LIGHT_OFF);
   13346:	4585                	li	a1,1
   13348:	10e00513          	li	a0,270
   1334c:	00000097          	auipc	ra,0x0
   13350:	156080e7          	jalr	342(ra) # 134a2 <gpio_set>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/main.c:82
           printf(" LIGHT_BLUE:OFF  \n");  
   13354:	855a                	mv	a0,s6
   13356:	00001097          	auipc	ra,0x1
   1335a:	438080e7          	jalr	1080(ra) # 1478e <myprintf>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/main.c:83
           mFlag='L';            
   1335e:	894e                	mv	s2,s3
   13360:	bfb1                	j	132bc <main+0x154>

00013362 <flash_erase>:
flash_erase():
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/flash.c:66
//函数返回：函数执行执行状态：0=正常；1=异常。
//参数说明：sect：目标扇区号（范围取决于实际芯片
//功能概要：擦除flash存储器的sect扇区
//======================================================================
uint8_t flash_erase(uint16_t sect)
{
   13362:	1141                	addi	sp,sp,-16
   13364:	c606                	sw	ra,12(sp)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/flash.c:70
    uint32_t StartAddr;
    uint8_t flag;
    StartAddr = (uint32_t)(sect * Flash_Sect_size + Flash_Address);
    flag = FLASH_ROM_ERASE(StartAddr,4096);
   13366:	1fff2797          	auipc	a5,0x1fff2
   1336a:	41e78793          	addi	a5,a5,1054 # 20005784 <component_fun>
   1336e:	439c                	lw	a5,0(a5)
   13370:	57fc                	lw	a5,108(a5)
   13372:	6685                	lui	a3,0x1
   13374:	4601                	li	a2,0
   13376:	00c51593          	slli	a1,a0,0xc
   1337a:	4505                	li	a0,1
   1337c:	9782                	jalr	a5
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/flash.c:73
    return flag;

}
   1337e:	0ff57513          	andi	a0,a0,255
   13382:	40b2                	lw	ra,12(sp)
   13384:	0141                	addi	sp,sp,16
   13386:	8082                	ret

00013388 <flash_Best>:
flash_Best():
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/flash.c:176
//            buf:待写入数据的首地址
//功能概要：首位地址都对齐的情况下的数据写入
//编程参考：暂无
//======================================================================
uint8_t flash_Best(uint16_t sect,uint16_t offset,uint16_t N,uint8_t *buf)
{
   13388:	1141                	addi	sp,sp,-16
   1338a:	c606                	sw	ra,12(sp)
   1338c:	8736                	mv	a4,a3
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/flash.c:178
    uint32_t addr;
    addr = (uint32_t)(Flash_Address+sect*Flash_Sect_size+offset);
   1338e:	0532                	slli	a0,a0,0xc
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/flash.c:179
    uint8_t flag=FLASH_ROM_WRITE(addr,buf,N);
   13390:	1fff2797          	auipc	a5,0x1fff2
   13394:	3f478793          	addi	a5,a5,1012 # 20005784 <component_fun>
   13398:	439c                	lw	a5,0(a5)
   1339a:	57fc                	lw	a5,108(a5)
   1339c:	86b2                	mv	a3,a2
   1339e:	863a                	mv	a2,a4
   133a0:	95aa                	add	a1,a1,a0
   133a2:	4509                	li	a0,2
   133a4:	9782                	jalr	a5
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/flash.c:181
    return flag;
}
   133a6:	0ff57513          	andi	a0,a0,255
   133aa:	40b2                	lw	ra,12(sp)
   133ac:	0141                	addi	sp,sp,16
   133ae:	8082                	ret

000133b0 <flash_read_logic>:
flash_read_logic():
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/flash.c:198
//编程参考：暂无
//=======================================================================
void flash_read_logic(uint8_t* Buffer,uint16_t sect,uint16_t offset,uint32_t N)
{

    uint32_t i, Length = ( N + 3 ) >> 2;
   133b0:	068d                	addi	a3,a3,3
   133b2:	8289                	srli	a3,a3,0x2
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/flash.c:199
    uint32_t* pCode = ( uint32_t* ) (sect * Flash_Sect_size + offset + Flash_Address);
   133b4:	05b2                	slli	a1,a1,0xc
   133b6:	962e                	add	a2,a2,a1
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/flash.c:202
    uint32_t* pBuf = ( uint32_t* ) Buffer;

    for ( i = 0; i < Length; i++ )
   133b8:	ce91                	beqz	a3,133d4 <flash_read_logic+0x24>
   133ba:	068a                	slli	a3,a3,0x2
   133bc:	96aa                	add	a3,a3,a0
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/flash.c:200
    uint32_t* pBuf = ( uint32_t* ) Buffer;
   133be:	87aa                	mv	a5,a0
   133c0:	40a60533          	sub	a0,a2,a0
   133c4:	00a78733          	add	a4,a5,a0
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/flash.c:204 (discriminator 3)
    {
      *pBuf++ = *pCode++;
   133c8:	0791                	addi	a5,a5,4
   133ca:	4318                	lw	a4,0(a4)
   133cc:	fee7ae23          	sw	a4,-4(a5)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/flash.c:202 (discriminator 3)
    for ( i = 0; i < Length; i++ )
   133d0:	fed79ae3          	bne	a5,a3,133c4 <flash_read_logic+0x14>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/flash.c:207
    }

}
   133d4:	8082                	ret

000133d6 <flash_write>:
flash_write():
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/flash.c:107
{
   133d6:	7179                	addi	sp,sp,-48
   133d8:	d606                	sw	ra,44(sp)
   133da:	d422                	sw	s0,40(sp)
   133dc:	d226                	sw	s1,36(sp)
   133de:	d04a                	sw	s2,32(sp)
   133e0:	ce4e                	sw	s3,28(sp)
   133e2:	737d                	lui	t1,0xfffff
   133e4:	911a                	add	sp,sp,t1
   133e6:	89aa                	mv	s3,a0
   133e8:	892e                	mv	s2,a1
   133ea:	84b2                	mv	s1,a2
   133ec:	8436                	mv	s0,a3
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/flash.c:112
    if(offset+N>Flash_Sect_size)
   133ee:	00b60733          	add	a4,a2,a1
   133f2:	6785                	lui	a5,0x1
   133f4:	04e7d663          	bge	a5,a4,13440 <flash_write+0x6a>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/flash.c:116
        flash_write(sect,offset,Flash_Sect_size-offset,buf);
   133f8:	6605                	lui	a2,0x1
   133fa:	8e0d                	sub	a2,a2,a1
   133fc:	0642                	slli	a2,a2,0x10
   133fe:	8241                	srli	a2,a2,0x10
   13400:	00000097          	auipc	ra,0x0
   13404:	fd6080e7          	jalr	-42(ra) # 133d6 <flash_write>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/flash.c:118
        flash_write(sect+1,0,N-(Flash_Sect_size-offset),buf+(Flash_Sect_size-offset));
   13408:	6685                	lui	a3,0x1
   1340a:	412686b3          	sub	a3,a3,s2
   1340e:	767d                	lui	a2,0xfffff
   13410:	9626                	add	a2,a2,s1
   13412:	964a                	add	a2,a2,s2
   13414:	00198513          	addi	a0,s3,1
   13418:	96a2                	add	a3,a3,s0
   1341a:	0642                	slli	a2,a2,0x10
   1341c:	8241                	srli	a2,a2,0x10
   1341e:	4581                	li	a1,0
   13420:	0542                	slli	a0,a0,0x10
   13422:	8141                	srli	a0,a0,0x10
   13424:	00000097          	auipc	ra,0x0
   13428:	fb2080e7          	jalr	-78(ra) # 133d6 <flash_write>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/flash.c:134
}
   1342c:	4501                	li	a0,0
   1342e:	6305                	lui	t1,0x1
   13430:	911a                	add	sp,sp,t1
   13432:	50b2                	lw	ra,44(sp)
   13434:	5422                	lw	s0,40(sp)
   13436:	5492                	lw	s1,36(sp)
   13438:	5902                	lw	s2,32(sp)
   1343a:	49f2                	lw	s3,28(sp)
   1343c:	6145                	addi	sp,sp,48
   1343e:	8082                	ret
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/flash.c:124
         flash_read_logic(data,sect,0,Flash_Sect_size); //将当前扇区的全部值读入数组中
   13440:	6685                	lui	a3,0x1
   13442:	4601                	li	a2,0
   13444:	85aa                	mv	a1,a0
   13446:	757d                	lui	a0,0xfffff
   13448:	6785                	lui	a5,0x1
   1344a:	0818                	addi	a4,sp,16
   1344c:	97ba                	add	a5,a5,a4
   1344e:	953e                	add	a0,a0,a5
   13450:	00000097          	auipc	ra,0x0
   13454:	f60080e7          	jalr	-160(ra) # 133b0 <flash_read_logic>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/flash.c:126
         for(i = 0;i<N;i++)
   13458:	c885                	beqz	s1,13488 <flash_write+0xb2>
   1345a:	87a2                	mv	a5,s0
   1345c:	777d                	lui	a4,0xfffff
   1345e:	6685                	lui	a3,0x1
   13460:	0810                	addi	a2,sp,16
   13462:	96b2                	add	a3,a3,a2
   13464:	9736                	add	a4,a4,a3
   13466:	c63a                	sw	a4,12(sp)
   13468:	012705b3          	add	a1,a4,s2
   1346c:	0405                	addi	s0,s0,1
   1346e:	fff48693          	addi	a3,s1,-1
   13472:	06c2                	slli	a3,a3,0x10
   13474:	82c1                	srli	a3,a3,0x10
   13476:	96a2                	add	a3,a3,s0
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/flash.c:128 (discriminator 3)
             data[offset+i] = buf[i];
   13478:	0007c703          	lbu	a4,0(a5) # 1000 <MCU_SECTORSIZE>
   1347c:	00e58023          	sb	a4,0(a1)
   13480:	0785                	addi	a5,a5,1
   13482:	0585                	addi	a1,a1,1
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/flash.c:126 (discriminator 3)
         for(i = 0;i<N;i++)
   13484:	fed79ae3          	bne	a5,a3,13478 <flash_write+0xa2>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/flash.c:131
         flash_Best(sect,0,Flash_Sect_size,data);
   13488:	76fd                	lui	a3,0xfffff
   1348a:	6785                	lui	a5,0x1
   1348c:	0818                	addi	a4,sp,16
   1348e:	97ba                	add	a5,a5,a4
   13490:	96be                	add	a3,a3,a5
   13492:	6605                	lui	a2,0x1
   13494:	4581                	li	a1,0
   13496:	854e                	mv	a0,s3
   13498:	00000097          	auipc	ra,0x0
   1349c:	ef0080e7          	jalr	-272(ra) # 13388 <flash_Best>
   134a0:	b771                	j	1342c <flash_write+0x56>

000134a2 <gpio_set>:
gpio_get_port_pin():
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/gpio.c:372
//功能概要：将传进参数port_pin进行解析，得出具体端口号与引脚号，分别赋值给port与pin,返回。
//       （例：(PTB_NUM)|(9)解析为PORTB与9，并将其分别赋值给port与pin）。
//=====================================================================
void gpio_get_port_pin(uint16_t port_pin,uint8_t* port,uint8_t* pin)
{
    *port = (port_pin>>8);
   134a2:	00855793          	srli	a5,a0,0x8
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/gpio.c:373
    *pin = port_pin;
   134a6:	0ff57513          	andi	a0,a0,255
gpio_set():
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/gpio.c:70
   switch(port)
   134aa:	c789                	beqz	a5,134b4 <gpio_set+0x12>
   134ac:	4705                	li	a4,1
   134ae:	02e78b63          	beq	a5,a4,134e4 <gpio_set+0x42>
   134b2:	8082                	ret
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/gpio.c:74
       if(1 == state)    //高电平(该引脚对应置位寄存器置1)
   134b4:	4785                	li	a5,1
   134b6:	00f58d63          	beq	a1,a5,134d0 <gpio_set+0x2e>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/gpio.c:77
           R32_PA_CLR |= (1<<pin);
   134ba:	40001737          	lui	a4,0x40001
   134be:	0ac72683          	lw	a3,172(a4) # 400010ac <_eusrstack+0x1fff90ac>
   134c2:	4785                	li	a5,1
   134c4:	00a79533          	sll	a0,a5,a0
   134c8:	8d55                	or	a0,a0,a3
   134ca:	0aa72623          	sw	a0,172(a4)
   134ce:	8082                	ret
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/gpio.c:75
           R32_PA_OUT |= (1<<pin);
   134d0:	40001737          	lui	a4,0x40001
   134d4:	0a872683          	lw	a3,168(a4) # 400010a8 <_eusrstack+0x1fff90a8>
   134d8:	00a79533          	sll	a0,a5,a0
   134dc:	8d55                	or	a0,a0,a3
   134de:	0aa72423          	sw	a0,168(a4)
   134e2:	8082                	ret
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/gpio.c:81
      if(1 == state)    //高电平(该引脚对应置位寄存器置1)
   134e4:	4785                	li	a5,1
   134e6:	00f58d63          	beq	a1,a5,13500 <gpio_set+0x5e>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/gpio.c:84
          R32_PB_CLR |= (1<<pin);
   134ea:	40001737          	lui	a4,0x40001
   134ee:	0cc72683          	lw	a3,204(a4) # 400010cc <_eusrstack+0x1fff90cc>
   134f2:	4785                	li	a5,1
   134f4:	00a79533          	sll	a0,a5,a0
   134f8:	8d55                	or	a0,a0,a3
   134fa:	0ca72623          	sw	a0,204(a4)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/gpio.c:88
}
   134fe:	8082                	ret
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/gpio.c:82
          R32_PB_OUT |= (1<<pin);
   13500:	40001737          	lui	a4,0x40001
   13504:	0c872683          	lw	a3,200(a4) # 400010c8 <_eusrstack+0x1fff90c8>
   13508:	00a79533          	sll	a0,a5,a0
   1350c:	8d55                	or	a0,a0,a3
   1350e:	0ca72423          	sw	a0,200(a4)
   13512:	8082                	ret

00013514 <gpio_init>:
gpio_init():
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/gpio.c:24
{
   13514:	1141                	addi	sp,sp,-16
   13516:	c606                	sw	ra,12(sp)
gpio_get_port_pin():
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/gpio.c:372
    *port = (port_pin>>8);
   13518:	00855793          	srli	a5,a0,0x8
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/gpio.c:373
    *pin = port_pin;
   1351c:	0ff57693          	andi	a3,a0,255
gpio_init():
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/gpio.c:29
    switch(port)
   13520:	c799                	beqz	a5,1352e <gpio_init+0x1a>
   13522:	4705                	li	a4,1
   13524:	02e78e63          	beq	a5,a4,13560 <gpio_init+0x4c>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/gpio.c:55
}
   13528:	40b2                	lw	ra,12(sp)
   1352a:	0141                	addi	sp,sp,16
   1352c:	8082                	ret
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/gpio.c:32
        if(dir == 1)  //定义为输出引脚
   1352e:	4785                	li	a5,1
   13530:	00f58963          	beq	a1,a5,13542 <gpio_init+0x2e>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/gpio.c:39
            R32_PA_DIR &=~(GPIO_INPUT << pin );
   13534:	400017b7          	lui	a5,0x40001
   13538:	0a07a703          	lw	a4,160(a5) # 400010a0 <_eusrstack+0x1fff90a0>
   1353c:	0ae7a023          	sw	a4,160(a5)
   13540:	b7e5                	j	13528 <gpio_init+0x14>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/gpio.c:34
            R32_PA_DIR |= (GPIO_OUTPUT << pin );
   13542:	40001737          	lui	a4,0x40001
   13546:	0a072583          	lw	a1,160(a4) # 400010a0 <_eusrstack+0x1fff90a0>
   1354a:	00d796b3          	sll	a3,a5,a3
   1354e:	8ecd                	or	a3,a3,a1
   13550:	0ad72023          	sw	a3,160(a4)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/gpio.c:35
            gpio_set(port_pin,state);
   13554:	85b2                	mv	a1,a2
   13556:	00000097          	auipc	ra,0x0
   1355a:	f4c080e7          	jalr	-180(ra) # 134a2 <gpio_set>
   1355e:	b7e9                	j	13528 <gpio_init+0x14>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/gpio.c:43
        if(dir == 1)  //定义为输出引脚
   13560:	4785                	li	a5,1
   13562:	00f58963          	beq	a1,a5,13574 <gpio_init+0x60>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/gpio.c:50
            R32_PB_DIR &=~(GPIO_INPUT << pin );
   13566:	400017b7          	lui	a5,0x40001
   1356a:	0c07a703          	lw	a4,192(a5) # 400010c0 <_eusrstack+0x1fff90c0>
   1356e:	0ce7a023          	sw	a4,192(a5)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/gpio.c:55
}
   13572:	bf5d                	j	13528 <gpio_init+0x14>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/gpio.c:45
            R32_PB_DIR |= (GPIO_OUTPUT << pin );
   13574:	40001737          	lui	a4,0x40001
   13578:	0c072583          	lw	a1,192(a4) # 400010c0 <_eusrstack+0x1fff90c0>
   1357c:	00d796b3          	sll	a3,a5,a3
   13580:	8ecd                	or	a3,a3,a1
   13582:	0cd72023          	sw	a3,192(a4)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/gpio.c:46
            gpio_set(port_pin,state);
   13586:	85b2                	mv	a1,a2
   13588:	00000097          	auipc	ra,0x0
   1358c:	f1a080e7          	jalr	-230(ra) # 134a2 <gpio_set>
   13590:	bf61                	j	13528 <gpio_init+0x14>

00013592 <IRQ_OPC_CHANGE>:
IRQ_OPC_CHANGE():
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/gec.c:25
    static uint32_t opcode = 0;
    uint32_t bios_addr=0, user_addr=0;  //函数入口地址
    uint32_t user_opc=0;
    uint32_t imm1=0,imm2=0;
    uint32_t user_pc=0;
    if(IRQ_NUM == SysTick_IRQn)     //对SysTick_Handler中断进行重定向
   13592:	47b1                	li	a5,12
   13594:	02f50563          	beq	a0,a5,135be <IRQ_OPC_CHANGE+0x2c>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/gec.c:31
    {
        user_addr = (uint32_t)SysTick_Handler;
        bios_addr = (uint32_t)component_fun[28];
        user_opc = ((uint32_t *)user)[SysTick_IRQn+1];
    }
    else if(IRQ_NUM == SWI_IRQn)    //对SysTick_Handler中断进行重定向
   13598:	47b9                	li	a5,14
   1359a:	08f50763          	beq	a0,a5,13628 <IRQ_OPC_CHANGE+0x96>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/gec.c:37
    {
        user_addr = (uint32_t)SW_Handler;
        bios_addr = (uint32_t)component_fun[29];
        user_opc = ((uint32_t *)user)[SWI_IRQn+1];
    }
    else if(IRQ_NUM == UART1_IRQn)  //对SysTick_Handler中断进行重定向
   1359e:	476d                	li	a4,27
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/gec.c:44
        user_addr = (uint32_t)UART1_IRQHandler;
        bios_addr = (uint32_t)component_fun[30];
        user_opc = ((uint32_t *)user)[UART1_IRQn+1];
    }
    else                            //仅支持SysTick_Handler、SW_Handler、UART1_IRQHandler的重定向
       return 0;
   135a0:	4781                	li	a5,0
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/gec.c:37
    else if(IRQ_NUM == UART1_IRQn)  //对SysTick_Handler中断进行重定向
   135a2:	08e51163          	bne	a0,a4,13624 <IRQ_OPC_CHANGE+0x92>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/gec.c:39
        user_addr = (uint32_t)UART1_IRQHandler;
   135a6:	fffff817          	auipc	a6,0xfffff
   135aa:	b2680813          	addi	a6,a6,-1242 # 120cc <UART1_IRQHandler>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/gec.c:40
        bios_addr = (uint32_t)component_fun[30];
   135ae:	1fff2797          	auipc	a5,0x1fff2
   135b2:	1d678793          	addi	a5,a5,470 # 20005784 <component_fun>
   135b6:	439c                	lw	a5,0(a5)
   135b8:	5fb0                	lw	a2,120(a5)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/gec.c:41
        user_opc = ((uint32_t *)user)[UART1_IRQn+1];
   135ba:	59b8                	lw	a4,112(a1)
   135bc:	a821                	j	135d4 <IRQ_OPC_CHANGE+0x42>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/gec.c:27
        user_addr = (uint32_t)SysTick_Handler;
   135be:	fffff817          	auipc	a6,0xfffff
   135c2:	ade80813          	addi	a6,a6,-1314 # 1209c <SysTick_Handler>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/gec.c:28
        bios_addr = (uint32_t)component_fun[28];
   135c6:	1fff2797          	auipc	a5,0x1fff2
   135ca:	1be78793          	addi	a5,a5,446 # 20005784 <component_fun>
   135ce:	439c                	lw	a5,0(a5)
   135d0:	5bb0                	lw	a2,112(a5)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/gec.c:29
        user_opc = ((uint32_t *)user)[SysTick_IRQn+1];
   135d2:	59d8                	lw	a4,52(a1)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/gec.c:50
    // printf("addr1:%lx\r\n", user_addr);
    // printf("addr2:%lx\r\n", bios_addr);
    // printf("opc:%lx\r\n", user_opc);

    //判断该指令是否为向前跳转，如果是向前跳转说明已经修改过了中断向量表，无需再次修改
    if((user_opc&0x80000000)) return ((uint32_t *)user)[IRQ_NUM+1];         
   135d4:	06074663          	bltz	a4,13640 <IRQ_OPC_CHANGE+0xae>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/gec.c:52

    imm1 = ( ((user_opc&0x80000000)>>11) | ((user_opc&0x7FE00000)>>20) | ((user_opc&0x00100000)>>9) | ((user_opc&0x000FF000)) );
   135d8:	00975793          	srli	a5,a4,0x9
   135dc:	6685                	lui	a3,0x1
   135de:	80068693          	addi	a3,a3,-2048 # 800 <GEC_USER_SECTOR_END+0x7db>
   135e2:	8ff5                	and	a5,a5,a3
   135e4:	000ff6b7          	lui	a3,0xff
   135e8:	00d775b3          	and	a1,a4,a3
   135ec:	8fcd                	or	a5,a5,a1
   135ee:	8351                	srli	a4,a4,0x14
   135f0:	7fe77713          	andi	a4,a4,2046
   135f4:	8fd9                	or	a5,a5,a4
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/gec.c:58
    if(imm1>>20==1)         //向前跳转，补符号位
        imm1 = 0xFFE00000 | imm1;
    // printf("imm1:%lx\r\n", imm1);
    user_pc = user_addr - imm1;
    // printf("pc:%lx\r\n", user_pc);
    imm2 = bios_addr - user_pc;
   135f6:	41060633          	sub	a2,a2,a6
   135fa:	97b2                	add	a5,a5,a2
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/gec.c:60
    // printf("imm2:%lx\r\n", imm2);
    opcode = (((imm2&0x100000)<<11) | ((imm2&0x7FE)<<20) | ((imm2&0x800)<<9) | (imm2&0xFF000)) | (0x0) | (0x6f);
   135fc:	00b79513          	slli	a0,a5,0xb
   13600:	80000737          	lui	a4,0x80000
   13604:	8d79                	and	a0,a0,a4
   13606:	00979713          	slli	a4,a5,0x9
   1360a:	00100637          	lui	a2,0x100
   1360e:	8f71                	and	a4,a4,a2
   13610:	8d59                	or	a0,a0,a4
   13612:	8efd                	and	a3,a3,a5
   13614:	8d55                	or	a0,a0,a3
   13616:	07d2                	slli	a5,a5,0x14
   13618:	7fe00737          	lui	a4,0x7fe00
   1361c:	8ff9                	and	a5,a5,a4
   1361e:	8fc9                	or	a5,a5,a0
   13620:	06f7e793          	ori	a5,a5,111
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/gec.c:63
    // printf("opcode:%lx\r\n", opcode);
    return opcode;
}
   13624:	853e                	mv	a0,a5
   13626:	8082                	ret
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/gec.c:33
        user_addr = (uint32_t)SW_Handler;
   13628:	fffff817          	auipc	a6,0xfffff
   1362c:	a7880813          	addi	a6,a6,-1416 # 120a0 <SW_Handler>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/gec.c:34
        bios_addr = (uint32_t)component_fun[29];
   13630:	1fff2797          	auipc	a5,0x1fff2
   13634:	15478793          	addi	a5,a5,340 # 20005784 <component_fun>
   13638:	439c                	lw	a5,0(a5)
   1363a:	5bf0                	lw	a2,116(a5)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/gec.c:35
        user_opc = ((uint32_t *)user)[SWI_IRQn+1];
   1363c:	5dd8                	lw	a4,60(a1)
   1363e:	bf59                	j	135d4 <IRQ_OPC_CHANGE+0x42>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/gec.c:50 (discriminator 1)
    if((user_opc&0x80000000)) return ((uint32_t *)user)[IRQ_NUM+1];         
   13640:	0505                	addi	a0,a0,1
   13642:	050a                	slli	a0,a0,0x2
   13644:	952e                	add	a0,a0,a1
   13646:	411c                	lw	a5,0(a0)
   13648:	bff1                	j	13624 <IRQ_OPC_CHANGE+0x92>

0001364a <Vectors_Init>:
Vectors_Init():
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/gec.c:72
//参数说明：无
//功能概要：User对BIOS中断向量表的部分继承,构件库函数指针初始化
//修改信息：WYH，20200805，规范
//======================================================================
void  Vectors_Init()
{
   1364a:	716d                	addi	sp,sp,-272
   1364c:	10112623          	sw	ra,268(sp)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/gec.c:82
    // {
    //     flash_write_physical((MCU_SECTOR_NUM-1)*MCU_SECTORSIZE+
    //     MCU_FLASH_ADDR_START,24,(uint8_t *)"0123456789ABCDEF20200716");
    // }
    //（1）给component_fun赋值，SYSTEM_FUNCTION函数用
    component_fun=(void **)(MCU_FLASH_ADDR_START+GEC_COMPONENT_LST_START*MCU_SECTORSIZE);
   13650:	67c1                	lui	a5,0x10
   13652:	1fff2717          	auipc	a4,0x1fff2
   13656:	12f72923          	sw	a5,306(a4) # 20005784 <component_fun>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/gec.c:87
    
    uint8_t user[MCU_SECTORSIZE/16];                    //User向量表变量数组
    uint32_t opcode;
    //（2.1）读取User程序的中断向量表各中断处理程序首地址赋并给user数组
    flash_read_logic(user,GEC_USER_SECTOR_START,0,MCU_SECTORSIZE/16);
   1365a:	10000693          	li	a3,256
   1365e:	4601                	li	a2,0
   13660:	45c9                	li	a1,18
   13662:	850a                	mv	a0,sp
   13664:	00000097          	auipc	ra,0x0
   13668:	d4c080e7          	jalr	-692(ra) # 133b0 <flash_read_logic>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/gec.c:89
    // （2.2）读取User程序的中断向量表各中断处理程序首地址赋并给user数组
    flash_erase(GEC_USER_SECTOR_START);
   1366c:	4549                	li	a0,18
   1366e:	00000097          	auipc	ra,0x0
   13672:	cf4080e7          	jalr	-780(ra) # 13362 <flash_erase>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/gec.c:92
    //重定向 UART1_IRQHandler
    // user[112]=(uint8_t)(0x6f); user[113]=(uint8_t)(0x40); user[114]=(uint8_t)(0xaf); user[115]=(uint8_t)(0x8a);
    opcode = IRQ_OPC_CHANGE(UART1_IRQn, user);
   13676:	858a                	mv	a1,sp
   13678:	456d                	li	a0,27
   1367a:	00000097          	auipc	ra,0x0
   1367e:	f18080e7          	jalr	-232(ra) # 13592 <IRQ_OPC_CHANGE>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/gec.c:93
    ((uint32_t *)user)[UART1_IRQn+1] = opcode;
   13682:	d8aa                	sw	a0,112(sp)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/gec.c:97
    #if (RTThread_Start == 0)
        //重定向 SW_Handler
        // user[60]=(uint8_t)(0x6f); user[61]=(uint8_t)(0x40); user[62]=(uint8_t)(0x0f); user[63]=(uint8_t)(0xdb);
        opcode = IRQ_OPC_CHANGE(SWI_IRQn, user);
   13684:	858a                	mv	a1,sp
   13686:	4539                	li	a0,14
   13688:	00000097          	auipc	ra,0x0
   1368c:	f0a080e7          	jalr	-246(ra) # 13592 <IRQ_OPC_CHANGE>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/gec.c:98
        ((uint32_t *)user)[SWI_IRQn+1] = opcode;
   13690:	de2a                	sw	a0,60(sp)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/gec.c:101
        //重定向 SysTickHandler
        // user[52]=(uint8_t)(0x6f); user[53]=(uint8_t)(0x40); user[54]=(uint8_t)(0x0f); user[55]=(uint8_t)(0x86);
        opcode = IRQ_OPC_CHANGE(SysTick_IRQn, user);
   13692:	858a                	mv	a1,sp
   13694:	4531                	li	a0,12
   13696:	00000097          	auipc	ra,0x0
   1369a:	efc080e7          	jalr	-260(ra) # 13592 <IRQ_OPC_CHANGE>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/gec.c:102
        ((uint32_t *)user)[SysTick_IRQn+1] = opcode;
   1369e:	da2a                	sw	a0,52(sp)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/gec.c:105
    #endif
    //（2.3）将修改后的user数组写回User中断向量表
    flash_write(GEC_USER_SECTOR_START,0,MCU_SECTORSIZE/16,user);
   136a0:	868a                	mv	a3,sp
   136a2:	10000613          	li	a2,256
   136a6:	4581                	li	a1,0
   136a8:	4549                	li	a0,18
   136aa:	00000097          	auipc	ra,0x0
   136ae:	d2c080e7          	jalr	-724(ra) # 133d6 <flash_write>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/gec.c:108

    //（4）printf提示
    printf("  【User提示】：将进入User的main函数执行...\r\n\n");
   136b2:	00003517          	auipc	a0,0x3
   136b6:	b4250513          	addi	a0,a0,-1214 # 161f4 <strlen+0x282>
   136ba:	00001097          	auipc	ra,0x1
   136be:	0d4080e7          	jalr	212(ra) # 1478e <myprintf>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/gec.c:111

    // #endif
}
   136c2:	10c12083          	lw	ra,268(sp)
   136c6:	6151                	addi	sp,sp,272
   136c8:	8082                	ret

000136ca <uart_init>:
uart_init():
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:31
void uart_init(uint8_t uartNo, uint32_t baud_rate)
{
    uint32_t x;

//    SetSysClock( CLK_SOURCE_PLL_60MHz );
    switch (uartNo)
   136ca:	4805                	li	a6,1
   136cc:	09050e63          	beq	a0,a6,13768 <uart_init+0x9e>
   136d0:	01851813          	slli	a6,a0,0x18
   136d4:	41885813          	srai	a6,a6,0x18
   136d8:	00080963          	beqz	a6,136ea <uart_init+0x20>
   136dc:	4809                	li	a6,2
   136de:	11050663          	beq	a0,a6,137ea <uart_init+0x120>
   136e2:	480d                	li	a6,3
   136e4:	19050863          	beq	a0,a6,13874 <uart_init+0x1aa>
   136e8:	8082                	ret
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:40
            //
            switch (UART0_GROUP)
            {
                case 0:

                   R32_PB_OUT |= ((uint32_t)(bTXD0));
   136ea:	400017b7          	lui	a5,0x40001
   136ee:	0c87a703          	lw	a4,200(a5) # 400010c8 <_eusrstack+0x1fff90c8>
   136f2:	08076713          	ori	a4,a4,128
   136f6:	0ce7a423          	sw	a4,200(a5)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:42
                   //PB4->RX
                   R32_PB_PD_DRV &= ~((uint32_t)(bRXD0));
   136fa:	0d47a703          	lw	a4,212(a5)
   136fe:	9b3d                	andi	a4,a4,-17
   13700:	0ce7aa23          	sw	a4,212(a5)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:43
                   R32_PB_PU     |= ((uint32_t)(bRXD0));
   13704:	0d07a703          	lw	a4,208(a5)
   13708:	01076713          	ori	a4,a4,16
   1370c:	0ce7a823          	sw	a4,208(a5)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:44
                   R32_PB_DIR    &= ~((uint32_t)(bRXD0));
   13710:	0c07a703          	lw	a4,192(a5)
   13714:	9b3d                	andi	a4,a4,-17
   13716:	0ce7a023          	sw	a4,192(a5)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:46
                   //PB7->TX
                   R32_PB_PD_DRV &= ~((uint32_t)(bTXD0));
   1371a:	0d47a703          	lw	a4,212(a5)
   1371e:	f7f77713          	andi	a4,a4,-129
   13722:	0ce7aa23          	sw	a4,212(a5)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:47
                   R32_PB_DIR    |= ((uint32_t)(bTXD0));
   13726:	0c07a703          	lw	a4,192(a5)
   1372a:	08076713          	ori	a4,a4,128
   1372e:	0ce7a023          	sw	a4,192(a5)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:50

//                   R8_UART0_FCR = (2<<6) | RB_FCR_TX_FIFO_CLR | RB_FCR_RX_FIFO_CLR | RB_FCR_FIFO_EN;     // FIFO打开，触发点4字节
                   R8_UART0_LCR = RB_LCR_WORD_SZ;
   13732:	40003737          	lui	a4,0x40003
   13736:	478d                	li	a5,3
   13738:	00f701a3          	sb	a5,3(a4) # 40003003 <_eusrstack+0x1fffb003>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:51
                   R8_UART0_IER = RB_IER_TXD_EN;
   1373c:	04000793          	li	a5,64
   13740:	00f700a3          	sb	a5,1(a4)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:52
                   R8_UART0_DIV = 1;
   13744:	4785                	li	a5,1
   13746:	00f70723          	sb	a5,14(a4)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:55

                   //配置波特率115200
                   x = 10 * (480000000/(0x08)) / 8 / baud_rate;
   1374a:	04787637          	lui	a2,0x4787
   1374e:	8c060613          	addi	a2,a2,-1856 # 47868c0 <_data_lma+0x47703b0>
   13752:	02b657b3          	divu	a5,a2,a1
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:56
                   x = (x + 5) / 10;
   13756:	0795                	addi	a5,a5,5
   13758:	4629                	li	a2,10
   1375a:	02c7d7b3          	divu	a5,a5,a2
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:57
                   R16_UART0_DL = (uint16_t)x;
   1375e:	07c2                	slli	a5,a5,0x10
   13760:	83c1                	srli	a5,a5,0x10
   13762:	00f71623          	sh	a5,12(a4)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:86
                  break;
                default:
                    break;
            }
#endif
            break;
   13766:	8082                	ret
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:93
#ifdef UART1_GROUP
            //
            switch (UART1_GROUP) {
                case 0:

                    R32_PA_OUT |= ((uint32_t)(bTXD1));
   13768:	400017b7          	lui	a5,0x40001
   1376c:	0a87a703          	lw	a4,168(a5) # 400010a8 <_eusrstack+0x1fff90a8>
   13770:	20076713          	ori	a4,a4,512
   13774:	0ae7a423          	sw	a4,168(a5)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:95
                    //PA8->RX
                    R32_PA_PD_DRV &= ~((uint32_t)(bRXD1));
   13778:	0b47a703          	lw	a4,180(a5)
   1377c:	eff77713          	andi	a4,a4,-257
   13780:	0ae7aa23          	sw	a4,180(a5)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:96
                    R32_PA_PU     |= ((uint32_t)(bRXD1));
   13784:	0b07a703          	lw	a4,176(a5)
   13788:	10076713          	ori	a4,a4,256
   1378c:	0ae7a823          	sw	a4,176(a5)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:97
                    R32_PA_DIR    &= ~((uint32_t)(bRXD1));
   13790:	0a07a703          	lw	a4,160(a5)
   13794:	eff77713          	andi	a4,a4,-257
   13798:	0ae7a023          	sw	a4,160(a5)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:100

                    //PA9->TX
                    R32_PA_PD_DRV &= ~((uint32_t)(bTXD1));
   1379c:	0b47a703          	lw	a4,180(a5)
   137a0:	dff77713          	andi	a4,a4,-513
   137a4:	0ae7aa23          	sw	a4,180(a5)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:101
                    R32_PA_DIR    |= ((uint32_t)(bTXD1));
   137a8:	0a07a703          	lw	a4,160(a5)
   137ac:	20076713          	ori	a4,a4,512
   137b0:	0ae7a023          	sw	a4,160(a5)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:104

//                    R8_UART1_FCR = (2<<6) | RB_FCR_TX_FIFO_CLR | RB_FCR_RX_FIFO_CLR | RB_FCR_FIFO_EN;       // FIFO打开，触发点4字节
                    R8_UART1_LCR = RB_LCR_WORD_SZ;
   137b4:	40003737          	lui	a4,0x40003
   137b8:	478d                	li	a5,3
   137ba:	40f701a3          	sb	a5,1027(a4) # 40003403 <_eusrstack+0x1fffb403>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:105
                    R8_UART1_IER = RB_IER_TXD_EN;
   137be:	04000793          	li	a5,64
   137c2:	40f700a3          	sb	a5,1025(a4)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:106
                    R8_UART1_DIV = 1;
   137c6:	4785                	li	a5,1
   137c8:	40f70723          	sb	a5,1038(a4)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:109

                    //配置波特率115200
                    x = 10 * (480000000/(0x08)) / 8 / baud_rate;
   137cc:	047876b7          	lui	a3,0x4787
   137d0:	8c068693          	addi	a3,a3,-1856 # 47868c0 <_data_lma+0x47703b0>
   137d4:	02b6d7b3          	divu	a5,a3,a1
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:110
                    x = (x + 5) / 10;
   137d8:	0795                	addi	a5,a5,5
   137da:	46a9                	li	a3,10
   137dc:	02d7d7b3          	divu	a5,a5,a3
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:111
                    R16_UART1_DL = (uint16_t)x;
   137e0:	07c2                	slli	a5,a5,0x10
   137e2:	83c1                	srli	a5,a5,0x10
   137e4:	40f71623          	sh	a5,1036(a4)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:140
                    break;
                default:
                    break;
            }
#endif
            break;
   137e8:	8082                	ret
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:143
        case UART_2:

              R32_PB_OUT |= ((uint32_t)(bTXD2));
   137ea:	400017b7          	lui	a5,0x40001
   137ee:	0c87a683          	lw	a3,200(a5) # 400010c8 <_eusrstack+0x1fff90c8>
   137f2:	00800537          	lui	a0,0x800
   137f6:	8ec9                	or	a3,a3,a0
   137f8:	0cd7a423          	sw	a3,200(a5)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:145
              //PB22->RX
              R32_PB_PD_DRV &= ~((uint32_t)(bRXD2));
   137fc:	0d47a683          	lw	a3,212(a5)
   13800:	ffc00737          	lui	a4,0xffc00
   13804:	177d                	addi	a4,a4,-1
   13806:	8ef9                	and	a3,a3,a4
   13808:	0cd7aa23          	sw	a3,212(a5)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:146
              R32_PB_PU     |= ((uint32_t)(bRXD2));
   1380c:	0d07a683          	lw	a3,208(a5)
   13810:	00400637          	lui	a2,0x400
   13814:	8ed1                	or	a3,a3,a2
   13816:	0cd7a823          	sw	a3,208(a5)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:147
              R32_PB_DIR    &= ~((uint32_t)(bRXD2));
   1381a:	0c07a683          	lw	a3,192(a5)
   1381e:	8f75                	and	a4,a4,a3
   13820:	0ce7a023          	sw	a4,192(a5)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:149
              //PB23->TX
              R32_PB_PD_DRV &= ~((uint32_t)(bTXD2));
   13824:	0d47a683          	lw	a3,212(a5)
   13828:	ff800637          	lui	a2,0xff800
   1382c:	167d                	addi	a2,a2,-1
   1382e:	8ef1                	and	a3,a3,a2
   13830:	0cd7aa23          	sw	a3,212(a5)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:150
              R32_PB_DIR    |= ((uint32_t)(bTXD2));
   13834:	0c07a703          	lw	a4,192(a5)
   13838:	8f49                	or	a4,a4,a0
   1383a:	0ce7a023          	sw	a4,192(a5)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:153

//              R8_UART2_FCR = (2<<6) | RB_FCR_TX_FIFO_CLR | RB_FCR_RX_FIFO_CLR | RB_FCR_FIFO_EN;      // FIFO打开，触发点4字节
              R8_UART2_LCR = RB_LCR_WORD_SZ;
   1383e:	400046b7          	lui	a3,0x40004
   13842:	478d                	li	a5,3
   13844:	80f681a3          	sb	a5,-2045(a3) # 40003803 <_eusrstack+0x1fffb803>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:154
              R8_UART2_IER = RB_IER_TXD_EN;
   13848:	04000793          	li	a5,64
   1384c:	80f680a3          	sb	a5,-2047(a3)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:155
              R8_UART2_DIV = 1;
   13850:	4785                	li	a5,1
   13852:	80f68723          	sb	a5,-2034(a3)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:158

              //配置波特率115200
              x = 10 * (480000000/(0x08)) / 8 / baud_rate;
   13856:	04787737          	lui	a4,0x4787
   1385a:	8c070713          	addi	a4,a4,-1856 # 47868c0 <_data_lma+0x47703b0>
   1385e:	02b757b3          	divu	a5,a4,a1
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:159
              x = (x + 5) / 10;
   13862:	0795                	addi	a5,a5,5
   13864:	4729                	li	a4,10
   13866:	02e7d7b3          	divu	a5,a5,a4
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:160
              R16_UART2_DL = (uint16_t)x;
   1386a:	07c2                	slli	a5,a5,0x10
   1386c:	83c1                	srli	a5,a5,0x10
   1386e:	80f69623          	sh	a5,-2036(a3)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:161
              break;
   13872:	8082                	ret
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:164
        case UART_3:

                R32_PA_OUT |= ((uint32_t)(bTXD3));
   13874:	400017b7          	lui	a5,0x40001
   13878:	0a87a703          	lw	a4,168(a5) # 400010a8 <_eusrstack+0x1fff90a8>
   1387c:	02076713          	ori	a4,a4,32
   13880:	0ae7a423          	sw	a4,168(a5)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:166
                //PA4->RX
                R32_PA_PD_DRV &= ~((uint32_t)(bRXD3));
   13884:	0b47a703          	lw	a4,180(a5)
   13888:	9b3d                	andi	a4,a4,-17
   1388a:	0ae7aa23          	sw	a4,180(a5)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:167
                R32_PA_PU     |= ((uint32_t)(bRXD3));
   1388e:	0b07a703          	lw	a4,176(a5)
   13892:	01076713          	ori	a4,a4,16
   13896:	0ae7a823          	sw	a4,176(a5)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:168
                R32_PA_DIR    &= ~((uint32_t)(bRXD3));
   1389a:	0a07a703          	lw	a4,160(a5)
   1389e:	9b3d                	andi	a4,a4,-17
   138a0:	0ae7a023          	sw	a4,160(a5)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:170
                //PA5->TX
                R32_PA_PD_DRV &= ~((uint32_t)(bTXD3));
   138a4:	0b47a703          	lw	a4,180(a5)
   138a8:	fdf77713          	andi	a4,a4,-33
   138ac:	0ae7aa23          	sw	a4,180(a5)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:171
                R32_PA_DIR    |= ((uint32_t)(bTXD3));
   138b0:	0a07a703          	lw	a4,160(a5)
   138b4:	02076713          	ori	a4,a4,32
   138b8:	0ae7a023          	sw	a4,160(a5)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:174

//                R8_UART3_FCR = (2<<6) | RB_FCR_TX_FIFO_CLR | RB_FCR_RX_FIFO_CLR | RB_FCR_FIFO_EN;       // FIFO打开，触发点4字节
                R8_UART3_LCR = RB_LCR_WORD_SZ;
   138bc:	40004737          	lui	a4,0x40004
   138c0:	478d                	li	a5,3
   138c2:	c0f701a3          	sb	a5,-1021(a4) # 40003c03 <_eusrstack+0x1fffbc03>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:175
                R8_UART3_IER = RB_IER_TXD_EN;
   138c6:	04000793          	li	a5,64
   138ca:	c0f700a3          	sb	a5,-1023(a4)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:176
                R8_UART3_DIV = 1;
   138ce:	4785                	li	a5,1
   138d0:	c0f70723          	sb	a5,-1010(a4)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:179

               //配置波特率115200
                x = 10 * (480000000/(0x08)) / 8 / baud_rate;
   138d4:	047877b7          	lui	a5,0x4787
   138d8:	8c078793          	addi	a5,a5,-1856 # 47868c0 <_data_lma+0x47703b0>
   138dc:	02b7d7b3          	divu	a5,a5,a1
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:180
                x = (x + 5) / 10;
   138e0:	0795                	addi	a5,a5,5
   138e2:	46a9                	li	a3,10
   138e4:	02d7d7b3          	divu	a5,a5,a3
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:181
                R16_UART3_DL = (uint16_t)x;
   138e8:	07c2                	slli	a5,a5,0x10
   138ea:	83c1                	srli	a5,a5,0x10
   138ec:	c0f71623          	sh	a5,-1012(a4)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:187
                break;
        default:
            break;
    }

}
   138f0:	8082                	ret

000138f2 <uart_send1>:
uart_send1():
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:201
uint8_t uart_send1(uint8_t uartNo,uint8_t ch)
{
  uint32_t t;

    //判断传入串口号参数是否有误，有误直接退出
    if(uart_is_uartNo(uartNo)==0)
   138f2:	470d                	li	a4,3
   138f4:	10a76463          	bltu	a4,a0,139fc <uart_send1+0x10a>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:206
    {
        return 0;
    }
    //判断UARTx号
    switch (uartNo)
   138f8:	4705                	li	a4,1
   138fa:	06e50863          	beq	a0,a4,1396a <uart_send1+0x78>
   138fe:	01851713          	slli	a4,a0,0x18
   13902:	8761                	srai	a4,a4,0x18
   13904:	cb49                	beqz	a4,13996 <uart_send1+0xa4>
   13906:	4709                	li	a4,2
   13908:	02e50b63          	beq	a0,a4,1393e <uart_send1+0x4c>
   1390c:	470d                	li	a4,3
   1390e:	0ae51f63          	bne	a0,a4,139cc <uart_send1+0xda>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:238
          }
            break;
        case 3:
          for (t = 0; t < 0xFBBB; t++)//查询指定次数
          {
            if(R8_UART3_LSR &RB_LSR_TX_FIFO_EMP){
   13912:	400047b7          	lui	a5,0x40004
   13916:	c057c783          	lbu	a5,-1019(a5) # 40003c05 <_eusrstack+0x1fffbc05>
   1391a:	0207f793          	andi	a5,a5,32
   1391e:	ebe9                	bnez	a5,139f0 <uart_send1+0xfe>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:236
          for (t = 0; t < 0xFBBB; t++)//查询指定次数
   13920:	4785                	li	a5,1
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:238
            if(R8_UART3_LSR &RB_LSR_TX_FIFO_EMP){
   13922:	40004637          	lui	a2,0x40004
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:236
          for (t = 0; t < 0xFBBB; t++)//查询指定次数
   13926:	66c1                	lui	a3,0x10
   13928:	bbb68693          	addi	a3,a3,-1093 # fbbb <MCU_SECTORSIZE+0xebbb>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:238
            if(R8_UART3_LSR &RB_LSR_TX_FIFO_EMP){
   1392c:	c0564703          	lbu	a4,-1019(a2) # 40003c05 <_eusrstack+0x1fffbc05>
   13930:	02077713          	andi	a4,a4,32
   13934:	ef5d                	bnez	a4,139f2 <uart_send1+0x100>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:236 (discriminator 2)
          for (t = 0; t < 0xFBBB; t++)//查询指定次数
   13936:	0785                	addi	a5,a5,1
   13938:	fed79ae3          	bne	a5,a3,1392c <uart_send1+0x3a>
   1393c:	a841                	j	139cc <uart_send1+0xda>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:229
            if(R8_UART2_LSR &RB_LSR_TX_FIFO_EMP){
   1393e:	400047b7          	lui	a5,0x40004
   13942:	8057c783          	lbu	a5,-2043(a5) # 40003805 <_eusrstack+0x1fffb805>
   13946:	0207f793          	andi	a5,a5,32
   1394a:	efc9                	bnez	a5,139e4 <uart_send1+0xf2>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:227
          for (t = 0; t < 0xFBBB; t++)//查询指定次数
   1394c:	4785                	li	a5,1
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:229
            if(R8_UART2_LSR &RB_LSR_TX_FIFO_EMP){
   1394e:	40004637          	lui	a2,0x40004
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:227
          for (t = 0; t < 0xFBBB; t++)//查询指定次数
   13952:	66c1                	lui	a3,0x10
   13954:	bbb68693          	addi	a3,a3,-1093 # fbbb <MCU_SECTORSIZE+0xebbb>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:229
            if(R8_UART2_LSR &RB_LSR_TX_FIFO_EMP){
   13958:	80564703          	lbu	a4,-2043(a2) # 40003805 <_eusrstack+0x1fffb805>
   1395c:	02077713          	andi	a4,a4,32
   13960:	e359                	bnez	a4,139e6 <uart_send1+0xf4>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:227 (discriminator 2)
          for (t = 0; t < 0xFBBB; t++)//查询指定次数
   13962:	0785                	addi	a5,a5,1
   13964:	fed79ae3          	bne	a5,a3,13958 <uart_send1+0x66>
   13968:	a095                	j	139cc <uart_send1+0xda>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:220
            if(R8_UART1_LSR &RB_LSR_TX_FIFO_EMP){
   1396a:	400037b7          	lui	a5,0x40003
   1396e:	4057c783          	lbu	a5,1029(a5) # 40003405 <_eusrstack+0x1fffb405>
   13972:	0207f793          	andi	a5,a5,32
   13976:	e3ad                	bnez	a5,139d8 <uart_send1+0xe6>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:218
          for (t = 0; t < 0xFBBB; t++)//查询指定次数
   13978:	4785                	li	a5,1
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:220
            if(R8_UART1_LSR &RB_LSR_TX_FIFO_EMP){
   1397a:	40003637          	lui	a2,0x40003
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:218
          for (t = 0; t < 0xFBBB; t++)//查询指定次数
   1397e:	66c1                	lui	a3,0x10
   13980:	bbb68693          	addi	a3,a3,-1093 # fbbb <MCU_SECTORSIZE+0xebbb>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:220
            if(R8_UART1_LSR &RB_LSR_TX_FIFO_EMP){
   13984:	40564703          	lbu	a4,1029(a2) # 40003405 <_eusrstack+0x1fffb405>
   13988:	02077713          	andi	a4,a4,32
   1398c:	e739                	bnez	a4,139da <uart_send1+0xe8>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:218 (discriminator 2)
          for (t = 0; t < 0xFBBB; t++)//查询指定次数
   1398e:	0785                	addi	a5,a5,1
   13990:	fed79ae3          	bne	a5,a3,13984 <uart_send1+0x92>
   13994:	a825                	j	139cc <uart_send1+0xda>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:211
            if(R8_UART0_LSR &RB_LSR_TX_FIFO_EMP){
   13996:	400037b7          	lui	a5,0x40003
   1399a:	0057c783          	lbu	a5,5(a5) # 40003005 <_eusrstack+0x1fffb005>
   1399e:	0207f793          	andi	a5,a5,32
   139a2:	e385                	bnez	a5,139c2 <uart_send1+0xd0>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:209
          for (t = 0; t < 0xFBBB; t++)//查询指定次数
   139a4:	4785                	li	a5,1
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:211
            if(R8_UART0_LSR &RB_LSR_TX_FIFO_EMP){
   139a6:	40003637          	lui	a2,0x40003
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:209
          for (t = 0; t < 0xFBBB; t++)//查询指定次数
   139aa:	66c1                	lui	a3,0x10
   139ac:	bbb68693          	addi	a3,a3,-1093 # fbbb <MCU_SECTORSIZE+0xebbb>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:211
            if(R8_UART0_LSR &RB_LSR_TX_FIFO_EMP){
   139b0:	00564703          	lbu	a4,5(a2) # 40003005 <_eusrstack+0x1fffb005>
   139b4:	02077713          	andi	a4,a4,32
   139b8:	e711                	bnez	a4,139c4 <uart_send1+0xd2>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:209 (discriminator 2)
          for (t = 0; t < 0xFBBB; t++)//查询指定次数
   139ba:	0785                	addi	a5,a5,1
   139bc:	fed79ae3          	bne	a5,a3,139b0 <uart_send1+0xbe>
   139c0:	a031                	j	139cc <uart_send1+0xda>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:209
   139c2:	4781                	li	a5,0
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:212
              R8_UART0_THR = ch;
   139c4:	40003737          	lui	a4,0x40003
   139c8:	00b70423          	sb	a1,8(a4) # 40003008 <_eusrstack+0x1fffb008>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:203
        return 0;
   139cc:	6541                	lui	a0,0x10
   139ce:	bbb50513          	addi	a0,a0,-1093 # fbbb <MCU_SECTORSIZE+0xebbb>
   139d2:	00a7b533          	sltu	a0,a5,a0
   139d6:	8082                	ret
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:218
          for (t = 0; t < 0xFBBB; t++)//查询指定次数
   139d8:	4781                	li	a5,0
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:221
              R8_UART1_THR = ch;
   139da:	40003737          	lui	a4,0x40003
   139de:	40b70423          	sb	a1,1032(a4) # 40003408 <_eusrstack+0x1fffb408>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:222
              break;
   139e2:	b7ed                	j	139cc <uart_send1+0xda>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:227
          for (t = 0; t < 0xFBBB; t++)//查询指定次数
   139e4:	4781                	li	a5,0
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:230
              R8_UART2_THR = ch;
   139e6:	40004737          	lui	a4,0x40004
   139ea:	80b70423          	sb	a1,-2040(a4) # 40003808 <_eusrstack+0x1fffb808>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:231
              break;
   139ee:	bff9                	j	139cc <uart_send1+0xda>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:236
          for (t = 0; t < 0xFBBB; t++)//查询指定次数
   139f0:	4781                	li	a5,0
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:239
              R8_UART3_THR = ch;
   139f2:	40004737          	lui	a4,0x40004
   139f6:	c0b70423          	sb	a1,-1016(a4) # 40003c08 <_eusrstack+0x1fffbc08>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:240
              break;
   139fa:	bfc9                	j	139cc <uart_send1+0xda>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:203
        return 0;
   139fc:	4501                	li	a0,0
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:252

    if (t >= 0xFBBB)
        return 0; //发送超时，发送失败
    else
        return 1; //成功发送
}
   139fe:	8082                	ret

00013a00 <uart_re1>:
uart_re1():
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:428
//======================================================================
uint8_t uart_re1(uint8_t uartNo,uint8_t *fp)
{
    uint8_t dat;
    uint8_t flag;
    switch (uartNo)
   13a00:	4705                	li	a4,1
   13a02:	02e50a63          	beq	a0,a4,13a36 <uart_re1+0x36>
   13a06:	01851713          	slli	a4,a0,0x18
   13a0a:	8761                	srai	a4,a4,0x18
   13a0c:	cb09                	beqz	a4,13a1e <uart_re1+0x1e>
   13a0e:	4709                	li	a4,2
   13a10:	02e50f63          	beq	a0,a4,13a4e <uart_re1+0x4e>
   13a14:	470d                	li	a4,3
   13a16:	04e50863          	beq	a0,a4,13a66 <uart_re1+0x66>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:454
            break;
        default:
            break;
    }
    return (dat);
}
   13a1a:	853e                	mv	a0,a5
   13a1c:	8082                	ret
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:431
            *fp =1;
   13a1e:	4785                	li	a5,1
   13a20:	00f58023          	sb	a5,0(a1)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:432
            flag = R8_UART0_LSR;
   13a24:	400037b7          	lui	a5,0x40003
   13a28:	0057c703          	lbu	a4,5(a5) # 40003005 <_eusrstack+0x1fffb005>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:433
            return R8_UART0_RBR;
   13a2c:	0087c783          	lbu	a5,8(a5)
   13a30:	0ff7f793          	andi	a5,a5,255
   13a34:	b7dd                	j	13a1a <uart_re1+0x1a>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:436
            *fp =1;
   13a36:	4785                	li	a5,1
   13a38:	00f58023          	sb	a5,0(a1)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:437
            flag = R8_UART1_LSR;
   13a3c:	400037b7          	lui	a5,0x40003
   13a40:	4057c703          	lbu	a4,1029(a5) # 40003405 <_eusrstack+0x1fffb405>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:438
            dat = R8_UART1_RBR;
   13a44:	4087c783          	lbu	a5,1032(a5)
   13a48:	0ff7f793          	andi	a5,a5,255
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:439
            break;
   13a4c:	b7f9                	j	13a1a <uart_re1+0x1a>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:441
            *fp =1;
   13a4e:	4785                	li	a5,1
   13a50:	00f58023          	sb	a5,0(a1)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:442
            flag = R8_UART2_LSR;
   13a54:	400047b7          	lui	a5,0x40004
   13a58:	8057c703          	lbu	a4,-2043(a5) # 40003805 <_eusrstack+0x1fffb805>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:443
            dat = R8_UART2_RBR;
   13a5c:	8087c783          	lbu	a5,-2040(a5)
   13a60:	0ff7f793          	andi	a5,a5,255
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:444
            break;
   13a64:	bf5d                	j	13a1a <uart_re1+0x1a>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:446
            *fp =1;
   13a66:	4785                	li	a5,1
   13a68:	00f58023          	sb	a5,0(a1)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:447
            flag = R8_UART3_LSR;
   13a6c:	400047b7          	lui	a5,0x40004
   13a70:	c057c703          	lbu	a4,-1019(a5) # 40003c05 <_eusrstack+0x1fffbc05>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:448
            dat = R8_UART3_RBR;
   13a74:	c087c783          	lbu	a5,-1016(a5)
   13a78:	0ff7f793          	andi	a5,a5,255
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:449
            break;
   13a7c:	bf79                	j	13a1a <uart_re1+0x1a>

00013a7e <uart_enable_re_int>:
uart_enable_re_int():
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:497
//功能概要：开串口接收中断
//======================================================================
void uart_enable_re_int(uint8_t uartNo)
{
    //判断传入串口号参数是否有误，有误直接退出
    if(!uart_is_uartNo(uartNo))
   13a7e:	478d                	li	a5,3
   13a80:	0ca7e163          	bltu	a5,a0,13b42 <uart_enable_re_int+0xc4>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:502
    {
        return;
    }

    switch (uartNo)
   13a84:	4785                	li	a5,1
   13a86:	04f50263          	beq	a0,a5,13aca <uart_enable_re_int+0x4c>
   13a8a:	01851793          	slli	a5,a0,0x18
   13a8e:	87e1                	srai	a5,a5,0x18
   13a90:	cb81                	beqz	a5,13aa0 <uart_enable_re_int+0x22>
   13a92:	4789                	li	a5,2
   13a94:	06f50063          	beq	a0,a5,13af4 <uart_enable_re_int+0x76>
   13a98:	478d                	li	a5,3
   13a9a:	08f50163          	beq	a0,a5,13b1c <uart_enable_re_int+0x9e>
   13a9e:	8082                	ret
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:507
    {
        case 0:
//            R8_UART0_FCR = (R8_UART0_FCR&~RB_FCR_FIFO_TRIG)|(3<<6);
//            R8_UART0_IER |= (RB_IER_RECV_RDY|RB_IER_LINE_STAT);
            R8_UART0_IER |= RB_IER_RECV_RDY;
   13aa0:	400037b7          	lui	a5,0x40003
   13aa4:	0017c703          	lbu	a4,1(a5) # 40003001 <_eusrstack+0x1fffb001>
   13aa8:	00176713          	ori	a4,a4,1
   13aac:	00e780a3          	sb	a4,1(a5)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:508
            R8_UART0_MCR |= RB_MCR_INT_OE;
   13ab0:	0007c703          	lbu	a4,0(a5)
   13ab4:	00876713          	ori	a4,a4,8
   13ab8:	00e78023          	sb	a4,0(a5)
PFIC_EnableIRQ():
c:\Users\16233\Desktop\CH04-1\浮点数-CH573\02_CPU/core_riscv.h:87
* Description    : Enable Interrupt
* Input          : IRQn: Interrupt Numbers
* Return         : None
*******************************************************************************/
RV_STATIC_INLINE void PFIC_EnableIRQ(IRQn_Type IRQn){
    PFIC->IENR[((UINT32)(IRQn) >> 5)] = (1 << ((UINT32)(IRQn) & 0x1F));
   13abc:	e000e7b7          	lui	a5,0xe000e
   13ac0:	04000737          	lui	a4,0x4000
   13ac4:	10e7a023          	sw	a4,256(a5) # e000e100 <_eusrstack+0xc0006100>
   13ac8:	8082                	ret
uart_enable_re_int():
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:515
            break;
        case 1:
//            R8_UART1_FCR = (R8_UART1_FCR&~RB_FCR_FIFO_TRIG)|(3<<6);

//            R8_UART1_IER |= (RB_IER_RECV_RDY|RB_IER_LINE_STAT);
            R8_UART1_IER |= RB_IER_RECV_RDY;
   13aca:	400037b7          	lui	a5,0x40003
   13ace:	4017c703          	lbu	a4,1025(a5) # 40003401 <_eusrstack+0x1fffb401>
   13ad2:	00176713          	ori	a4,a4,1
   13ad6:	40e780a3          	sb	a4,1025(a5)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:516
            R8_UART1_MCR |= RB_MCR_INT_OE;
   13ada:	4007c703          	lbu	a4,1024(a5)
   13ade:	00876713          	ori	a4,a4,8
   13ae2:	40e78023          	sb	a4,1024(a5)
PFIC_EnableIRQ():
c:\Users\16233\Desktop\CH04-1\浮点数-CH573\02_CPU/core_riscv.h:87
   13ae6:	e000e7b7          	lui	a5,0xe000e
   13aea:	08000737          	lui	a4,0x8000
   13aee:	10e7a023          	sw	a4,256(a5) # e000e100 <_eusrstack+0xc0006100>
   13af2:	8082                	ret
uart_enable_re_int():
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:521
            PFIC_EnableIRQ( UART1_IRQn );
            break;
        case 2:
//            R8_UART2_IER |= (RB_IER_RECV_RDY|RB_IER_LINE_STAT);
            R8_UART2_IER |= RB_IER_RECV_RDY;
   13af4:	400047b7          	lui	a5,0x40004
   13af8:	8017c703          	lbu	a4,-2047(a5) # 40003801 <_eusrstack+0x1fffb801>
   13afc:	00176713          	ori	a4,a4,1
   13b00:	80e780a3          	sb	a4,-2047(a5)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:522
            R8_UART2_MCR |= RB_MCR_INT_OE;
   13b04:	8007c703          	lbu	a4,-2048(a5)
   13b08:	00876713          	ori	a4,a4,8
   13b0c:	80e78023          	sb	a4,-2048(a5)
PFIC_EnableIRQ():
c:\Users\16233\Desktop\CH04-1\浮点数-CH573\02_CPU/core_riscv.h:87
   13b10:	e000e7b7          	lui	a5,0xe000e
   13b14:	4709                	li	a4,2
   13b16:	10e7a223          	sw	a4,260(a5) # e000e104 <_eusrstack+0xc0006104>
   13b1a:	8082                	ret
uart_enable_re_int():
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:527
            PFIC_EnableIRQ( UART2_IRQn );
            break;
        case 3:
//            R8_UART3_IER |= (RB_IER_RECV_RDY|RB_IER_LINE_STAT);
            R8_UART3_IER |= RB_IER_RECV_RDY;
   13b1c:	400047b7          	lui	a5,0x40004
   13b20:	c017c703          	lbu	a4,-1023(a5) # 40003c01 <_eusrstack+0x1fffbc01>
   13b24:	00176713          	ori	a4,a4,1
   13b28:	c0e780a3          	sb	a4,-1023(a5)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:528
            R8_UART3_MCR |= RB_MCR_INT_OE;
   13b2c:	c007c703          	lbu	a4,-1024(a5)
   13b30:	00876713          	ori	a4,a4,8
   13b34:	c0e78023          	sb	a4,-1024(a5)
PFIC_EnableIRQ():
c:\Users\16233\Desktop\CH04-1\浮点数-CH573\02_CPU/core_riscv.h:87
   13b38:	e000e7b7          	lui	a5,0xe000e
   13b3c:	4711                	li	a4,4
   13b3e:	10e7a223          	sw	a4,260(a5) # e000e104 <_eusrstack+0xc0006104>
uart_enable_re_int():
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:536

        default:
            break;
    }

}
   13b42:	8082                	ret

00013b44 <uart_get_re_int>:
uart_get_re_int():
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:589
uint8_t uart_get_re_int(uint8_t uartNo)
{
    uint8_t event;
    uint8_t flag;
    //判断传入串口号参数是否有误，有误直接退出
    if(!uart_is_uartNo(uartNo))
   13b44:	478d                	li	a5,3
   13b46:	10a7e763          	bltu	a5,a0,13c54 <uart_get_re_int+0x110>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:594
    {
        return 0;
    }
    //获取当前接收中断标志，
    switch (uartNo)
   13b4a:	4785                	li	a5,1
   13b4c:	06f50c63          	beq	a0,a5,13bc4 <uart_get_re_int+0x80>
   13b50:	01851793          	slli	a5,a0,0x18
   13b54:	87e1                	srai	a5,a5,0x18
   13b56:	cb8d                	beqz	a5,13b88 <uart_get_re_int+0x44>
   13b58:	4789                	li	a5,2
   13b5a:	0af50363          	beq	a0,a5,13c00 <uart_get_re_int+0xbc>
   13b5e:	478d                	li	a5,3
   13b60:	0ef51b63          	bne	a0,a5,13c56 <uart_get_re_int+0x112>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:676
           default:
               break;
          }
            break;
       case 3:
          event = R8_UART3_IIR&RB_IIR_INT_MASK;
   13b64:	400047b7          	lui	a5,0x40004
   13b68:	c047c783          	lbu	a5,-1020(a5) # 40003c04 <_eusrstack+0x1fffbc04>
   13b6c:	8bbd                	andi	a5,a5,15
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:677
          switch (event)
   13b6e:	46b1                	li	a3,12
   13b70:	0ef6e363          	bltu	a3,a5,13c56 <uart_get_re_int+0x112>
   13b74:	00279613          	slli	a2,a5,0x2
   13b78:	00002597          	auipc	a1,0x2
   13b7c:	6ac58593          	addi	a1,a1,1708 # 16224 <strlen+0x2b2>
   13b80:	962e                	add	a2,a2,a1
   13b82:	4214                	lw	a3,0(a2)
   13b84:	96ae                	add	a3,a3,a1
   13b86:	8682                	jr	a3
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:597
            event = R8_UART0_IIR&RB_IIR_INT_MASK;
   13b88:	400037b7          	lui	a5,0x40003
   13b8c:	0047c783          	lbu	a5,4(a5) # 40003004 <_eusrstack+0x1fffb004>
   13b90:	8bbd                	andi	a5,a5,15
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:598
           switch (event)
   13b92:	46b1                	li	a3,12
   13b94:	0cf6e163          	bltu	a3,a5,13c56 <uart_get_re_int+0x112>
   13b98:	00279613          	slli	a2,a5,0x2
   13b9c:	00002597          	auipc	a1,0x2
   13ba0:	6bc58593          	addi	a1,a1,1724 # 16258 <strlen+0x2e6>
   13ba4:	962e                	add	a2,a2,a1
   13ba6:	4214                	lw	a3,0(a2)
   13ba8:	96ae                	add	a3,a3,a1
   13baa:	8682                	jr	a3
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:601
                flag = 6;
   13bac:	873e                	mv	a4,a5
   13bae:	a065                	j	13c56 <uart_get_re_int+0x112>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:604
                flag = 4;
   13bb0:	873e                	mv	a4,a5
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:605
                break;
   13bb2:	a055                	j	13c56 <uart_get_re_int+0x112>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:607
                flag = 12;
   13bb4:	873e                	mv	a4,a5
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:608
                break;
   13bb6:	a045                	j	13c56 <uart_get_re_int+0x112>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:610
                flag = 2;
   13bb8:	873e                	mv	a4,a5
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:611
                break;
   13bba:	a871                	j	13c56 <uart_get_re_int+0x112>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:613
                flag = 0;
   13bbc:	873e                	mv	a4,a5
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:614
                break;
   13bbe:	a861                	j	13c56 <uart_get_re_int+0x112>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:616
                flag = 1;
   13bc0:	873e                	mv	a4,a5
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:617
                break;
   13bc2:	a851                	j	13c56 <uart_get_re_int+0x112>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:623
            event = R8_UART1_IIR&RB_IIR_INT_MASK;
   13bc4:	400037b7          	lui	a5,0x40003
   13bc8:	4047c783          	lbu	a5,1028(a5) # 40003404 <_eusrstack+0x1fffb404>
   13bcc:	8bbd                	andi	a5,a5,15
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:624
           switch (event)
   13bce:	46b1                	li	a3,12
   13bd0:	08f6e363          	bltu	a3,a5,13c56 <uart_get_re_int+0x112>
   13bd4:	00279613          	slli	a2,a5,0x2
   13bd8:	00002597          	auipc	a1,0x2
   13bdc:	6b458593          	addi	a1,a1,1716 # 1628c <strlen+0x31a>
   13be0:	962e                	add	a2,a2,a1
   13be2:	4214                	lw	a3,0(a2)
   13be4:	96ae                	add	a3,a3,a1
   13be6:	8682                	jr	a3
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:627
                flag = 6;
   13be8:	873e                	mv	a4,a5
   13bea:	a0b5                	j	13c56 <uart_get_re_int+0x112>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:630
                flag = 4;
   13bec:	873e                	mv	a4,a5
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:631
                break;
   13bee:	a0a5                	j	13c56 <uart_get_re_int+0x112>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:633
                flag = 12;
   13bf0:	873e                	mv	a4,a5
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:634
                break;
   13bf2:	a095                	j	13c56 <uart_get_re_int+0x112>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:636
                flag = 2;
   13bf4:	873e                	mv	a4,a5
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:637
                break;
   13bf6:	a085                	j	13c56 <uart_get_re_int+0x112>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:639
                flag = 0;
   13bf8:	873e                	mv	a4,a5
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:640
                break;
   13bfa:	a8b1                	j	13c56 <uart_get_re_int+0x112>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:642
                flag = 1;
   13bfc:	873e                	mv	a4,a5
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:643
                break;
   13bfe:	a8a1                	j	13c56 <uart_get_re_int+0x112>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:650
           event = R8_UART2_IIR&RB_IIR_INT_MASK;
   13c00:	400047b7          	lui	a5,0x40004
   13c04:	8047c783          	lbu	a5,-2044(a5) # 40003804 <_eusrstack+0x1fffb804>
   13c08:	8bbd                	andi	a5,a5,15
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:651
           switch (event)
   13c0a:	46b1                	li	a3,12
   13c0c:	04f6e563          	bltu	a3,a5,13c56 <uart_get_re_int+0x112>
   13c10:	00279613          	slli	a2,a5,0x2
   13c14:	00002597          	auipc	a1,0x2
   13c18:	6ac58593          	addi	a1,a1,1708 # 162c0 <strlen+0x34e>
   13c1c:	962e                	add	a2,a2,a1
   13c1e:	4214                	lw	a3,0(a2)
   13c20:	96ae                	add	a3,a3,a1
   13c22:	8682                	jr	a3
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:654
                flag = 6;
   13c24:	873e                	mv	a4,a5
   13c26:	a805                	j	13c56 <uart_get_re_int+0x112>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:657
                flag = 4;
   13c28:	873e                	mv	a4,a5
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:658
                break;
   13c2a:	a035                	j	13c56 <uart_get_re_int+0x112>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:660
                flag = 12;
   13c2c:	873e                	mv	a4,a5
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:661
                break;
   13c2e:	a025                	j	13c56 <uart_get_re_int+0x112>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:663
                flag = 2;
   13c30:	873e                	mv	a4,a5
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:664
                break;
   13c32:	a015                	j	13c56 <uart_get_re_int+0x112>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:666
                flag = 0;
   13c34:	873e                	mv	a4,a5
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:667
                break;
   13c36:	a005                	j	13c56 <uart_get_re_int+0x112>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:669
                flag = 1;
   13c38:	873e                	mv	a4,a5
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:670
                break;
   13c3a:	a831                	j	13c56 <uart_get_re_int+0x112>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:680
          {
           case UART_II_LINE_STAT:
               flag = 6;
   13c3c:	873e                	mv	a4,a5
   13c3e:	a821                	j	13c56 <uart_get_re_int+0x112>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:683
               break;
           case UART_II_RECV_RDY:
               flag = 4;
   13c40:	873e                	mv	a4,a5
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:684
               break;
   13c42:	a811                	j	13c56 <uart_get_re_int+0x112>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:686
           case UART_II_RECV_TOUT:
               flag = 12;
   13c44:	873e                	mv	a4,a5
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:687
               break;
   13c46:	a801                	j	13c56 <uart_get_re_int+0x112>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:689
           case UART_II_THR_EMPTY:
               flag = 2;
   13c48:	873e                	mv	a4,a5
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:690
               break;
   13c4a:	a031                	j	13c56 <uart_get_re_int+0x112>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:692
           case UART_II_MODEM_CHG:
               flag = 0;
   13c4c:	873e                	mv	a4,a5
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:693
               break;
   13c4e:	a021                	j	13c56 <uart_get_re_int+0x112>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:695
           case UART_II_NO_INTER:
               flag = 1;
   13c50:	873e                	mv	a4,a5
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:696
               break;
   13c52:	a011                	j	13c56 <uart_get_re_int+0x112>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:591
        return 0;
   13c54:	4701                	li	a4,0
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/uart.c:705
           break;
    default:
        break;
    }
    return flag;
}
   13c56:	853a                	mv	a0,a4
   13c58:	8082                	ret

00013c5a <UART0_IRQHandler>:
UART0_IRQHandler():
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/isr.c:19
// 触发条件：UART_User串口收到一个字节触发
// 备   注：进入本程序后，可使用uart_get_re_int函数可再进行中断标志判断
//          （1-有UART接收中断，0-没有UART接收中断）
//======================================================================
void UART_User_Handler(void)
{
   13c5a:	1101                	addi	sp,sp,-32
   13c5c:	ce22                	sw	s0,28(sp)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/isr.c:21
    //【1】关中断
    DISABLE_INTERRUPTS;
   13c5e:	42a1                	li	t0,8
   13c60:	3002b073          	csrc	mstatus,t0
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/isr.c:27

    //【2】声明临时变量
    uint8_t flag,ch;

    //【3】判断是否为本中断触发
    if (!uart_get_re_int(UART_User)) goto UART_User_Handler_exit;
   13c64:	4501                	li	a0,0
   13c66:	00000097          	auipc	ra,0x0
   13c6a:	ede080e7          	jalr	-290(ra) # 13b44 <uart_get_re_int>
   13c6e:	e901                	bnez	a0,13c7e <UART0_IRQHandler+0x24>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/isr.c:46
		__asm("csrc mstatus, t0");
	}
	
    // 【6】开中断
UART_User_Handler_exit:
    ENABLE_INTERRUPTS;
   13c70:	42a1                	li	t0,8
   13c72:	3002a073          	csrs	mstatus,t0
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/isr.c:47
}
   13c76:	4472                	lw	s0,28(sp)
   13c78:	6105                	addi	sp,sp,32
   13c7a:	30200073          	mret
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/isr.c:30
    ch=uart_re1(UART_User,&flag);   //调用接收一个字节的函数，清接收中断位
   13c7e:	00f10593          	addi	a1,sp,15
   13c82:	4501                	li	a0,0
   13c84:	00000097          	auipc	ra,0x0
   13c88:	d7c080e7          	jalr	-644(ra) # 13a00 <uart_re1>
   13c8c:	842a                	mv	s0,a0
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/isr.c:33
    if (flag)                       //有数据
   13c8e:	00f14783          	lbu	a5,15(sp)
   13c92:	eb89                	bnez	a5,13ca4 <UART0_IRQHandler+0x4a>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/isr.c:38
	if(ch == 'A')
   13c94:	04100793          	li	a5,65
   13c98:	fcf41ce3          	bne	s0,a5,13c70 <UART0_IRQHandler+0x16>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/isr.c:40
		__asm("li t0, 0x8");
   13c9c:	42a1                	li	t0,8
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/isr.c:41
		__asm("csrc mstatus, t0");
   13c9e:	3002b073          	csrc	mstatus,t0
   13ca2:	b7f9                	j	13c70 <UART0_IRQHandler+0x16>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/isr.c:35
        uart_send1(UART_User,ch);   //回发接收到的字节
   13ca4:	85aa                	mv	a1,a0
   13ca6:	4501                	li	a0,0
   13ca8:	00000097          	auipc	ra,0x0
   13cac:	c4a080e7          	jalr	-950(ra) # 138f2 <uart_send1>
   13cb0:	b7d5                	j	13c94 <UART0_IRQHandler+0x3a>

00013cb2 <printk_putc>:
printk_putc():
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:28
//功能概要：通过串口打出一个字符
//参数说明：data:数据：通过串口发送的一字节数据
//函数返回：无
//======================================================================
static void printk_putc(int c, int *count, PRINTK_INFO *info)
{
   13cb2:	1141                	addi	sp,sp,-16
   13cb4:	c606                	sw	ra,12(sp)
   13cb6:	c422                	sw	s0,8(sp)
   13cb8:	842e                	mv	s0,a1
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:29
	switch (info->dest) {
   13cba:	421c                	lw	a5,0(a2)
   13cbc:	4705                	li	a4,1
   13cbe:	00e78c63          	beq	a5,a4,13cd6 <printk_putc+0x24>
   13cc2:	4709                	li	a4,2
   13cc4:	00e78e63          	beq	a5,a4,13ce0 <printk_putc+0x2e>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:40
		++(info->loc);
		break;
	default:
		break;
	}
	*count += 1;
   13cc8:	401c                	lw	a5,0(s0)
   13cca:	0785                	addi	a5,a5,1
   13ccc:	c01c                	sw	a5,0(s0)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:41
}
   13cce:	40b2                	lw	ra,12(sp)
   13cd0:	4422                	lw	s0,8(sp)
   13cd2:	0141                	addi	sp,sp,16
   13cd4:	8082                	ret
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:31
		info->func((char) c);
   13cd6:	425c                	lw	a5,4(a2)
   13cd8:	0562                	slli	a0,a0,0x18
   13cda:	8561                	srai	a0,a0,0x18
   13cdc:	9782                	jalr	a5
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:32
		break;
   13cde:	b7ed                	j	13cc8 <printk_putc+0x16>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:34
		*(info->loc) = (unsigned char) c;
   13ce0:	461c                	lw	a5,8(a2)
   13ce2:	00a78023          	sb	a0,0(a5)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:35
		++(info->loc);
   13ce6:	461c                	lw	a5,8(a2)
   13ce8:	0785                	addi	a5,a5,1
   13cea:	c61c                	sw	a5,8(a2)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:36
		break;
   13cec:	bff1                	j	13cc8 <printk_putc+0x16>

00013cee <printk_mknumstr>:
printk_mknumstr():
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:131
	int nlen;
	char *nstrp;

	nlen = 0;
	nstrp = numstr;
	*nstrp++ = '\0';
   13cee:	00150793          	addi	a5,a0,1
   13cf2:	00050023          	sb	zero,0(a0)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:133

	if (neg) {
   13cf6:	ce1d                	beqz	a2,13d34 <printk_mknumstr+0x46>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:134
		a = *(int *) nump;
   13cf8:	4198                	lw	a4,0(a1)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:144
		}
		while (a != 0) {
			b = (int) a / (int) radix;
			c = (int) a - ((int) b * (int) radix);
			if (c < 0) {
				c = ~c + 1 + '0';
   13cfa:	03000813          	li	a6,48
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:135
		if (a == 0) {
   13cfe:	e315                	bnez	a4,13d22 <printk_mknumstr+0x34>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:136
			*nstrp = '0';
   13d00:	03000793          	li	a5,48
   13d04:	00f500a3          	sb	a5,1(a0)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:137
			++nlen;
   13d08:	4605                	li	a2,1
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:173
			*nstrp++ = (char) uc;
			++nlen;
		}
	}
	done: return nlen;
}
   13d0a:	8532                	mv	a0,a2
   13d0c:	8082                	ret
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:144
				c = ~c + 1 + '0';
   13d0e:	40e80633          	sub	a2,a6,a4
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:149
			*nstrp++ = (char) c;
   13d12:	0785                	addi	a5,a5,1
   13d14:	fec78fa3          	sb	a2,-1(a5)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:150
			++nlen;
   13d18:	fff78613          	addi	a2,a5,-1
   13d1c:	8e09                	sub	a2,a2,a0
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:148
			a = b;
   13d1e:	872e                	mv	a4,a1
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:140
		while (a != 0) {
   13d20:	d5ed                	beqz	a1,13d0a <printk_mknumstr+0x1c>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:141
			b = (int) a / (int) radix;
   13d22:	02d745b3          	div	a1,a4,a3
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:142
			c = (int) a - ((int) b * (int) radix);
   13d26:	02d76733          	rem	a4,a4,a3
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:146
				c = c + '0';
   13d2a:	03070613          	addi	a2,a4,48 # 8000030 <_data_lma+0x7fe9b20>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:143
			if (c < 0) {
   13d2e:	fe0752e3          	bgez	a4,13d12 <printk_mknumstr+0x24>
   13d32:	bff1                	j	13d0e <printk_mknumstr+0x20>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:153
		ua = *(unsigned int *) nump;
   13d34:	4198                	lw	a4,0(a1)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:160
			ub = (unsigned int) ua / (unsigned int) radix;
   13d36:	8336                	mv	t1,a3
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:162
			if (uc < 10) {
   13d38:	48a5                	li	a7,9
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:154
		if (ua == 0) {
   13d3a:	e305                	bnez	a4,13d5a <printk_mknumstr+0x6c>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:155
			*nstrp = '0';
   13d3c:	03000793          	li	a5,48
   13d40:	00f500a3          	sb	a5,1(a0)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:156
			++nlen;
   13d44:	4605                	li	a2,1
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:157
			goto done;
   13d46:	b7d1                	j	13d0a <printk_mknumstr+0x1c>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:168
			*nstrp++ = (char) uc;
   13d48:	0785                	addi	a5,a5,1
   13d4a:	feb78fa3          	sb	a1,-1(a5)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:169
			++nlen;
   13d4e:	fff78613          	addi	a2,a5,-1
   13d52:	8e09                	sub	a2,a2,a0
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:159
		while (ua != 0) {
   13d54:	fa676be3          	bltu	a4,t1,13d0a <printk_mknumstr+0x1c>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:167
			ua = ub;
   13d58:	8742                	mv	a4,a6
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:160
			ub = (unsigned int) ua / (unsigned int) radix;
   13d5a:	02d75833          	divu	a6,a4,a3
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:161
			uc = (unsigned int) ua - ((unsigned int) ub * (unsigned int) radix);
   13d5e:	02d77633          	remu	a2,a4,a3
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:165
				uc = uc - 10 + 'A';
   13d62:	03760593          	addi	a1,a2,55
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:162
			if (uc < 10) {
   13d66:	fec8e1e3          	bltu	a7,a2,13d48 <printk_mknumstr+0x5a>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:163
				uc = uc + '0';
   13d6a:	03060593          	addi	a1,a2,48
   13d6e:	bfe9                	j	13d48 <printk_mknumstr+0x5a>

00013d70 <printk_pad_space>:
printk_pad_space():
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:186
	}
}

/********************************************************************/
static void printk_pad_space(int curlen, int field_width, int *count,
		PRINTK_INFO *info) {
   13d70:	1101                	addi	sp,sp,-32
   13d72:	ce06                	sw	ra,28(sp)
   13d74:	cc22                	sw	s0,24(sp)
   13d76:	ca26                	sw	s1,20(sp)
   13d78:	c84a                	sw	s2,16(sp)
   13d7a:	c64e                	sw	s3,12(sp)
   13d7c:	842a                	mv	s0,a0
   13d7e:	84ae                	mv	s1,a1
   13d80:	89b2                	mv	s3,a2
   13d82:	8936                	mv	s2,a3
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:189
	int i;

	for (i = curlen; i < field_width; i++) {
   13d84:	00b55d63          	bge	a0,a1,13d9e <printk_pad_space+0x2e>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:190 (discriminator 3)
		printk_putc(' ', count, info);
   13d88:	864a                	mv	a2,s2
   13d8a:	85ce                	mv	a1,s3
   13d8c:	02000513          	li	a0,32
   13d90:	00000097          	auipc	ra,0x0
   13d94:	f22080e7          	jalr	-222(ra) # 13cb2 <printk_putc>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:189 (discriminator 3)
	for (i = curlen; i < field_width; i++) {
   13d98:	0405                	addi	s0,s0,1
   13d9a:	fe8497e3          	bne	s1,s0,13d88 <printk_pad_space+0x18>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:192
	}
}
   13d9e:	40f2                	lw	ra,28(sp)
   13da0:	4462                	lw	s0,24(sp)
   13da2:	44d2                	lw	s1,20(sp)
   13da4:	4942                	lw	s2,16(sp)
   13da6:	49b2                	lw	s3,12(sp)
   13da8:	6105                	addi	sp,sp,32
   13daa:	8082                	ret

00013dac <out_char>:
out_char():
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:18
void out_char(char data) {
   13dac:	1141                	addi	sp,sp,-16
   13dae:	c606                	sw	ra,12(sp)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:19
	uart_send1(UART_printf, data);
   13db0:	0ff57593          	andi	a1,a0,255
   13db4:	4505                	li	a0,1
   13db6:	00000097          	auipc	ra,0x0
   13dba:	b3c080e7          	jalr	-1220(ra) # 138f2 <uart_send1>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:20
}
   13dbe:	40b2                	lw	ra,12(sp)
   13dc0:	0141                	addi	sp,sp,16
   13dc2:	8082                	ret

00013dc4 <printk_mkfloatstr>:
printk_mkfloatstr():
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:50
{
   13dc4:	c8010113          	addi	sp,sp,-896
   13dc8:	36112e23          	sw	ra,892(sp)
   13dcc:	36812c23          	sw	s0,888(sp)
   13dd0:	36912a23          	sw	s1,884(sp)
   13dd4:	37212823          	sw	s2,880(sp)
   13dd8:	37312623          	sw	s3,876(sp)
   13ddc:	37412423          	sw	s4,872(sp)
   13de0:	37512223          	sw	s5,868(sp)
   13de4:	37612023          	sw	s6,864(sp)
   13de8:	35712e23          	sw	s7,860(sp)
   13dec:	35812c23          	sw	s8,856(sp)
   13df0:	35912a23          	sw	s9,852(sp)
   13df4:	35a12823          	sw	s10,848(sp)
   13df8:	35b12623          	sw	s11,844(sp)
   13dfc:	842a                	mv	s0,a0
   13dfe:	8b2e                	mv	s6,a1
   13e00:	8c32                	mv	s8,a2
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:52
	uint32_t i=0,j=0,k=0,a[100]={0},b[100]={0};
   13e02:	19000613          	li	a2,400
   13e06:	4581                	li	a1,0
   13e08:	1b08                	addi	a0,sp,432
   13e0a:	fffff097          	auipc	ra,0xfffff
   13e0e:	2b6080e7          	jalr	694(ra) # 130c0 <memset>
   13e12:	19000613          	li	a2,400
   13e16:	4581                	li	a1,0
   13e18:	1008                	addi	a0,sp,32
   13e1a:	fffff097          	auipc	ra,0xfffff
   13e1e:	2a6080e7          	jalr	678(ra) # 130c0 <memset>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:59
	p=(uint64_t)*f;//整数部分
   13e22:	4044                	lw	s1,4(s0)
   13e24:	4000                	lw	s0,0(s0)
   13e26:	8522                	mv	a0,s0
   13e28:	85a6                	mv	a1,s1
   13e2a:	00002097          	auipc	ra,0x2
   13e2e:	dee080e7          	jalr	-530(ra) # 15c18 <__fixunsdfdi>
   13e32:	8caa                	mv	s9,a0
   13e34:	8bae                	mv	s7,a1
   13e36:	8aaa                	mv	s5,a0
   13e38:	8a2e                	mv	s4,a1
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:60
	tempf=(*f-p);
   13e3a:	00002097          	auipc	ra,0x2
   13e3e:	e7c080e7          	jalr	-388(ra) # 15cb6 <__floatundidf>
   13e42:	862a                	mv	a2,a0
   13e44:	86ae                	mv	a3,a1
   13e46:	8522                	mv	a0,s0
   13e48:	85a6                	mv	a1,s1
   13e4a:	00001097          	auipc	ra,0x1
   13e4e:	688080e7          	jalr	1672(ra) # 154d2 <__subdf3>
   13e52:	842a                	mv	s0,a0
   13e54:	84ae                	mv	s1,a1
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:61
	while(precision_width--)    tempf*=10;
   13e56:	020c0663          	beqz	s8,13e82 <printk_mkfloatstr+0xbe>
   13e5a:	fffc0d13          	addi	s10,s8,-1
   13e5e:	00002797          	auipc	a5,0x2
   13e62:	56278793          	addi	a5,a5,1378 # 163c0 <strlen+0x44e>
   13e66:	0007a903          	lw	s2,0(a5)
   13e6a:	0047a983          	lw	s3,4(a5)
   13e6e:	5dfd                	li	s11,-1
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:61 (discriminator 2)
   13e70:	864a                	mv	a2,s2
   13e72:	86ce                	mv	a3,s3
   13e74:	00001097          	auipc	ra,0x1
   13e78:	196080e7          	jalr	406(ra) # 1500a <__muldf3>
   13e7c:	1d7d                	addi	s10,s10,-1
   13e7e:	ffbd19e3          	bne	s10,s11,13e70 <printk_mkfloatstr+0xac>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:62
    q=tempf;
   13e82:	00002097          	auipc	ra,0x2
   13e86:	d96080e7          	jalr	-618(ra) # 15c18 <__fixunsdfdi>
   13e8a:	ce2a                	sw	a0,28(sp)
   13e8c:	8dae                	mv	s11,a1
   13e8e:	8d2a                	mv	s10,a0
   13e90:	89ae                	mv	s3,a1
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:66
	while(tempf<0.1&&tempf!=0)    //【20201119】-2/3   原为while(m<1)
   13e92:	00002797          	auipc	a5,0x2
   13e96:	53678793          	addi	a5,a5,1334 # 163c8 <strlen+0x456>
   13e9a:	4390                	lw	a2,0(a5)
   13e9c:	43d4                	lw	a3,4(a5)
   13e9e:	8522                	mv	a0,s0
   13ea0:	85a6                	mv	a1,s1
   13ea2:	00001097          	auipc	ra,0x1
   13ea6:	0b2080e7          	jalr	178(ra) # 14f54 <__ledf2>
   13eaa:	0e055e63          	bgez	a0,13fa6 <printk_mkfloatstr+0x1e2>
   13eae:	4601                	li	a2,0
   13eb0:	4681                	li	a3,0
   13eb2:	8522                	mv	a0,s0
   13eb4:	85a6                	mv	a1,s1
   13eb6:	00001097          	auipc	ra,0x1
   13eba:	034080e7          	jalr	52(ra) # 14eea <__eqdf2>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:52
	uint32_t i=0,j=0,k=0,a[100]={0},b[100]={0};
   13ebe:	4901                	li	s2,0
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:66
	while(tempf<0.1&&tempf!=0)    //【20201119】-2/3   原为while(m<1)
   13ec0:	c56d                	beqz	a0,13faa <printk_mkfloatstr+0x1e6>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:68
		tempf=tempf*10;
   13ec2:	00002797          	auipc	a5,0x2
   13ec6:	4fe78793          	addi	a5,a5,1278 # 163c0 <strlen+0x44e>
   13eca:	0047a803          	lw	a6,4(a5)
   13ece:	439c                	lw	a5,0(a5)
   13ed0:	c83e                	sw	a5,16(sp)
   13ed2:	ca42                	sw	a6,20(sp)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:66
	while(tempf<0.1&&tempf!=0)    //【20201119】-2/3   原为while(m<1)
   13ed4:	00002797          	auipc	a5,0x2
   13ed8:	4f478793          	addi	a5,a5,1268 # 163c8 <strlen+0x456>
   13edc:	0047a803          	lw	a6,4(a5)
   13ee0:	439c                	lw	a5,0(a5)
   13ee2:	c43e                	sw	a5,8(sp)
   13ee4:	c642                	sw	a6,12(sp)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:68
		tempf=tempf*10;
   13ee6:	4642                	lw	a2,16(sp)
   13ee8:	46d2                	lw	a3,20(sp)
   13eea:	8522                	mv	a0,s0
   13eec:	85a6                	mv	a1,s1
   13eee:	00001097          	auipc	ra,0x1
   13ef2:	11c080e7          	jalr	284(ra) # 1500a <__muldf3>
   13ef6:	842a                	mv	s0,a0
   13ef8:	84ae                	mv	s1,a1
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:69
		k++;			
   13efa:	0905                	addi	s2,s2,1
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:66
	while(tempf<0.1&&tempf!=0)    //【20201119】-2/3   原为while(m<1)
   13efc:	4622                	lw	a2,8(sp)
   13efe:	46b2                	lw	a3,12(sp)
   13f00:	00001097          	auipc	ra,0x1
   13f04:	054080e7          	jalr	84(ra) # 14f54 <__ledf2>
   13f08:	00055b63          	bgez	a0,13f1e <printk_mkfloatstr+0x15a>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:66 (discriminator 1)
   13f0c:	4601                	li	a2,0
   13f0e:	4681                	li	a3,0
   13f10:	8522                	mv	a0,s0
   13f12:	85a6                	mv	a1,s1
   13f14:	00001097          	auipc	ra,0x1
   13f18:	fd6080e7          	jalr	-42(ra) # 14eea <__eqdf2>
   13f1c:	f569                	bnez	a0,13ee6 <printk_mkfloatstr+0x122>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:72
	if(p==0)//整数部分为0
   13f1e:	019bebb3          	or	s7,s7,s9
   13f22:	080b9663          	bnez	s7,13fae <printk_mkfloatstr+0x1ea>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:73
		c[i++]='0';
   13f26:	03000793          	li	a5,48
   13f2a:	00fb0023          	sb	a5,0(s6)
   13f2e:	4485                	li	s1,1
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:87
	c[i++]='.';   //小数点
   13f30:	00148413          	addi	s0,s1,1
   13f34:	009b07b3          	add	a5,s6,s1
   13f38:	02e00713          	li	a4,46
   13f3c:	00e78023          	sb	a4,0(a5)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:88
	if(q==0)     //小数部分为0
   13f40:	4772                	lw	a4,28(sp)
   13f42:	00ededb3          	or	s11,s11,a4
   13f46:	0c0d9a63          	bnez	s11,1401a <printk_mkfloatstr+0x256>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:89
		while(zeroNum--) c[i++]='0';     //【20201119】-3/3   原为 c[i++]='0';
   13f4a:	000c0d63          	beqz	s8,13f64 <printk_mkfloatstr+0x1a0>
   13f4e:	018b0733          	add	a4,s6,s8
   13f52:	94ba                	add	s1,s1,a4
   13f54:	03000713          	li	a4,48
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:89 (discriminator 2)
   13f58:	00e780a3          	sb	a4,1(a5)
   13f5c:	0785                	addi	a5,a5,1
   13f5e:	fef49de3          	bne	s1,a5,13f58 <printk_mkfloatstr+0x194>
   13f62:	9462                	add	s0,s0,s8
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:109
	c[i]='\0';
   13f64:	9b22                	add	s6,s6,s0
   13f66:	000b0023          	sb	zero,0(s6)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:111
}
   13f6a:	8522                	mv	a0,s0
   13f6c:	37c12083          	lw	ra,892(sp)
   13f70:	37812403          	lw	s0,888(sp)
   13f74:	37412483          	lw	s1,884(sp)
   13f78:	37012903          	lw	s2,880(sp)
   13f7c:	36c12983          	lw	s3,876(sp)
   13f80:	36812a03          	lw	s4,872(sp)
   13f84:	36412a83          	lw	s5,868(sp)
   13f88:	36012b03          	lw	s6,864(sp)
   13f8c:	35c12b83          	lw	s7,860(sp)
   13f90:	35812c03          	lw	s8,856(sp)
   13f94:	35412c83          	lw	s9,852(sp)
   13f98:	35012d03          	lw	s10,848(sp)
   13f9c:	34c12d83          	lw	s11,844(sp)
   13fa0:	38010113          	addi	sp,sp,896
   13fa4:	8082                	ret
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:52
	uint32_t i=0,j=0,k=0,a[100]={0},b[100]={0};
   13fa6:	4901                	li	s2,0
   13fa8:	bf9d                	j	13f1e <printk_mkfloatstr+0x15a>
   13faa:	4901                	li	s2,0
   13fac:	bf8d                	j	13f1e <printk_mkfloatstr+0x15a>
   13fae:	1b010c93          	addi	s9,sp,432
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:72
	if(p==0)//整数部分为0
   13fb2:	8466                	mv	s0,s9
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:52
	uint32_t i=0,j=0,k=0,a[100]={0},b[100]={0};
   13fb4:	4b81                	li	s7,0
   13fb6:	a021                	j	13fbe <printk_mkfloatstr+0x1fa>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:79
			p/=10;
   13fb8:	8aaa                	mv	s5,a0
   13fba:	8a2e                	mv	s4,a1
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:78
			a[j++]=p%10;
   13fbc:	8ba6                	mv	s7,s1
   13fbe:	001b8493          	addi	s1,s7,1
   13fc2:	4629                	li	a2,10
   13fc4:	4681                	li	a3,0
   13fc6:	8556                	mv	a0,s5
   13fc8:	85d2                	mv	a1,s4
   13fca:	00001097          	auipc	ra,0x1
   13fce:	b92080e7          	jalr	-1134(ra) # 14b5c <__umoddi3>
   13fd2:	c008                	sw	a0,0(s0)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:79
			p/=10;
   13fd4:	4629                	li	a2,10
   13fd6:	4681                	li	a3,0
   13fd8:	8556                	mv	a0,s5
   13fda:	85d2                	mv	a1,s4
   13fdc:	00000097          	auipc	ra,0x0
   13fe0:	7e8080e7          	jalr	2024(ra) # 147c4 <__udivdi3>
   13fe4:	0411                	addi	s0,s0,4
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:76
		while(p!=0)//倒序的数字
   13fe6:	fc0a19e3          	bnez	s4,13fb8 <printk_mkfloatstr+0x1f4>
   13fea:	000a1563          	bnez	s4,13ff4 <printk_mkfloatstr+0x230>
   13fee:	47a5                	li	a5,9
   13ff0:	fd57e4e3          	bltu	a5,s5,13fb8 <printk_mkfloatstr+0x1f4>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:81
		while(j>0)//将倒序数字转为正序，并转换为对应的字符形式
   13ff4:	dc95                	beqz	s1,13f30 <printk_mkfloatstr+0x16c>
   13ff6:	0b8a                	slli	s7,s7,0x2
   13ff8:	1b1c                	addi	a5,sp,432
   13ffa:	9bbe                	add	s7,s7,a5
   13ffc:	875a                	mv	a4,s6
   13ffe:	a011                	j	14002 <printk_mkfloatstr+0x23e>
   14000:	8bbe                	mv	s7,a5
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:83
			c[i++]=a[j-1]+'0';
   14002:	000ba783          	lw	a5,0(s7)
   14006:	03078793          	addi	a5,a5,48
   1400a:	00f70023          	sb	a5,0(a4)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:84
			j--;
   1400e:	ffcb8793          	addi	a5,s7,-4
   14012:	0705                	addi	a4,a4,1
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:81
		while(j>0)//将倒序数字转为正序，并转换为对应的字符形式
   14014:	ff9b96e3          	bne	s7,s9,14000 <printk_mkfloatstr+0x23c>
   14018:	bf21                	j	13f30 <printk_mkfloatstr+0x16c>
   1401a:	02010a13          	addi	s4,sp,32
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:88
	if(q==0)     //小数部分为0
   1401e:	8ad2                	mv	s5,s4
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:92
		j=0;
   14020:	4481                	li	s1,0
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:93
		while(q!=0)//倒序的数字
   14022:	4ba5                	li	s7,9
   14024:	a019                	j	1402a <printk_mkfloatstr+0x266>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:96
			q/=10;
   14026:	8d2a                	mv	s10,a0
   14028:	89ae                	mv	s3,a1
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:95
			b[j++]=q%10;
   1402a:	0485                	addi	s1,s1,1
   1402c:	4629                	li	a2,10
   1402e:	4681                	li	a3,0
   14030:	856a                	mv	a0,s10
   14032:	85ce                	mv	a1,s3
   14034:	00001097          	auipc	ra,0x1
   14038:	b28080e7          	jalr	-1240(ra) # 14b5c <__umoddi3>
   1403c:	00aaa023          	sw	a0,0(s5)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:96
			q/=10;
   14040:	4629                	li	a2,10
   14042:	4681                	li	a3,0
   14044:	856a                	mv	a0,s10
   14046:	85ce                	mv	a1,s3
   14048:	00000097          	auipc	ra,0x0
   1404c:	77c080e7          	jalr	1916(ra) # 147c4 <__udivdi3>
   14050:	0a91                	addi	s5,s5,4
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:93
		while(q!=0)//倒序的数字
   14052:	fc099ae3          	bnez	s3,14026 <printk_mkfloatstr+0x262>
   14056:	00099463          	bnez	s3,1405e <printk_mkfloatstr+0x29a>
   1405a:	fdabe6e3          	bltu	s7,s10,14026 <printk_mkfloatstr+0x262>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:98
		while(k!=0)
   1405e:	00090f63          	beqz	s2,1407c <printk_mkfloatstr+0x2b8>
   14062:	00249793          	slli	a5,s1,0x2
   14066:	1018                	addi	a4,sp,32
   14068:	97ba                	add	a5,a5,a4
   1406a:	94ca                	add	s1,s1,s2
   1406c:	00249713          	slli	a4,s1,0x2
   14070:	9752                	add	a4,a4,s4
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:100
			b[j++]=0;
   14072:	0007a023          	sw	zero,0(a5)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:101
			k--;
   14076:	0791                	addi	a5,a5,4
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:98
		while(k!=0)
   14078:	fee79de3          	bne	a5,a4,14072 <printk_mkfloatstr+0x2ae>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:103
		while(j>0)//将倒序数字转为正序，并转换为对应的字符形式
   1407c:	ee0484e3          	beqz	s1,13f64 <printk_mkfloatstr+0x1a0>
   14080:	00249793          	slli	a5,s1,0x2
   14084:	0698                	addi	a4,sp,832
   14086:	97ba                	add	a5,a5,a4
   14088:	cdc78793          	addi	a5,a5,-804
   1408c:	008b06b3          	add	a3,s6,s0
   14090:	a011                	j	14094 <printk_mkfloatstr+0x2d0>
   14092:	87ba                	mv	a5,a4
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:105
			c[i++]=b[j-1]+'0';
   14094:	4398                	lw	a4,0(a5)
   14096:	03070713          	addi	a4,a4,48
   1409a:	00e68023          	sb	a4,0(a3)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:106
			j--;
   1409e:	ffc78713          	addi	a4,a5,-4
   140a2:	0685                	addi	a3,a3,1
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:103
		while(j>0)//将倒序数字转为正序，并转换为对应的字符形式
   140a4:	fefa17e3          	bne	s4,a5,14092 <printk_mkfloatstr+0x2ce>
   140a8:	9426                	add	s0,s0,s1
   140aa:	bd6d                	j	13f64 <printk_mkfloatstr+0x1a0>

000140ac <printk>:
printk():
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:202
//       fmt:输出格式信息
//       ap:va_list指针指向格式信息输出
//函数返回：无
//======================================================================
int printk(PRINTK_INFO *info, const char *fmt, char * ap)
{
   140ac:	7175                	addi	sp,sp,-144
   140ae:	c706                	sw	ra,140(sp)
   140b0:	c522                	sw	s0,136(sp)
   140b2:	c326                	sw	s1,132(sp)
   140b4:	c14a                	sw	s2,128(sp)
   140b6:	dece                	sw	s3,124(sp)
   140b8:	dcd2                	sw	s4,120(sp)
   140ba:	dad6                	sw	s5,116(sp)
   140bc:	d8da                	sw	s6,112(sp)
   140be:	d6de                	sw	s7,108(sp)
   140c0:	d4e2                	sw	s8,104(sp)
   140c2:	d2e6                	sw	s9,100(sp)
   140c4:	d0ea                	sw	s10,96(sp)
   140c6:	ceee                	sw	s11,92(sp)
   140c8:	8a2a                	mv	s4,a0
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:226

	}un1;*/
	char *p;
	int c;
	//char temp1;
	char vstr[33]={'0'};
   140ca:	d602                	sw	zero,44(sp)
   140cc:	d802                	sw	zero,48(sp)
   140ce:	da02                	sw	zero,52(sp)
   140d0:	dc02                	sw	zero,56(sp)
   140d2:	de02                	sw	zero,60(sp)
   140d4:	c082                	sw	zero,64(sp)
   140d6:	c282                	sw	zero,68(sp)
   140d8:	c482                	sw	zero,72(sp)
   140da:	04010623          	sb	zero,76(sp)
   140de:	03000793          	li	a5,48
   140e2:	02f10623          	sb	a5,44(sp)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:247
	int *ivalp;
	char *sval;
	int cval;
	unsigned int uval;

	count = 0;
   140e6:	d402                	sw	zero,40(sp)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:251
	length_modifier=0;
	precision_used=TRUE;
	//从格式字符串第一个字符开始格式化输出数据
	for (p = (char *) fmt; (c = *p) != 0; p++)
   140e8:	00058503          	lb	a0,0(a1)
   140ec:	68050163          	beqz	a0,1476e <printk+0x6c2>
   140f0:	8b2e                	mv	s6,a1
   140f2:	8bb2                	mv	s7,a2
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:249
	precision_used=TRUE;
   140f4:	4d05                	li	s10,1
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:248
	length_modifier=0;
   140f6:	4c81                	li	s9,0
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:279
		//此时字符为%  查看百分号后的第一个格式字符，对输出格式字符并做出相应输出判断
		//检查相应的修改标志
		flags_used = 0;
		done = FALSE;
		while (!done) {
			switch (/* c = */*++p) {
   140f8:	00002417          	auipc	s0,0x2
   140fc:	1fc40413          	addi	s0,s0,508 # 162f4 <strlen+0x382>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:387
			--p;
			break;
		}

		//p为格式字符串的首地址
		switch (c = *++p) {
   14100:	00002c17          	auipc	s8,0x2
   14104:	238c0c13          	addi	s8,s8,568 # 16338 <strlen+0x3c6>
   14108:	a035                	j	14134 <printk+0x88>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:263
				printk_putc(0x0D /* CR */, &count, info);
   1410a:	8652                	mv	a2,s4
   1410c:	102c                	addi	a1,sp,40
   1410e:	4535                	li	a0,13
   14110:	00000097          	auipc	ra,0x0
   14114:	ba2080e7          	jalr	-1118(ra) # 13cb2 <printk_putc>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:264
				printk_putc(0x0A /* LF */, &count, info);
   14118:	8652                	mv	a2,s4
   1411a:	102c                	addi	a1,sp,40
   1411c:	4529                	li	a0,10
   1411e:	00000097          	auipc	ra,0x0
   14122:	b94080e7          	jalr	-1132(ra) # 13cb2 <printk_putc>
   14126:	8ada                	mv	s5,s6
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:251 (discriminator 2)
	for (p = (char *) fmt; (c = *p) != 0; p++)
   14128:	001a8b13          	addi	s6,s5,1
   1412c:	001a8503          	lb	a0,1(s5)
   14130:	62050f63          	beqz	a0,1476e <printk+0x6c2>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:254
		if (c != '%')
   14134:	02500793          	li	a5,37
   14138:	00f50d63          	beq	a0,a5,14152 <printk+0xa6>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:258
			if (c != '\n') {
   1413c:	47a9                	li	a5,10
   1413e:	fcf506e3          	beq	a0,a5,1410a <printk+0x5e>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:259
				printk_putc(c, &count, info);
   14142:	8652                	mv	a2,s4
   14144:	102c                	addi	a1,sp,40
   14146:	00000097          	auipc	ra,0x0
   1414a:	b6c080e7          	jalr	-1172(ra) # 13cb2 <printk_putc>
   1414e:	8ada                	mv	s5,s6
   14150:	bfe1                	j	14128 <printk+0x7c>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:276
		flags_used = 0;
   14152:	4481                	li	s1,0
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:279
			switch (/* c = */*++p) {
   14154:	4641                	li	a2,16
   14156:	a021                	j	1415e <printk+0xb2>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:281
				flags_used |= FLAGS_MINUS;
   14158:	0014e493          	ori	s1,s1,1
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:282
				break;
   1415c:	8b36                	mv	s6,a3
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:279
			switch (/* c = */*++p) {
   1415e:	001b0693          	addi	a3,s6,1
   14162:	001b4783          	lbu	a5,1(s6)
   14166:	1781                	addi	a5,a5,-32
   14168:	0ff7f713          	andi	a4,a5,255
   1416c:	08e66c63          	bltu	a2,a4,14204 <printk+0x158>
   14170:	00271793          	slli	a5,a4,0x2
   14174:	97a2                	add	a5,a5,s0
   14176:	439c                	lw	a5,0(a5)
   14178:	97a2                	add	a5,a5,s0
   1417a:	8782                	jr	a5
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:284
				flags_used |= FLAGS_PLUS;
   1417c:	0024e493          	ori	s1,s1,2
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:285
				break;
   14180:	bff1                	j	1415c <printk+0xb0>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:287
				flags_used |= FLAGS_SPACE;
   14182:	0044e493          	ori	s1,s1,4
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:288
				break;
   14186:	bfd9                	j	1415c <printk+0xb0>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:290
				flags_used |= FLAGS_ZERO;
   14188:	0084e493          	ori	s1,s1,8
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:291
				break;
   1418c:	bfc1                	j	1415c <printk+0xb0>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:293
				flags_used |= FLAGS_POUND;
   1418e:	0104e493          	ori	s1,s1,16
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:294
				break;
   14192:	b7e9                	j	1415c <printk+0xb0>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:319
				field_width = (field_width * 10) + (c - '0');
   14194:	00291793          	slli	a5,s2,0x2
   14198:	993e                	add	s2,s2,a5
   1419a:	0906                	slli	s2,s2,0x1
   1419c:	993a                	add	s2,s2,a4
   1419e:	8b36                	mv	s6,a3
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:308
			switch (c = *++p) {
   141a0:	001b0693          	addi	a3,s6,1
   141a4:	001b0703          	lb	a4,1(s6)
   141a8:	fd070713          	addi	a4,a4,-48
   141ac:	fee674e3          	bgeu	a2,a4,14194 <printk+0xe8>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:329
		if (/* (c = *++p) */*++p == '.') {
   141b0:	001b0703          	lb	a4,1(s6)
   141b4:	02e00793          	li	a5,46
   141b8:	04f70963          	beq	a4,a5,1420a <printk+0x15e>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:366
			precision_width = 0;
   141bc:	4981                	li	s3,0
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:365
			precision_used = FALSE;
   141be:	4d01                	li	s10,0
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:370
		switch (/* c = */*++p) {
   141c0:	001b0693          	addi	a3,s6,1
   141c4:	001b0783          	lb	a5,1(s6)
   141c8:	06800713          	li	a4,104
   141cc:	06e78a63          	beq	a5,a4,14240 <printk+0x194>
   141d0:	06c00713          	li	a4,108
   141d4:	04e78e63          	beq	a5,a4,14230 <printk+0x184>
   141d8:	04c00713          	li	a4,76
   141dc:	04e78e63          	beq	a5,a4,14238 <printk+0x18c>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:387
		switch (c = *++p) {
   141e0:	001b0a93          	addi	s5,s6,1
   141e4:	001b0503          	lb	a0,1(s6)
   141e8:	fa850793          	addi	a5,a0,-88
   141ec:	0ff7f693          	andi	a3,a5,255
   141f0:	02000713          	li	a4,32
   141f4:	4cd76763          	bltu	a4,a3,146c2 <printk+0x616>
   141f8:	00269793          	slli	a5,a3,0x2
   141fc:	97e2                	add	a5,a5,s8
   141fe:	439c                	lw	a5,0(a5)
   14200:	97e2                	add	a5,a5,s8
   14202:	8782                	jr	a5
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:305
		field_width = 0;
   14204:	4901                	li	s2,0
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:308
			switch (c = *++p) {
   14206:	4625                	li	a2,9
   14208:	bf61                	j	141a0 <printk+0xf4>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:329
		if (/* (c = *++p) */*++p == '.') {
   1420a:	8b36                	mv	s6,a3
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:335
			precision_width = 0;
   1420c:	4981                	li	s3,0
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:338
				switch ( c = *++p) {
   1420e:	4625                	li	a2,9
   14210:	a039                	j	1421e <printk+0x172>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:350
				precision_width = (precision_width * 10) +	(c - '0');
   14212:	00299793          	slli	a5,s3,0x2
   14216:	99be                	add	s3,s3,a5
   14218:	0986                	slli	s3,s3,0x1
   1421a:	99ba                	add	s3,s3,a4
   1421c:	8b36                	mv	s6,a3
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:338
				switch ( c = *++p) {
   1421e:	001b0693          	addi	a3,s6,1
   14222:	001b0703          	lb	a4,1(s6)
   14226:	fd070713          	addi	a4,a4,-48
   1422a:	fee674e3          	bgeu	a2,a4,14212 <printk+0x166>
   1422e:	bf49                	j	141c0 <printk+0x114>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:375
			 length_modifier |= LENMOD_l;
   14230:	001cec93          	ori	s9,s9,1
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:370
		switch (/* c = */*++p) {
   14234:	8b36                	mv	s6,a3
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:376
			break;
   14236:	b76d                	j	141e0 <printk+0x134>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:378
			 length_modifier |= LENMOD_L;
   14238:	002cec93          	ori	s9,s9,2
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:370
		switch (/* c = */*++p) {
   1423c:	8b36                	mv	s6,a3
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:379
			break;
   1423e:	b74d                	j	141e0 <printk+0x134>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:370
		switch (/* c = */*++p) {
   14240:	8b36                	mv	s6,a3
   14242:	bf79                	j	141e0 <printk+0x134>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:391
		case 'd':
		case 'i':
			 //此时ap为指向可变参数列表的第一个参数
			ival = (int) va_arg1(ap, int);  //返回当前参数，并将ap指向下一个参数
   14244:	004b8793          	addi	a5,s7,4
   14248:	c63e                	sw	a5,12(sp)
   1424a:	000ba783          	lw	a5,0(s7)
   1424e:	d23e                	sw	a5,36(sp)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:392
			vlen = printk_mknumstr(vstr, &ival, TRUE, 10);//将整型转换成字符型保存在vstr中，返回字符数vlen
   14250:	46a9                	li	a3,10
   14252:	4605                	li	a2,1
   14254:	104c                	addi	a1,sp,36
   14256:	1068                	addi	a0,sp,44
   14258:	00000097          	auipc	ra,0x0
   1425c:	a96080e7          	jalr	-1386(ra) # 13cee <printk_mknumstr>
   14260:	8b2a                	mv	s6,a0
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:393
			vstrp = &vstr[vlen];  //指向转换后的最后一个字符
   14262:	107c                	addi	a5,sp,44
   14264:	00a789b3          	add	s3,a5,a0
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:396

			//若参数小于0，添加'-'号，并将字符长度加1
			if (ival < 0) {
   14268:	5792                	lw	a5,36(sp)
   1426a:	0007ca63          	bltz	a5,1427e <printk+0x1d2>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:402
				schar = '-';
				++vlen;
			}
			//若参数不小于0，添加‘+’号或者‘ ’或者为0，并将字符长度加1
			else {
				if (IS_FLAG_PLUS(flags_used)) {
   1426e:	0024f793          	andi	a5,s1,2
   14272:	cf8d                	beqz	a5,142ac <printk+0x200>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:404
					schar = '+';
					++vlen;
   14274:	00150b13          	addi	s6,a0,1
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:403
					schar = '+';
   14278:	02b00d93          	li	s11,43
   1427c:	a029                	j	14286 <printk+0x1da>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:398
				++vlen;
   1427e:	00150b13          	addi	s6,a0,1
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:397
				schar = '-';
   14282:	02d00d93          	li	s11,45
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:419
			dschar = FALSE;

			/*
			 * do the ZERO pad.
			 */
			if (IS_FLAG_ZERO(flags_used)) {
   14286:	0084f793          	andi	a5,s1,8
   1428a:	eb95                	bnez	a5,142be <printk+0x212>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:426
					printk_putc(schar, &count, info);  //输出符号
				dschar = TRUE;
				printk_pad_zero(vlen, field_width, &count, info);
				vlen = field_width;
			} else {
				if (!IS_FLAG_MINUS(flags_used)) {
   1428c:	0014f793          	andi	a5,s1,1
   14290:	4a078e63          	beqz	a5,1474c <printk+0x6a0>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:391
			ival = (int) va_arg1(ap, int);  //返回当前参数，并将ap指向下一个参数
   14294:	4bb2                	lw	s7,12(sp)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:437
				}
			}

			/* the string was built in reverse order, now display in */
			/* correct order */
			if (!dschar && schar) {
   14296:	280d8d63          	beqz	s11,14530 <printk+0x484>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:438
				printk_putc(schar, &count, info);
   1429a:	8652                	mv	a2,s4
   1429c:	102c                	addi	a1,sp,40
   1429e:	856e                	mv	a0,s11
   142a0:	00000097          	auipc	ra,0x0
   142a4:	a12080e7          	jalr	-1518(ra) # 13cb2 <printk_putc>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:391
			ival = (int) va_arg1(ap, int);  //返回当前参数，并将ap指向下一个参数
   142a8:	4bb2                	lw	s7,12(sp)
   142aa:	a459                	j	14530 <printk+0x484>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:406
					if (IS_FLAG_SPACE(flags_used)) {
   142ac:	0044f793          	andi	a5,s1,4
   142b0:	46078663          	beqz	a5,1471c <printk+0x670>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:408
						++vlen;
   142b4:	00150b13          	addi	s6,a0,1
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:407
						schar = ' ';
   142b8:	02000d93          	li	s11,32
   142bc:	b7e9                	j	14286 <printk+0x1da>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:421
					printk_putc(schar, &count, info);  //输出符号
   142be:	8652                	mv	a2,s4
   142c0:	102c                	addi	a1,sp,40
   142c2:	856e                	mv	a0,s11
   142c4:	00000097          	auipc	ra,0x0
   142c8:	9ee080e7          	jalr	-1554(ra) # 13cb2 <printk_putc>
printk_pad_zero():
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:179
	for (i = curlen; i < field_width; i++) {
   142cc:	332b5963          	bge	s6,s2,145fe <printk+0x552>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:180
		printk_putc('0', count, info);
   142d0:	8652                	mv	a2,s4
   142d2:	102c                	addi	a1,sp,40
   142d4:	03000513          	li	a0,48
   142d8:	00000097          	auipc	ra,0x0
   142dc:	9da080e7          	jalr	-1574(ra) # 13cb2 <printk_putc>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:179
	for (i = curlen; i < field_width; i++) {
   142e0:	0b05                	addi	s6,s6,1
   142e2:	ff2b17e3          	bne	s6,s2,142d0 <printk+0x224>
   142e6:	8b4a                	mv	s6,s2
printk():
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:391
			ival = (int) va_arg1(ap, int);  //返回当前参数，并将ap指向下一个参数
   142e8:	4bb2                	lw	s7,12(sp)
   142ea:	a4e9                	j	145b4 <printk+0x508>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:452
			//实际传入变参数 函数后 浮点数变为:0x6000000040091EB8 实际是将其转化为double型数据
			//但是顺序反了，我们要做的是将后四字节提前，然后把0x60移到紧接着前四个字节后的位置。
			
			//【20200816】  XSX，解决浮点数不优化问题
			ap=ap+4;
			fval= (double)va_arg1(ap,double);
   142ec:	00cb8b13          	addi	s6,s7,12
   142f0:	004bad83          	lw	s11,4(s7)
   142f4:	008bab83          	lw	s7,8(s7)
   142f8:	cc6e                	sw	s11,24(sp)
   142fa:	ce5e                	sw	s7,28(sp)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:456
			
			//【20200816】  XSX，解决负数的浮点数输出问题
			//若参数小于0，添加'-'号，并将字符长度加1
			if (fval < 0) {
   142fc:	4601                	li	a2,0
   142fe:	4681                	li	a3,0
   14300:	856e                	mv	a0,s11
   14302:	85de                	mv	a1,s7
   14304:	00001097          	auipc	ra,0x1
   14308:	c50080e7          	jalr	-944(ra) # 14f54 <__ledf2>
   1430c:	00054e63          	bltz	a0,14328 <printk+0x27c>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:463
				fval = -fval;				//负数取它的正数
				++vlen;
			}
			//若参数不小于0，添加‘+’号或者‘ ’或者为0，并将字符长度加1
			else {
				if (IS_FLAG_PLUS(flags_used)) {
   14310:	0024f793          	andi	a5,s1,2
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:464
					schar = '+';
   14314:	02b00b93          	li	s7,43
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:463
				if (IS_FLAG_PLUS(flags_used)) {
   14318:	e385                	bnez	a5,14338 <printk+0x28c>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:467
					++vlen;
				} else {
					if (IS_FLAG_SPACE(flags_used)) {
   1431a:	0044fb93          	andi	s7,s1,4
   1431e:	000b8d63          	beqz	s7,14338 <printk+0x28c>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:468
						schar = ' ';
   14322:	02000b93          	li	s7,32
   14326:	a809                	j	14338 <printk+0x28c>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:458
				fval = -fval;				//负数取它的正数
   14328:	cc6e                	sw	s11,24(sp)
   1432a:	800007b7          	lui	a5,0x80000
   1432e:	0177c7b3          	xor	a5,a5,s7
   14332:	ce3e                	sw	a5,28(sp)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:457
				schar = '-';
   14334:	02d00b93          	li	s7,45
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:478
				}
			}
			dschar = FALSE;
			
			//确定是否使用小数点精度数值
			if(precision_used)
   14338:	060d1c63          	bnez	s10,143b0 <printk+0x304>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:485
				vlen = printk_mkfloatstr(&fval,vstr,precision_width);//将整型转换成字符型保存在vstr中，返回字符数vlen
				vstrp = &vstr[0];  //指向转换后的第一个字符
			}
			else
			{
				if(length_modifier==0)   //浮点型精度到小数点后8位
   1433c:	080c9363          	bnez	s9,143c2 <printk+0x316>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:487
				{
					vlen = printk_mkfloatstr(&fval,vstr,6);//将整型转换成字符型保存在vstr中，返回字符数vlen
   14340:	4619                	li	a2,6
   14342:	106c                	addi	a1,sp,44
   14344:	0828                	addi	a0,sp,24
   14346:	00000097          	auipc	ra,0x0
   1434a:	a7e080e7          	jalr	-1410(ra) # 13dc4 <printk_mkfloatstr>
   1434e:	89aa                	mv	s3,a0
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:503
			

			/*
			 * do the ZERO pad.
			 */
			if (IS_FLAG_ZERO(flags_used)) {
   14350:	0084f793          	andi	a5,s1,8
   14354:	cbc1                	beqz	a5,143e4 <printk+0x338>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:504
				if (schar)
   14356:	060b9f63          	bnez	s7,143d4 <printk+0x328>
printk_pad_zero():
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:179
	for (i = curlen; i < field_width; i++) {
   1435a:	0129dd63          	bge	s3,s2,14374 <printk+0x2c8>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:180
		printk_putc('0', count, info);
   1435e:	8652                	mv	a2,s4
   14360:	102c                	addi	a1,sp,40
   14362:	03000513          	li	a0,48
   14366:	00000097          	auipc	ra,0x0
   1436a:	94c080e7          	jalr	-1716(ra) # 13cb2 <printk_putc>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:179
	for (i = curlen; i < field_width; i++) {
   1436e:	0985                	addi	s3,s3,1
   14370:	ff2997e3          	bne	s3,s2,1435e <printk+0x2b2>
printk():
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:524
			/* the string was built in reverse order, now display in */
			/* correct order */
			if (!dschar && schar) {
				printk_putc(schar, &count, info);
			}
			while (*vstrp)
   14374:	02c10503          	lb	a0,44(sp)
   14378:	89ca                	mv	s3,s2
   1437a:	cd09                	beqz	a0,14394 <printk+0x2e8>
   1437c:	02c10b93          	addi	s7,sp,44
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:525
				printk_putc(*vstrp++, &count, info);
   14380:	0b85                	addi	s7,s7,1
   14382:	8652                	mv	a2,s4
   14384:	102c                	addi	a1,sp,40
   14386:	00000097          	auipc	ra,0x0
   1438a:	92c080e7          	jalr	-1748(ra) # 13cb2 <printk_putc>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:524
			while (*vstrp)
   1438e:	000b8503          	lb	a0,0(s7)
   14392:	f57d                	bnez	a0,14380 <printk+0x2d4>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:526
			if (IS_FLAG_MINUS(flags_used)) {
   14394:	8885                	andi	s1,s1,1
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:452
			fval= (double)va_arg1(ap,double);
   14396:	8bda                	mv	s7,s6
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:526
			if (IS_FLAG_MINUS(flags_used)) {
   14398:	d80488e3          	beqz	s1,14128 <printk+0x7c>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:527
				printk_pad_space(vlen, field_width, &count, info);
   1439c:	86d2                	mv	a3,s4
   1439e:	1030                	addi	a2,sp,40
   143a0:	85ca                	mv	a1,s2
   143a2:	854e                	mv	a0,s3
   143a4:	00000097          	auipc	ra,0x0
   143a8:	9cc080e7          	jalr	-1588(ra) # 13d70 <printk_pad_space>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:452
			fval= (double)va_arg1(ap,double);
   143ac:	8bda                	mv	s7,s6
   143ae:	bbad                	j	14128 <printk+0x7c>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:480
				vlen = printk_mkfloatstr(&fval,vstr,precision_width);//将整型转换成字符型保存在vstr中，返回字符数vlen
   143b0:	864e                	mv	a2,s3
   143b2:	106c                	addi	a1,sp,44
   143b4:	0828                	addi	a0,sp,24
   143b6:	00000097          	auipc	ra,0x0
   143ba:	a0e080e7          	jalr	-1522(ra) # 13dc4 <printk_mkfloatstr>
   143be:	89aa                	mv	s3,a0
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:481
				vstrp = &vstr[0];  //指向转换后的第一个字符
   143c0:	bf41                	j	14350 <printk+0x2a4>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:492
					vlen = printk_mkfloatstr(&fval,vstr,6);//将整型转换成字符型保存在vstr中，返回字符数vlen
   143c2:	4619                	li	a2,6
   143c4:	106c                	addi	a1,sp,44
   143c6:	0828                	addi	a0,sp,24
   143c8:	00000097          	auipc	ra,0x0
   143cc:	9fc080e7          	jalr	-1540(ra) # 13dc4 <printk_mkfloatstr>
   143d0:	89aa                	mv	s3,a0
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:493
					vstrp = &vstr[0];  //指向转换后的第一个字符
   143d2:	bfbd                	j	14350 <printk+0x2a4>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:505
					printk_putc(schar, &count, info);  //输出符号
   143d4:	8652                	mv	a2,s4
   143d6:	102c                	addi	a1,sp,40
   143d8:	855e                	mv	a0,s7
   143da:	00000097          	auipc	ra,0x0
   143de:	8d8080e7          	jalr	-1832(ra) # 13cb2 <printk_putc>
   143e2:	bfa5                	j	1435a <printk+0x2ae>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:510
				if (!IS_FLAG_MINUS(flags_used)) {
   143e4:	0014f793          	andi	a5,s1,1
   143e8:	c799                	beqz	a5,143f6 <printk+0x34a>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:521
			if (!dschar && schar) {
   143ea:	020b9d63          	bnez	s7,14424 <printk+0x378>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:524
			while (*vstrp)
   143ee:	02c10503          	lb	a0,44(sp)
   143f2:	f549                	bnez	a0,1437c <printk+0x2d0>
   143f4:	b765                	j	1439c <printk+0x2f0>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:511
					printk_pad_space(vlen, field_width, &count, info);  //输出空格
   143f6:	86d2                	mv	a3,s4
   143f8:	1030                	addi	a2,sp,40
   143fa:	85ca                	mv	a1,s2
   143fc:	854e                	mv	a0,s3
   143fe:	00000097          	auipc	ra,0x0
   14402:	972080e7          	jalr	-1678(ra) # 13d70 <printk_pad_space>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:513
					if (schar)
   14406:	000b9763          	bnez	s7,14414 <printk+0x368>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:524
			while (*vstrp)
   1440a:	02c10503          	lb	a0,44(sp)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:452
			fval= (double)va_arg1(ap,double);
   1440e:	8bda                	mv	s7,s6
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:524
			while (*vstrp)
   14410:	f535                	bnez	a0,1437c <printk+0x2d0>
   14412:	bb19                	j	14128 <printk+0x7c>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:514
						printk_putc(schar, &count, info);
   14414:	8652                	mv	a2,s4
   14416:	102c                	addi	a1,sp,40
   14418:	855e                	mv	a0,s7
   1441a:	00000097          	auipc	ra,0x0
   1441e:	898080e7          	jalr	-1896(ra) # 13cb2 <printk_putc>
   14422:	b7e5                	j	1440a <printk+0x35e>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:522
				printk_putc(schar, &count, info);
   14424:	8652                	mv	a2,s4
   14426:	102c                	addi	a1,sp,40
   14428:	855e                	mv	a0,s7
   1442a:	00000097          	auipc	ra,0x0
   1442e:	888080e7          	jalr	-1912(ra) # 13cb2 <printk_putc>
   14432:	bf75                	j	143ee <printk+0x342>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:533
			}
            break;
        //以下是16进制整形输出
		case 'x':
		case 'X':
			uval = (unsigned int) va_arg1(ap, unsigned int);
   14434:	004b8d93          	addi	s11,s7,4
   14438:	000ba783          	lw	a5,0(s7)
   1443c:	ca3e                	sw	a5,20(sp)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:534
			vlen = printk_mknumstr(vstr, &uval, FALSE, 16);
   1443e:	46c1                	li	a3,16
   14440:	4601                	li	a2,0
   14442:	084c                	addi	a1,sp,20
   14444:	1068                	addi	a0,sp,44
   14446:	00000097          	auipc	ra,0x0
   1444a:	8a8080e7          	jalr	-1880(ra) # 13cee <printk_mknumstr>
   1444e:	8b2a                	mv	s6,a0
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:535
			vstrp = &vstr[vlen];
   14450:	107c                	addi	a5,sp,44
   14452:	00a789b3          	add	s3,a5,a0
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:538

			dschar = FALSE;
			if (IS_FLAG_ZERO(flags_used)) {
   14456:	0084f793          	andi	a5,s1,8
   1445a:	c3a5                	beqz	a5,144ba <printk+0x40e>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:539
				if (IS_FLAG_POUND(flags_used)) {
   1445c:	0104fb93          	andi	s7,s1,16
   14460:	020b9863          	bnez	s7,14490 <printk+0x3e4>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:537
			dschar = FALSE;
   14464:	c65e                	sw	s7,12(sp)
printk_pad_zero():
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:179
	for (i = curlen; i < field_width; i++) {
   14466:	29255b63          	bge	a0,s2,146fc <printk+0x650>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:180
		printk_putc('0', count, info);
   1446a:	8652                	mv	a2,s4
   1446c:	102c                	addi	a1,sp,40
   1446e:	03000513          	li	a0,48
   14472:	00000097          	auipc	ra,0x0
   14476:	840080e7          	jalr	-1984(ra) # 13cb2 <printk_putc>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:179
	for (i = curlen; i < field_width; i++) {
   1447a:	0b05                	addi	s6,s6,1
   1447c:	ff2b47e3          	blt	s6,s2,1446a <printk+0x3be>
printk():
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:561
						dschar = TRUE;
					}
				}
			}

			if ((IS_FLAG_POUND(flags_used)) && !dschar) {
   14480:	180b8563          	beqz	s7,1460a <printk+0x55e>
   14484:	8b4a                	mv	s6,s2
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:533 (discriminator 1)
			uval = (unsigned int) va_arg1(ap, unsigned int);
   14486:	8bee                	mv	s7,s11
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:561 (discriminator 1)
			if ((IS_FLAG_POUND(flags_used)) && !dschar) {
   14488:	47b2                	lw	a5,12(sp)
   1448a:	12079563          	bnez	a5,145b4 <printk+0x508>
   1448e:	a4a1                	j	146d6 <printk+0x62a>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:540
					printk_putc('0', &count, info);
   14490:	8652                	mv	a2,s4
   14492:	102c                	addi	a1,sp,40
   14494:	03000513          	li	a0,48
   14498:	00000097          	auipc	ra,0x0
   1449c:	81a080e7          	jalr	-2022(ra) # 13cb2 <printk_putc>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:541
					printk_putc('x', &count, info);
   144a0:	8652                	mv	a2,s4
   144a2:	102c                	addi	a1,sp,40
   144a4:	07800513          	li	a0,120
   144a8:	00000097          	auipc	ra,0x0
   144ac:	80a080e7          	jalr	-2038(ra) # 13cb2 <printk_putc>
printk_pad_zero():
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:179
	for (i = curlen; i < field_width; i++) {
   144b0:	152b5a63          	bge	s6,s2,14604 <printk+0x558>
printk():
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:543
					dschar = TRUE;
   144b4:	4785                	li	a5,1
   144b6:	c63e                	sw	a5,12(sp)
   144b8:	bf4d                	j	1446a <printk+0x3be>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:548
				if (!IS_FLAG_MINUS(flags_used)) {
   144ba:	0014f793          	andi	a5,s1,1
   144be:	20079963          	bnez	a5,146d0 <printk+0x624>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:549
					if (IS_FLAG_POUND(flags_used)) {
   144c2:	0104f793          	andi	a5,s1,16
   144c6:	22078e63          	beqz	a5,14702 <printk+0x656>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:550
						vlen += 2;
   144ca:	00250b13          	addi	s6,a0,2
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:552
					printk_pad_space(vlen, field_width, &count, info);
   144ce:	86d2                	mv	a3,s4
   144d0:	1030                	addi	a2,sp,40
   144d2:	85ca                	mv	a1,s2
   144d4:	855a                	mv	a0,s6
   144d6:	00000097          	auipc	ra,0x0
   144da:	89a080e7          	jalr	-1894(ra) # 13d70 <printk_pad_space>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:554
						printk_putc('0', &count, info);
   144de:	8652                	mv	a2,s4
   144e0:	102c                	addi	a1,sp,40
   144e2:	03000513          	li	a0,48
   144e6:	fffff097          	auipc	ra,0xfffff
   144ea:	7cc080e7          	jalr	1996(ra) # 13cb2 <printk_putc>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:555
						printk_putc('x', &count, info);
   144ee:	8652                	mv	a2,s4
   144f0:	102c                	addi	a1,sp,40
   144f2:	07800513          	li	a0,120
   144f6:	fffff097          	auipc	ra,0xfffff
   144fa:	7bc080e7          	jalr	1980(ra) # 13cb2 <printk_putc>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:561
			if ((IS_FLAG_POUND(flags_used)) && !dschar) {
   144fe:	ac09                	j	14710 <printk+0x664>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:569
				vlen += 2;
			}
			goto cont_xd;
		//无符号以八进制表示的整数输出
		case 'o':
			uval = (unsigned int) va_arg1(ap, unsigned int);
   14500:	004b8993          	addi	s3,s7,4
   14504:	000ba783          	lw	a5,0(s7)
   14508:	ca3e                	sw	a5,20(sp)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:570
			vlen = printk_mknumstr(vstr, &uval, FALSE, 8);
   1450a:	46a1                	li	a3,8
   1450c:	4601                	li	a2,0
   1450e:	084c                	addi	a1,sp,20
   14510:	1068                	addi	a0,sp,44
   14512:	fffff097          	auipc	ra,0xfffff
   14516:	7dc080e7          	jalr	2012(ra) # 13cee <printk_mknumstr>
   1451a:	8b2a                	mv	s6,a0
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:569
			uval = (unsigned int) va_arg1(ap, unsigned int);
   1451c:	8bce                	mv	s7,s3
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:586
			goto cont_u;
		case 'u':
			uval = (unsigned int) va_arg1(ap, unsigned int);
			vlen = printk_mknumstr(vstr, &uval, FALSE, 10);

			cont_u: vstrp = &vstr[vlen];
   1451e:	107c                	addi	a5,sp,44
   14520:	016789b3          	add	s3,a5,s6
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:588

			if (IS_FLAG_ZERO(flags_used)) {
   14524:	0084f793          	andi	a5,s1,8
   14528:	eba5                	bnez	a5,14598 <printk+0x4ec>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:592
				printk_pad_zero(vlen, field_width, &count, info);
				vlen = field_width;
			} else {
				if (!IS_FLAG_MINUS(flags_used)) {
   1452a:	0014f793          	andi	a5,s1,1
   1452e:	cfc5                	beqz	a5,145e6 <printk+0x53a>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:597
					printk_pad_space(vlen, field_width, &count, info);
				}
			}

			cont_xd: while (*vstrp)
   14530:	00098503          	lb	a0,0(s3)
   14534:	e159                	bnez	a0,145ba <printk+0x50e>
   14536:	a879                	j	145d4 <printk+0x528>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:574
			uval = (unsigned int) va_arg1(ap, unsigned int);
   14538:	004b8993          	addi	s3,s7,4
   1453c:	000ba783          	lw	a5,0(s7)
   14540:	ca3e                	sw	a5,20(sp)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:575
			vlen = printk_mknumstr(vstr, &uval, FALSE, 2);
   14542:	4689                	li	a3,2
   14544:	4601                	li	a2,0
   14546:	084c                	addi	a1,sp,20
   14548:	1068                	addi	a0,sp,44
   1454a:	fffff097          	auipc	ra,0xfffff
   1454e:	7a4080e7          	jalr	1956(ra) # 13cee <printk_mknumstr>
   14552:	8b2a                	mv	s6,a0
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:574
			uval = (unsigned int) va_arg1(ap, unsigned int);
   14554:	8bce                	mv	s7,s3
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:576
			goto cont_u;
   14556:	b7e1                	j	1451e <printk+0x472>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:579
			uval = (unsigned int) va_arg1(ap, void *);
   14558:	004b8993          	addi	s3,s7,4
   1455c:	000ba783          	lw	a5,0(s7)
   14560:	ca3e                	sw	a5,20(sp)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:580
			vlen = printk_mknumstr(vstr, &uval, FALSE, 16);
   14562:	46c1                	li	a3,16
   14564:	4601                	li	a2,0
   14566:	084c                	addi	a1,sp,20
   14568:	1068                	addi	a0,sp,44
   1456a:	fffff097          	auipc	ra,0xfffff
   1456e:	784080e7          	jalr	1924(ra) # 13cee <printk_mknumstr>
   14572:	8b2a                	mv	s6,a0
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:579
			uval = (unsigned int) va_arg1(ap, void *);
   14574:	8bce                	mv	s7,s3
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:581
			goto cont_u;
   14576:	b765                	j	1451e <printk+0x472>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:583
			uval = (unsigned int) va_arg1(ap, unsigned int);
   14578:	004b8993          	addi	s3,s7,4
   1457c:	000ba783          	lw	a5,0(s7)
   14580:	ca3e                	sw	a5,20(sp)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:584
			vlen = printk_mknumstr(vstr, &uval, FALSE, 10);
   14582:	46a9                	li	a3,10
   14584:	4601                	li	a2,0
   14586:	084c                	addi	a1,sp,20
   14588:	1068                	addi	a0,sp,44
   1458a:	fffff097          	auipc	ra,0xfffff
   1458e:	764080e7          	jalr	1892(ra) # 13cee <printk_mknumstr>
   14592:	8b2a                	mv	s6,a0
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:583
			uval = (unsigned int) va_arg1(ap, unsigned int);
   14594:	8bce                	mv	s7,s3
   14596:	b761                	j	1451e <printk+0x472>
printk_pad_zero():
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:179
	for (i = curlen; i < field_width; i++) {
   14598:	072b5c63          	bge	s6,s2,14610 <printk+0x564>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:180
		printk_putc('0', count, info);
   1459c:	8652                	mv	a2,s4
   1459e:	102c                	addi	a1,sp,40
   145a0:	03000513          	li	a0,48
   145a4:	fffff097          	auipc	ra,0xfffff
   145a8:	70e080e7          	jalr	1806(ra) # 13cb2 <printk_putc>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:179
	for (i = curlen; i < field_width; i++) {
   145ac:	0b05                	addi	s6,s6,1
   145ae:	ff2b17e3          	bne	s6,s2,1459c <printk+0x4f0>
   145b2:	8b4a                	mv	s6,s2
printk():
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:597 (discriminator 1)
			cont_xd: while (*vstrp)
   145b4:	00098503          	lb	a0,0(s3)
   145b8:	c919                	beqz	a0,145ce <printk+0x522>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:598
				printk_putc(*vstrp--, &count, info);
   145ba:	19fd                	addi	s3,s3,-1
   145bc:	8652                	mv	a2,s4
   145be:	102c                	addi	a1,sp,40
   145c0:	fffff097          	auipc	ra,0xfffff
   145c4:	6f2080e7          	jalr	1778(ra) # 13cb2 <printk_putc>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:597
			cont_xd: while (*vstrp)
   145c8:	00098503          	lb	a0,0(s3)
   145cc:	f57d                	bnez	a0,145ba <printk+0x50e>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:600

			if (IS_FLAG_MINUS(flags_used)) {
   145ce:	8885                	andi	s1,s1,1
   145d0:	b4048ce3          	beqz	s1,14128 <printk+0x7c>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:601
				printk_pad_space(vlen, field_width, &count, info);
   145d4:	86d2                	mv	a3,s4
   145d6:	1030                	addi	a2,sp,40
   145d8:	85ca                	mv	a1,s2
   145da:	855a                	mv	a0,s6
   145dc:	fffff097          	auipc	ra,0xfffff
   145e0:	794080e7          	jalr	1940(ra) # 13d70 <printk_pad_space>
   145e4:	b691                	j	14128 <printk+0x7c>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:593
					printk_pad_space(vlen, field_width, &count, info);
   145e6:	86d2                	mv	a3,s4
   145e8:	1030                	addi	a2,sp,40
   145ea:	85ca                	mv	a1,s2
   145ec:	855a                	mv	a0,s6
   145ee:	fffff097          	auipc	ra,0xfffff
   145f2:	782080e7          	jalr	1922(ra) # 13d70 <printk_pad_space>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:597
			cont_xd: while (*vstrp)
   145f6:	00098503          	lb	a0,0(s3)
   145fa:	f161                	bnez	a0,145ba <printk+0x50e>
   145fc:	b635                	j	14128 <printk+0x7c>
printk_pad_zero():
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:179
	for (i = curlen; i < field_width; i++) {
   145fe:	8b4a                	mv	s6,s2
printk():
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:391
			ival = (int) va_arg1(ap, int);  //返回当前参数，并将ap指向下一个参数
   14600:	4bb2                	lw	s7,12(sp)
   14602:	bf4d                	j	145b4 <printk+0x508>
printk_pad_zero():
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:179
	for (i = curlen; i < field_width; i++) {
   14604:	8b4a                	mv	s6,s2
printk():
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:533
			uval = (unsigned int) va_arg1(ap, unsigned int);
   14606:	8bee                	mv	s7,s11
   14608:	b775                	j	145b4 <printk+0x508>
   1460a:	8b4a                	mv	s6,s2
   1460c:	8bee                	mv	s7,s11
   1460e:	b75d                	j	145b4 <printk+0x508>
printk_pad_zero():
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:179
	for (i = curlen; i < field_width; i++) {
   14610:	8b4a                	mv	s6,s2
   14612:	b74d                	j	145b4 <printk+0x508>
printk():
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:607
			}

			break;
        //字符型输出
		case 'c':
			cval = (char) va_arg1(ap, unsigned int);
   14614:	004b8493          	addi	s1,s7,4
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:608
			printk_putc(cval, &count, info);
   14618:	8652                	mv	a2,s4
   1461a:	102c                	addi	a1,sp,40
   1461c:	000b8503          	lb	a0,0(s7)
   14620:	fffff097          	auipc	ra,0xfffff
   14624:	692080e7          	jalr	1682(ra) # 13cb2 <printk_putc>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:607
			cval = (char) va_arg1(ap, unsigned int);
   14628:	8ba6                	mv	s7,s1
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:609
			break;
   1462a:	bcfd                	j	14128 <printk+0x7c>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:611
		case 's':
			sval = (char *) va_arg1(ap, char *);
   1462c:	004b8d93          	addi	s11,s7,4
   14630:	000bab03          	lw	s6,0(s7)
   14634:	8bee                	mv	s7,s11
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:612
			if (sval) {
   14636:	ae0b09e3          	beqz	s6,14128 <printk+0x7c>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:613
				vlen = strlen(sval);
   1463a:	855a                	mv	a0,s6
   1463c:	00002097          	auipc	ra,0x2
   14640:	936080e7          	jalr	-1738(ra) # 15f72 <strlen>
   14644:	c62a                	sw	a0,12(sp)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:614
				if (!IS_FLAG_MINUS(flags_used)) {
   14646:	8885                	andi	s1,s1,1
   14648:	cc85                	beqz	s1,14680 <printk+0x5d4>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:617
					printk_pad_space(vlen, field_width, &count, info);
				}
				if(precision_width!=0)
   1464a:	04099363          	bnez	s3,14690 <printk+0x5e4>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:628
							printk_putc(*sval++, &count, info);					
					}
				}
				else    //precision_width=0情况
				{
					while (*sval)
   1464e:	000b0503          	lb	a0,0(s6)
   14652:	c919                	beqz	a0,14668 <printk+0x5bc>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:629
					   printk_putc(*sval++, &count, info);
   14654:	0b05                	addi	s6,s6,1
   14656:	8652                	mv	a2,s4
   14658:	102c                	addi	a1,sp,40
   1465a:	fffff097          	auipc	ra,0xfffff
   1465e:	658080e7          	jalr	1624(ra) # 13cb2 <printk_putc>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:628
					while (*sval)
   14662:	000b0503          	lb	a0,0(s6)
   14666:	f57d                	bnez	a0,14654 <printk+0x5a8>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:611
			sval = (char *) va_arg1(ap, char *);
   14668:	8bee                	mv	s7,s11
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:631
				}
				if (IS_FLAG_MINUS(flags_used)) {
   1466a:	aa048fe3          	beqz	s1,14128 <printk+0x7c>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:632
					printk_pad_space(vlen, field_width, &count, info);
   1466e:	86d2                	mv	a3,s4
   14670:	1030                	addi	a2,sp,40
   14672:	85ca                	mv	a1,s2
   14674:	4532                	lw	a0,12(sp)
   14676:	fffff097          	auipc	ra,0xfffff
   1467a:	6fa080e7          	jalr	1786(ra) # 13d70 <printk_pad_space>
   1467e:	b46d                	j	14128 <printk+0x7c>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:615
					printk_pad_space(vlen, field_width, &count, info);
   14680:	86d2                	mv	a3,s4
   14682:	1030                	addi	a2,sp,40
   14684:	85ca                	mv	a1,s2
   14686:	fffff097          	auipc	ra,0xfffff
   1468a:	6ea080e7          	jalr	1770(ra) # 13d70 <printk_pad_space>
   1468e:	bf75                	j	1464a <printk+0x59e>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:620
					while (precision_width>=1&&*sval)
   14690:	fd305ce3          	blez	s3,14668 <printk+0x5bc>
   14694:	000b0503          	lb	a0,0(s6)
   14698:	d961                	beqz	a0,14668 <printk+0x5bc>
   1469a:	99da                	add	s3,s3,s6
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:623
							printk_putc(*sval++, &count, info);					
   1469c:	0b05                	addi	s6,s6,1
   1469e:	8652                	mv	a2,s4
   146a0:	102c                	addi	a1,sp,40
   146a2:	fffff097          	auipc	ra,0xfffff
   146a6:	610080e7          	jalr	1552(ra) # 13cb2 <printk_putc>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:620
					while (precision_width>=1&&*sval)
   146aa:	fb3b0fe3          	beq	s6,s3,14668 <printk+0x5bc>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:620 (discriminator 1)
   146ae:	000b0503          	lb	a0,0(s6)
   146b2:	f56d                	bnez	a0,1469c <printk+0x5f0>
   146b4:	bf55                	j	14668 <printk+0x5bc>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:637
				}
			}
			break;
		case 'n':
			ivalp = (int *) va_arg1(ap, int *);
   146b6:	000ba783          	lw	a5,0(s7)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:638
			*ivalp = count;
   146ba:	5722                	lw	a4,40(sp)
   146bc:	c398                	sw	a4,0(a5)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:637
			ivalp = (int *) va_arg1(ap, int *);
   146be:	0b91                	addi	s7,s7,4
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:639
			break;
   146c0:	b4a5                	j	14128 <printk+0x7c>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:642

		default:
			printk_putc(c, &count, info);
   146c2:	8652                	mv	a2,s4
   146c4:	102c                	addi	a1,sp,40
   146c6:	fffff097          	auipc	ra,0xfffff
   146ca:	5ec080e7          	jalr	1516(ra) # 13cb2 <printk_putc>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:643
			break;
   146ce:	bca9                	j	14128 <printk+0x7c>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:561
			if ((IS_FLAG_POUND(flags_used)) && !dschar) {
   146d0:	0104f793          	andi	a5,s1,16
   146d4:	c7b5                	beqz	a5,14740 <printk+0x694>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:562
				printk_putc('0', &count, info);
   146d6:	8652                	mv	a2,s4
   146d8:	102c                	addi	a1,sp,40
   146da:	03000513          	li	a0,48
   146de:	fffff097          	auipc	ra,0xfffff
   146e2:	5d4080e7          	jalr	1492(ra) # 13cb2 <printk_putc>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:563
				printk_putc('x', &count, info);
   146e6:	8652                	mv	a2,s4
   146e8:	102c                	addi	a1,sp,40
   146ea:	07800513          	li	a0,120
   146ee:	fffff097          	auipc	ra,0xfffff
   146f2:	5c4080e7          	jalr	1476(ra) # 13cb2 <printk_putc>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:564
				vlen += 2;
   146f6:	0b09                	addi	s6,s6,2
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:533
			uval = (unsigned int) va_arg1(ap, unsigned int);
   146f8:	8bee                	mv	s7,s11
   146fa:	bd6d                	j	145b4 <printk+0x508>
printk_pad_zero():
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:179
	for (i = curlen; i < field_width; i++) {
   146fc:	8b4a                	mv	s6,s2
printk():
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:533
			uval = (unsigned int) va_arg1(ap, unsigned int);
   146fe:	8bee                	mv	s7,s11
   14700:	bd55                	j	145b4 <printk+0x508>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:552
					printk_pad_space(vlen, field_width, &count, info);
   14702:	86d2                	mv	a3,s4
   14704:	1030                	addi	a2,sp,40
   14706:	85ca                	mv	a1,s2
   14708:	fffff097          	auipc	ra,0xfffff
   1470c:	668080e7          	jalr	1640(ra) # 13d70 <printk_pad_space>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:597
			cont_xd: while (*vstrp)
   14710:	00098503          	lb	a0,0(s3)
   14714:	8bee                	mv	s7,s11
   14716:	ea0512e3          	bnez	a0,145ba <printk+0x50e>
   1471a:	b439                	j	14128 <printk+0x7c>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:419
			if (IS_FLAG_ZERO(flags_used)) {
   1471c:	0084fd93          	andi	s11,s1,8
   14720:	ba0d96e3          	bnez	s11,142cc <printk+0x220>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:426
				if (!IS_FLAG_MINUS(flags_used)) {
   14724:	0014f793          	andi	a5,s1,1
   14728:	b60796e3          	bnez	a5,14294 <printk+0x1e8>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:427
					printk_pad_space(vlen, field_width, &count, info);  //输出空格
   1472c:	86d2                	mv	a3,s4
   1472e:	1030                	addi	a2,sp,40
   14730:	85ca                	mv	a1,s2
   14732:	855a                	mv	a0,s6
   14734:	fffff097          	auipc	ra,0xfffff
   14738:	63c080e7          	jalr	1596(ra) # 13d70 <printk_pad_space>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:391
			ival = (int) va_arg1(ap, int);  //返回当前参数，并将ap指向下一个参数
   1473c:	4bb2                	lw	s7,12(sp)
   1473e:	bd65                	j	145f6 <printk+0x54a>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:597
			cont_xd: while (*vstrp)
   14740:	00098503          	lb	a0,0(s3)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:533
			uval = (unsigned int) va_arg1(ap, unsigned int);
   14744:	8bee                	mv	s7,s11
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:597
			cont_xd: while (*vstrp)
   14746:	e6051ae3          	bnez	a0,145ba <printk+0x50e>
   1474a:	b569                	j	145d4 <printk+0x528>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:427
					printk_pad_space(vlen, field_width, &count, info);  //输出空格
   1474c:	86d2                	mv	a3,s4
   1474e:	1030                	addi	a2,sp,40
   14750:	85ca                	mv	a1,s2
   14752:	855a                	mv	a0,s6
   14754:	fffff097          	auipc	ra,0xfffff
   14758:	61c080e7          	jalr	1564(ra) # 13d70 <printk_pad_space>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:430
						printk_putc(schar, &count, info);
   1475c:	8652                	mv	a2,s4
   1475e:	102c                	addi	a1,sp,40
   14760:	856e                	mv	a0,s11
   14762:	fffff097          	auipc	ra,0xfffff
   14766:	550080e7          	jalr	1360(ra) # 13cb2 <printk_putc>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:391
			ival = (int) va_arg1(ap, int);  //返回当前参数，并将ap指向下一个参数
   1476a:	4bb2                	lw	s7,12(sp)
   1476c:	b569                	j	145f6 <printk+0x54a>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:646
		}
	}
	return count;
   1476e:	5522                	lw	a0,40(sp)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:647
}
   14770:	40ba                	lw	ra,140(sp)
   14772:	442a                	lw	s0,136(sp)
   14774:	449a                	lw	s1,132(sp)
   14776:	490a                	lw	s2,128(sp)
   14778:	59f6                	lw	s3,124(sp)
   1477a:	5a66                	lw	s4,120(sp)
   1477c:	5ad6                	lw	s5,116(sp)
   1477e:	5b46                	lw	s6,112(sp)
   14780:	5bb6                	lw	s7,108(sp)
   14782:	5c26                	lw	s8,104(sp)
   14784:	5c96                	lw	s9,100(sp)
   14786:	5d06                	lw	s10,96(sp)
   14788:	4df6                	lw	s11,92(sp)
   1478a:	6149                	addi	sp,sp,144
   1478c:	8082                	ret

0001478e <myprintf>:
myprintf():
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:656
//参数说明：const char *:打印参数字符串：对输入的字符串进行解析并按格式输出
//       例如： printf("c=%c\n",c); 将c按char型进行输出
//函数返回：字符串长度
//======================================================================
int myprintf(const char *fmt, ...)
{
   1478e:	7139                	addi	sp,sp,-64
   14790:	ce06                	sw	ra,28(sp)
   14792:	d22e                	sw	a1,36(sp)
   14794:	d432                	sw	a2,40(sp)
   14796:	d636                	sw	a3,44(sp)
   14798:	d83a                	sw	a4,48(sp)
   1479a:	da3e                	sw	a5,52(sp)
   1479c:	dc42                	sw	a6,56(sp)
   1479e:	de46                	sw	a7,60(sp)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:662
	//char * ap;
  va_list ap;
	char c;
	int rvalue;
	PRINTK_INFO info;
	info.dest = DEST_CONSOLE;  //宏定义为1
   147a0:	4785                	li	a5,1
   147a2:	c03e                	sw	a5,0(sp)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:663
	info.func = &out_char;     //调用的串口输出函数
   147a4:	fffff797          	auipc	a5,0xfffff
   147a8:	60878793          	addi	a5,a5,1544 # 13dac <out_char>
   147ac:	c23e                	sw	a5,4(sp)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:664
	va_start(ap, fmt);  //对ap 进行初始化，让它指向可变参数表里面的第一个参数
   147ae:	1050                	addi	a2,sp,36
   147b0:	c632                	sw	a2,12(sp)
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:665
	rvalue = printk(&info, fmt, ap);
   147b2:	85aa                	mv	a1,a0
   147b4:	850a                	mv	a0,sp
   147b6:	00000097          	auipc	ra,0x0
   147ba:	8f6080e7          	jalr	-1802(ra) # 140ac <printk>
C:\Users\16233\Desktop\CH04-1\浮点数-CH573\Debug/srcc/printf.c:670
    
	va_end(ap);

	return rvalue;
}
   147be:	40f2                	lw	ra,28(sp)
   147c0:	6121                	addi	sp,sp,64
   147c2:	8082                	ret

000147c4 <__udivdi3>:
__udivdi3():
   147c4:	87b6                	mv	a5,a3
   147c6:	88b2                	mv	a7,a2
   147c8:	832a                	mv	t1,a0
   147ca:	882e                	mv	a6,a1
   147cc:	14069d63          	bnez	a3,14926 <__udivdi3+0x162>
   147d0:	0ac5f963          	bgeu	a1,a2,14882 <__udivdi3+0xbe>
   147d4:	6741                	lui	a4,0x10
   147d6:	1ae66e63          	bltu	a2,a4,14992 <__udivdi3+0x1ce>
   147da:	010007b7          	lui	a5,0x1000
   147de:	34f66363          	bltu	a2,a5,14b24 <__udivdi3+0x360>
   147e2:	01865693          	srli	a3,a2,0x18
   147e6:	47e1                	li	a5,24
   147e8:	00002717          	auipc	a4,0x2
   147ec:	c2870713          	addi	a4,a4,-984 # 16410 <__clz_tab>
   147f0:	9736                	add	a4,a4,a3
   147f2:	00074703          	lbu	a4,0(a4)
   147f6:	97ba                	add	a5,a5,a4
   147f8:	02000713          	li	a4,32
   147fc:	8f1d                	sub	a4,a4,a5
   147fe:	cb19                	beqz	a4,14814 <__udivdi3+0x50>
   14800:	00e59833          	sll	a6,a1,a4
   14804:	00f557b3          	srl	a5,a0,a5
   14808:	00e618b3          	sll	a7,a2,a4
   1480c:	0107e833          	or	a6,a5,a6
   14810:	00e51333          	sll	t1,a0,a4
   14814:	0108d613          	srli	a2,a7,0x10
   14818:	02c85533          	divu	a0,a6,a2
   1481c:	01089693          	slli	a3,a7,0x10
   14820:	82c1                	srli	a3,a3,0x10
   14822:	01035793          	srli	a5,t1,0x10
   14826:	02c87733          	remu	a4,a6,a2
   1482a:	02a685b3          	mul	a1,a3,a0
   1482e:	0742                	slli	a4,a4,0x10
   14830:	00f76833          	or	a6,a4,a5
   14834:	00b87a63          	bgeu	a6,a1,14848 <__udivdi3+0x84>
   14838:	9846                	add	a6,a6,a7
   1483a:	fff50793          	addi	a5,a0,-1
   1483e:	01186463          	bltu	a6,a7,14846 <__udivdi3+0x82>
   14842:	30b86763          	bltu	a6,a1,14b50 <__udivdi3+0x38c>
   14846:	853e                	mv	a0,a5
   14848:	40b80833          	sub	a6,a6,a1
   1484c:	02c85733          	divu	a4,a6,a2
   14850:	0342                	slli	t1,t1,0x10
   14852:	01035313          	srli	t1,t1,0x10
   14856:	02c87833          	remu	a6,a6,a2
   1485a:	02e686b3          	mul	a3,a3,a4
   1485e:	0842                	slli	a6,a6,0x10
   14860:	00686833          	or	a6,a6,t1
   14864:	00d87b63          	bgeu	a6,a3,1487a <__udivdi3+0xb6>
   14868:	9846                	add	a6,a6,a7
   1486a:	fff70793          	addi	a5,a4,-1
   1486e:	01186563          	bltu	a6,a7,14878 <__udivdi3+0xb4>
   14872:	1779                	addi	a4,a4,-2
   14874:	00d86363          	bltu	a6,a3,1487a <__udivdi3+0xb6>
   14878:	873e                	mv	a4,a5
   1487a:	0542                	slli	a0,a0,0x10
   1487c:	8d59                	or	a0,a0,a4
   1487e:	4581                	li	a1,0
   14880:	8082                	ret
   14882:	e601                	bnez	a2,1488a <__udivdi3+0xc6>
   14884:	4705                	li	a4,1
   14886:	02c758b3          	divu	a7,a4,a2
   1488a:	6741                	lui	a4,0x10
   1488c:	0ee8ea63          	bltu	a7,a4,14980 <__udivdi3+0x1bc>
   14890:	010007b7          	lui	a5,0x1000
   14894:	28f8ec63          	bltu	a7,a5,14b2c <__udivdi3+0x368>
   14898:	0188d693          	srli	a3,a7,0x18
   1489c:	47e1                	li	a5,24
   1489e:	00002717          	auipc	a4,0x2
   148a2:	b7270713          	addi	a4,a4,-1166 # 16410 <__clz_tab>
   148a6:	9736                	add	a4,a4,a3
   148a8:	00074683          	lbu	a3,0(a4)
   148ac:	96be                	add	a3,a3,a5
   148ae:	02000793          	li	a5,32
   148b2:	8f95                	sub	a5,a5,a3
   148b4:	ebe5                	bnez	a5,149a4 <__udivdi3+0x1e0>
   148b6:	01089e93          	slli	t4,a7,0x10
   148ba:	41158733          	sub	a4,a1,a7
   148be:	0108df13          	srli	t5,a7,0x10
   148c2:	010ede93          	srli	t4,t4,0x10
   148c6:	4585                	li	a1,1
   148c8:	01035793          	srli	a5,t1,0x10
   148cc:	03e75533          	divu	a0,a4,t5
   148d0:	03e77733          	remu	a4,a4,t5
   148d4:	03d506b3          	mul	a3,a0,t4
   148d8:	0742                	slli	a4,a4,0x10
   148da:	8fd9                	or	a5,a5,a4
   148dc:	00d7fa63          	bgeu	a5,a3,148f0 <__udivdi3+0x12c>
   148e0:	97c6                	add	a5,a5,a7
   148e2:	fff50713          	addi	a4,a0,-1
   148e6:	0117e463          	bltu	a5,a7,148ee <__udivdi3+0x12a>
   148ea:	26d7e663          	bltu	a5,a3,14b56 <__udivdi3+0x392>
   148ee:	853a                	mv	a0,a4
   148f0:	8f95                	sub	a5,a5,a3
   148f2:	03e7d733          	divu	a4,a5,t5
   148f6:	0342                	slli	t1,t1,0x10
   148f8:	01035313          	srli	t1,t1,0x10
   148fc:	03e7f7b3          	remu	a5,a5,t5
   14900:	03d70eb3          	mul	t4,a4,t4
   14904:	07c2                	slli	a5,a5,0x10
   14906:	0067e7b3          	or	a5,a5,t1
   1490a:	01d7fb63          	bgeu	a5,t4,14920 <__udivdi3+0x15c>
   1490e:	97c6                	add	a5,a5,a7
   14910:	fff70693          	addi	a3,a4,-1
   14914:	0117e563          	bltu	a5,a7,1491e <__udivdi3+0x15a>
   14918:	1779                	addi	a4,a4,-2
   1491a:	01d7e363          	bltu	a5,t4,14920 <__udivdi3+0x15c>
   1491e:	8736                	mv	a4,a3
   14920:	0542                	slli	a0,a0,0x10
   14922:	8d59                	or	a0,a0,a4
   14924:	8082                	ret
   14926:	04d5e263          	bltu	a1,a3,1496a <__udivdi3+0x1a6>
   1492a:	67c1                	lui	a5,0x10
   1492c:	04f6e263          	bltu	a3,a5,14970 <__udivdi3+0x1ac>
   14930:	010007b7          	lui	a5,0x1000
   14934:	1ef6e463          	bltu	a3,a5,14b1c <__udivdi3+0x358>
   14938:	0186d713          	srli	a4,a3,0x18
   1493c:	4861                	li	a6,24
   1493e:	00002797          	auipc	a5,0x2
   14942:	ad278793          	addi	a5,a5,-1326 # 16410 <__clz_tab>
   14946:	97ba                	add	a5,a5,a4
   14948:	0007c703          	lbu	a4,0(a5)
   1494c:	02000e13          	li	t3,32
   14950:	9742                	add	a4,a4,a6
   14952:	40ee0e33          	sub	t3,t3,a4
   14956:	0c0e1a63          	bnez	t3,14a2a <__udivdi3+0x266>
   1495a:	1cb6ed63          	bltu	a3,a1,14b34 <__udivdi3+0x370>
   1495e:	00c53533          	sltu	a0,a0,a2
   14962:	00154513          	xori	a0,a0,1
   14966:	4581                	li	a1,0
   14968:	8082                	ret
   1496a:	4581                	li	a1,0
   1496c:	4501                	li	a0,0
   1496e:	8082                	ret
   14970:	0ff00793          	li	a5,255
   14974:	1cd7f363          	bgeu	a5,a3,14b3a <__udivdi3+0x376>
   14978:	0086d713          	srli	a4,a3,0x8
   1497c:	4821                	li	a6,8
   1497e:	b7c1                	j	1493e <__udivdi3+0x17a>
   14980:	0ff00713          	li	a4,255
   14984:	86c6                	mv	a3,a7
   14986:	f1177ce3          	bgeu	a4,a7,1489e <__udivdi3+0xda>
   1498a:	0088d693          	srli	a3,a7,0x8
   1498e:	47a1                	li	a5,8
   14990:	b739                	j	1489e <__udivdi3+0xda>
   14992:	0ff00713          	li	a4,255
   14996:	86b2                	mv	a3,a2
   14998:	e4c778e3          	bgeu	a4,a2,147e8 <__udivdi3+0x24>
   1499c:	00865693          	srli	a3,a2,0x8
   149a0:	47a1                	li	a5,8
   149a2:	b599                	j	147e8 <__udivdi3+0x24>
   149a4:	00f898b3          	sll	a7,a7,a5
   149a8:	00d5d633          	srl	a2,a1,a3
   149ac:	0108df13          	srli	t5,a7,0x10
   149b0:	03e65e33          	divu	t3,a2,t5
   149b4:	00f59733          	sll	a4,a1,a5
   149b8:	00d556b3          	srl	a3,a0,a3
   149bc:	8f55                	or	a4,a4,a3
   149be:	01089e93          	slli	t4,a7,0x10
   149c2:	010ede93          	srli	t4,t4,0x10
   149c6:	00f51333          	sll	t1,a0,a5
   149ca:	01075593          	srli	a1,a4,0x10
   149ce:	03e676b3          	remu	a3,a2,t5
   149d2:	03ce87b3          	mul	a5,t4,t3
   149d6:	06c2                	slli	a3,a3,0x10
   149d8:	8ecd                	or	a3,a3,a1
   149da:	00f6fb63          	bgeu	a3,a5,149f0 <__udivdi3+0x22c>
   149de:	96c6                	add	a3,a3,a7
   149e0:	fffe0613          	addi	a2,t3,-1
   149e4:	1716e463          	bltu	a3,a7,14b4c <__udivdi3+0x388>
   149e8:	16f6f263          	bgeu	a3,a5,14b4c <__udivdi3+0x388>
   149ec:	1e79                	addi	t3,t3,-2
   149ee:	96c6                	add	a3,a3,a7
   149f0:	8e9d                	sub	a3,a3,a5
   149f2:	03e6d633          	divu	a2,a3,t5
   149f6:	01071793          	slli	a5,a4,0x10
   149fa:	83c1                	srli	a5,a5,0x10
   149fc:	03e6f6b3          	remu	a3,a3,t5
   14a00:	02ce8533          	mul	a0,t4,a2
   14a04:	01069713          	slli	a4,a3,0x10
   14a08:	8f5d                	or	a4,a4,a5
   14a0a:	00a77b63          	bgeu	a4,a0,14a20 <__udivdi3+0x25c>
   14a0e:	9746                	add	a4,a4,a7
   14a10:	fff60793          	addi	a5,a2,-1
   14a14:	13176863          	bltu	a4,a7,14b44 <__udivdi3+0x380>
   14a18:	12a77663          	bgeu	a4,a0,14b44 <__udivdi3+0x380>
   14a1c:	1679                	addi	a2,a2,-2
   14a1e:	9746                	add	a4,a4,a7
   14a20:	010e1593          	slli	a1,t3,0x10
   14a24:	8f09                	sub	a4,a4,a0
   14a26:	8dd1                	or	a1,a1,a2
   14a28:	b545                	j	148c8 <__udivdi3+0x104>
   14a2a:	00e657b3          	srl	a5,a2,a4
   14a2e:	01c696b3          	sll	a3,a3,t3
   14a32:	8edd                	or	a3,a3,a5
   14a34:	00e5d333          	srl	t1,a1,a4
   14a38:	0106df13          	srli	t5,a3,0x10
   14a3c:	03e357b3          	divu	a5,t1,t5
   14a40:	01069e93          	slli	t4,a3,0x10
   14a44:	010ede93          	srli	t4,t4,0x10
   14a48:	01c59833          	sll	a6,a1,t3
   14a4c:	00e55733          	srl	a4,a0,a4
   14a50:	01076833          	or	a6,a4,a6
   14a54:	01085893          	srli	a7,a6,0x10
   14a58:	01c61633          	sll	a2,a2,t3
   14a5c:	03e37333          	remu	t1,t1,t5
   14a60:	02fe85b3          	mul	a1,t4,a5
   14a64:	0342                	slli	t1,t1,0x10
   14a66:	011368b3          	or	a7,t1,a7
   14a6a:	00b8fb63          	bgeu	a7,a1,14a80 <__udivdi3+0x2bc>
   14a6e:	98b6                	add	a7,a7,a3
   14a70:	fff78713          	addi	a4,a5,-1
   14a74:	0cd8ea63          	bltu	a7,a3,14b48 <__udivdi3+0x384>
   14a78:	0cb8f863          	bgeu	a7,a1,14b48 <__udivdi3+0x384>
   14a7c:	17f9                	addi	a5,a5,-2
   14a7e:	98b6                	add	a7,a7,a3
   14a80:	40b888b3          	sub	a7,a7,a1
   14a84:	03e8d733          	divu	a4,a7,t5
   14a88:	0842                	slli	a6,a6,0x10
   14a8a:	01085813          	srli	a6,a6,0x10
   14a8e:	03e8f8b3          	remu	a7,a7,t5
   14a92:	02ee8333          	mul	t1,t4,a4
   14a96:	08c2                	slli	a7,a7,0x10
   14a98:	0108e5b3          	or	a1,a7,a6
   14a9c:	0065fb63          	bgeu	a1,t1,14ab2 <__udivdi3+0x2ee>
   14aa0:	95b6                	add	a1,a1,a3
   14aa2:	fff70813          	addi	a6,a4,-1
   14aa6:	08d5ed63          	bltu	a1,a3,14b40 <__udivdi3+0x37c>
   14aaa:	0865fb63          	bgeu	a1,t1,14b40 <__udivdi3+0x37c>
   14aae:	1779                	addi	a4,a4,-2
   14ab0:	95b6                	add	a1,a1,a3
   14ab2:	07c2                	slli	a5,a5,0x10
   14ab4:	6f41                	lui	t5,0x10
   14ab6:	8fd9                	or	a5,a5,a4
   14ab8:	ffff0713          	addi	a4,t5,-1 # ffff <MCU_SECTORSIZE+0xefff>
   14abc:	00e7f6b3          	and	a3,a5,a4
   14ac0:	0107d893          	srli	a7,a5,0x10
   14ac4:	8f71                	and	a4,a4,a2
   14ac6:	8241                	srli	a2,a2,0x10
   14ac8:	02e68eb3          	mul	t4,a3,a4
   14acc:	406585b3          	sub	a1,a1,t1
   14ad0:	02c686b3          	mul	a3,a3,a2
   14ad4:	010ed813          	srli	a6,t4,0x10
   14ad8:	02e88733          	mul	a4,a7,a4
   14adc:	96ba                	add	a3,a3,a4
   14ade:	96c2                	add	a3,a3,a6
   14ae0:	02c88633          	mul	a2,a7,a2
   14ae4:	00e6f363          	bgeu	a3,a4,14aea <__udivdi3+0x326>
   14ae8:	967a                	add	a2,a2,t5
   14aea:	0106d893          	srli	a7,a3,0x10
   14aee:	9646                	add	a2,a2,a7
   14af0:	02c5e263          	bltu	a1,a2,14b14 <__udivdi3+0x350>
   14af4:	00c58563          	beq	a1,a2,14afe <__udivdi3+0x33a>
   14af8:	853e                	mv	a0,a5
   14afa:	4581                	li	a1,0
   14afc:	8082                	ret
   14afe:	6741                	lui	a4,0x10
   14b00:	177d                	addi	a4,a4,-1
   14b02:	8ef9                	and	a3,a3,a4
   14b04:	06c2                	slli	a3,a3,0x10
   14b06:	00eefeb3          	and	t4,t4,a4
   14b0a:	01c51533          	sll	a0,a0,t3
   14b0e:	96f6                	add	a3,a3,t4
   14b10:	fed574e3          	bgeu	a0,a3,14af8 <__udivdi3+0x334>
   14b14:	fff78513          	addi	a0,a5,-1
   14b18:	4581                	li	a1,0
   14b1a:	8082                	ret
   14b1c:	0106d713          	srli	a4,a3,0x10
   14b20:	4841                	li	a6,16
   14b22:	bd31                	j	1493e <__udivdi3+0x17a>
   14b24:	01065693          	srli	a3,a2,0x10
   14b28:	47c1                	li	a5,16
   14b2a:	b97d                	j	147e8 <__udivdi3+0x24>
   14b2c:	0108d693          	srli	a3,a7,0x10
   14b30:	47c1                	li	a5,16
   14b32:	b3b5                	j	1489e <__udivdi3+0xda>
   14b34:	4581                	li	a1,0
   14b36:	4505                	li	a0,1
   14b38:	8082                	ret
   14b3a:	8736                	mv	a4,a3
   14b3c:	4801                	li	a6,0
   14b3e:	b501                	j	1493e <__udivdi3+0x17a>
   14b40:	8742                	mv	a4,a6
   14b42:	bf85                	j	14ab2 <__udivdi3+0x2ee>
   14b44:	863e                	mv	a2,a5
   14b46:	bde9                	j	14a20 <__udivdi3+0x25c>
   14b48:	87ba                	mv	a5,a4
   14b4a:	bf1d                	j	14a80 <__udivdi3+0x2bc>
   14b4c:	8e32                	mv	t3,a2
   14b4e:	b54d                	j	149f0 <__udivdi3+0x22c>
   14b50:	1579                	addi	a0,a0,-2
   14b52:	9846                	add	a6,a6,a7
   14b54:	b9d5                	j	14848 <__udivdi3+0x84>
   14b56:	1579                	addi	a0,a0,-2
   14b58:	97c6                	add	a5,a5,a7
   14b5a:	bb59                	j	148f0 <__udivdi3+0x12c>

00014b5c <__umoddi3>:
__umoddi3():
   14b5c:	87b6                	mv	a5,a3
   14b5e:	8832                	mv	a6,a2
   14b60:	832a                	mv	t1,a0
   14b62:	872e                	mv	a4,a1
   14b64:	8e2e                	mv	t3,a1
   14b66:	14069363          	bnez	a3,14cac <__umoddi3+0x150>
   14b6a:	0ac5f163          	bgeu	a1,a2,14c0c <__umoddi3+0xb0>
   14b6e:	6741                	lui	a4,0x10
   14b70:	1ae67863          	bgeu	a2,a4,14d20 <__umoddi3+0x1c4>
   14b74:	0ff00713          	li	a4,255
   14b78:	86b2                	mv	a3,a2
   14b7a:	00c77563          	bgeu	a4,a2,14b84 <__umoddi3+0x28>
   14b7e:	00865693          	srli	a3,a2,0x8
   14b82:	47a1                	li	a5,8
   14b84:	00002717          	auipc	a4,0x2
   14b88:	88c70713          	addi	a4,a4,-1908 # 16410 <__clz_tab>
   14b8c:	9736                	add	a4,a4,a3
   14b8e:	00074703          	lbu	a4,0(a4)
   14b92:	02000893          	li	a7,32
   14b96:	97ba                	add	a5,a5,a4
   14b98:	40f888b3          	sub	a7,a7,a5
   14b9c:	00088c63          	beqz	a7,14bb4 <__umoddi3+0x58>
   14ba0:	011595b3          	sll	a1,a1,a7
   14ba4:	00f557b3          	srl	a5,a0,a5
   14ba8:	01161833          	sll	a6,a2,a7
   14bac:	00b7ee33          	or	t3,a5,a1
   14bb0:	01151333          	sll	t1,a0,a7
   14bb4:	01085613          	srli	a2,a6,0x10
   14bb8:	02ce57b3          	divu	a5,t3,a2
   14bbc:	01081513          	slli	a0,a6,0x10
   14bc0:	8141                	srli	a0,a0,0x10
   14bc2:	01035693          	srli	a3,t1,0x10
   14bc6:	02ce7e33          	remu	t3,t3,a2
   14bca:	02f507b3          	mul	a5,a0,a5
   14bce:	0e42                	slli	t3,t3,0x10
   14bd0:	00de6733          	or	a4,t3,a3
   14bd4:	00f77863          	bgeu	a4,a5,14be4 <__umoddi3+0x88>
   14bd8:	9742                	add	a4,a4,a6
   14bda:	01076563          	bltu	a4,a6,14be4 <__umoddi3+0x88>
   14bde:	00f77363          	bgeu	a4,a5,14be4 <__umoddi3+0x88>
   14be2:	9742                	add	a4,a4,a6
   14be4:	8f1d                	sub	a4,a4,a5
   14be6:	02c756b3          	divu	a3,a4,a2
   14bea:	01031793          	slli	a5,t1,0x10
   14bee:	83c1                	srli	a5,a5,0x10
   14bf0:	02c77733          	remu	a4,a4,a2
   14bf4:	02d50533          	mul	a0,a0,a3
   14bf8:	0742                	slli	a4,a4,0x10
   14bfa:	8fd9                	or	a5,a5,a4
   14bfc:	08a7ec63          	bltu	a5,a0,14c94 <__umoddi3+0x138>
   14c00:	40a78533          	sub	a0,a5,a0
   14c04:	01155533          	srl	a0,a0,a7
   14c08:	4581                	li	a1,0
   14c0a:	8082                	ret
   14c0c:	e601                	bnez	a2,14c14 <__umoddi3+0xb8>
   14c0e:	4705                	li	a4,1
   14c10:	02c75833          	divu	a6,a4,a2
   14c14:	6741                	lui	a4,0x10
   14c16:	0ee86c63          	bltu	a6,a4,14d0e <__umoddi3+0x1b2>
   14c1a:	010007b7          	lui	a5,0x1000
   14c1e:	2af86563          	bltu	a6,a5,14ec8 <__umoddi3+0x36c>
   14c22:	01885693          	srli	a3,a6,0x18
   14c26:	47e1                	li	a5,24
   14c28:	00001717          	auipc	a4,0x1
   14c2c:	7e870713          	addi	a4,a4,2024 # 16410 <__clz_tab>
   14c30:	9736                	add	a4,a4,a3
   14c32:	00074703          	lbu	a4,0(a4)
   14c36:	02000893          	li	a7,32
   14c3a:	97ba                	add	a5,a5,a4
   14c3c:	40f888b3          	sub	a7,a7,a5
   14c40:	1e089a63          	bnez	a7,14e34 <__umoddi3+0x2d8>
   14c44:	01081e13          	slli	t3,a6,0x10
   14c48:	410585b3          	sub	a1,a1,a6
   14c4c:	01085613          	srli	a2,a6,0x10
   14c50:	010e5e13          	srli	t3,t3,0x10
   14c54:	01035713          	srli	a4,t1,0x10
   14c58:	02c5d6b3          	divu	a3,a1,a2
   14c5c:	02c5f5b3          	remu	a1,a1,a2
   14c60:	03c686b3          	mul	a3,a3,t3
   14c64:	05c2                	slli	a1,a1,0x10
   14c66:	8f4d                	or	a4,a4,a1
   14c68:	00d77763          	bgeu	a4,a3,14c76 <__umoddi3+0x11a>
   14c6c:	9742                	add	a4,a4,a6
   14c6e:	01076463          	bltu	a4,a6,14c76 <__umoddi3+0x11a>
   14c72:	26d76a63          	bltu	a4,a3,14ee6 <__umoddi3+0x38a>
   14c76:	8f15                	sub	a4,a4,a3
   14c78:	02c75533          	divu	a0,a4,a2
   14c7c:	0342                	slli	t1,t1,0x10
   14c7e:	01035313          	srli	t1,t1,0x10
   14c82:	02c77733          	remu	a4,a4,a2
   14c86:	03c50533          	mul	a0,a0,t3
   14c8a:	0742                	slli	a4,a4,0x10
   14c8c:	006767b3          	or	a5,a4,t1
   14c90:	00a7f863          	bgeu	a5,a0,14ca0 <__umoddi3+0x144>
   14c94:	97c2                	add	a5,a5,a6
   14c96:	0107e563          	bltu	a5,a6,14ca0 <__umoddi3+0x144>
   14c9a:	00a7f363          	bgeu	a5,a0,14ca0 <__umoddi3+0x144>
   14c9e:	97c2                	add	a5,a5,a6
   14ca0:	40a78533          	sub	a0,a5,a0
   14ca4:	01155533          	srl	a0,a0,a7
   14ca8:	4581                	li	a1,0
   14caa:	8082                	ret
   14cac:	882a                	mv	a6,a0
   14cae:	f4d5eee3          	bltu	a1,a3,14c0a <__umoddi3+0xae>
   14cb2:	67c1                	lui	a5,0x10
   14cb4:	04f6e563          	bltu	a3,a5,14cfe <__umoddi3+0x1a2>
   14cb8:	010007b7          	lui	a5,0x1000
   14cbc:	20f6e263          	bltu	a3,a5,14ec0 <__umoddi3+0x364>
   14cc0:	0186d313          	srli	t1,a3,0x18
   14cc4:	48e1                	li	a7,24
   14cc6:	00001797          	auipc	a5,0x1
   14cca:	74a78793          	addi	a5,a5,1866 # 16410 <__clz_tab>
   14cce:	979a                	add	a5,a5,t1
   14cd0:	0007ce03          	lbu	t3,0(a5)
   14cd4:	02000313          	li	t1,32
   14cd8:	9e46                	add	t3,t3,a7
   14cda:	41c30333          	sub	t1,t1,t3
   14cde:	04031963          	bnez	t1,14d30 <__umoddi3+0x1d4>
   14ce2:	00b6e463          	bltu	a3,a1,14cea <__umoddi3+0x18e>
   14ce6:	00c56963          	bltu	a0,a2,14cf8 <__umoddi3+0x19c>
   14cea:	40c50833          	sub	a6,a0,a2
   14cee:	8d95                	sub	a1,a1,a3
   14cf0:	01053733          	sltu	a4,a0,a6
   14cf4:	40e58733          	sub	a4,a1,a4
   14cf8:	8542                	mv	a0,a6
   14cfa:	85ba                	mv	a1,a4
   14cfc:	8082                	ret
   14cfe:	0ff00793          	li	a5,255
   14d02:	1cd7fb63          	bgeu	a5,a3,14ed8 <__umoddi3+0x37c>
   14d06:	0086d313          	srli	t1,a3,0x8
   14d0a:	48a1                	li	a7,8
   14d0c:	bf6d                	j	14cc6 <__umoddi3+0x16a>
   14d0e:	0ff00713          	li	a4,255
   14d12:	86c2                	mv	a3,a6
   14d14:	f1077ae3          	bgeu	a4,a6,14c28 <__umoddi3+0xcc>
   14d18:	00885693          	srli	a3,a6,0x8
   14d1c:	47a1                	li	a5,8
   14d1e:	b729                	j	14c28 <__umoddi3+0xcc>
   14d20:	010007b7          	lui	a5,0x1000
   14d24:	1af66663          	bltu	a2,a5,14ed0 <__umoddi3+0x374>
   14d28:	01865693          	srli	a3,a2,0x18
   14d2c:	47e1                	li	a5,24
   14d2e:	bd99                	j	14b84 <__umoddi3+0x28>
   14d30:	01c657b3          	srl	a5,a2,t3
   14d34:	006696b3          	sll	a3,a3,t1
   14d38:	8edd                	or	a3,a3,a5
   14d3a:	01c5d8b3          	srl	a7,a1,t3
   14d3e:	0106d713          	srli	a4,a3,0x10
   14d42:	02e8deb3          	divu	t4,a7,a4
   14d46:	01069f13          	slli	t5,a3,0x10
   14d4a:	01c557b3          	srl	a5,a0,t3
   14d4e:	010f5f13          	srli	t5,t5,0x10
   14d52:	006595b3          	sll	a1,a1,t1
   14d56:	8ddd                	or	a1,a1,a5
   14d58:	0105d813          	srli	a6,a1,0x10
   14d5c:	00661633          	sll	a2,a2,t1
   14d60:	00651533          	sll	a0,a0,t1
   14d64:	02e8f8b3          	remu	a7,a7,a4
   14d68:	03df07b3          	mul	a5,t5,t4
   14d6c:	08c2                	slli	a7,a7,0x10
   14d6e:	0108e833          	or	a6,a7,a6
   14d72:	00f87b63          	bgeu	a6,a5,14d88 <__umoddi3+0x22c>
   14d76:	9836                	add	a6,a6,a3
   14d78:	fffe8893          	addi	a7,t4,-1
   14d7c:	16d86363          	bltu	a6,a3,14ee2 <__umoddi3+0x386>
   14d80:	16f87163          	bgeu	a6,a5,14ee2 <__umoddi3+0x386>
   14d84:	1ef9                	addi	t4,t4,-2
   14d86:	9836                	add	a6,a6,a3
   14d88:	40f80833          	sub	a6,a6,a5
   14d8c:	02e857b3          	divu	a5,a6,a4
   14d90:	05c2                	slli	a1,a1,0x10
   14d92:	81c1                	srli	a1,a1,0x10
   14d94:	02e87833          	remu	a6,a6,a4
   14d98:	02ff0f33          	mul	t5,t5,a5
   14d9c:	01081713          	slli	a4,a6,0x10
   14da0:	8f4d                	or	a4,a4,a1
   14da2:	01e77b63          	bgeu	a4,t5,14db8 <__umoddi3+0x25c>
   14da6:	9736                	add	a4,a4,a3
   14da8:	fff78593          	addi	a1,a5,-1 # ffffff <_data_lma+0xfe9aef>
   14dac:	12d76963          	bltu	a4,a3,14ede <__umoddi3+0x382>
   14db0:	13e77763          	bgeu	a4,t5,14ede <__umoddi3+0x382>
   14db4:	17f9                	addi	a5,a5,-2
   14db6:	9736                	add	a4,a4,a3
   14db8:	0ec2                	slli	t4,t4,0x10
   14dba:	62c1                	lui	t0,0x10
   14dbc:	00feeeb3          	or	t4,t4,a5
   14dc0:	fff28813          	addi	a6,t0,-1 # ffff <MCU_SECTORSIZE+0xefff>
   14dc4:	010ef8b3          	and	a7,t4,a6
   14dc8:	01065593          	srli	a1,a2,0x10
   14dcc:	010ede93          	srli	t4,t4,0x10
   14dd0:	01067833          	and	a6,a2,a6
   14dd4:	03088fb3          	mul	t6,a7,a6
   14dd8:	41e70733          	sub	a4,a4,t5
   14ddc:	030e8833          	mul	a6,t4,a6
   14de0:	010fd793          	srli	a5,t6,0x10
   14de4:	02b888b3          	mul	a7,a7,a1
   14de8:	98c2                	add	a7,a7,a6
   14dea:	97c6                	add	a5,a5,a7
   14dec:	02be8eb3          	mul	t4,t4,a1
   14df0:	0107f363          	bgeu	a5,a6,14df6 <__umoddi3+0x29a>
   14df4:	9e96                	add	t4,t4,t0
   14df6:	6841                	lui	a6,0x10
   14df8:	187d                	addi	a6,a6,-1
   14dfa:	0107d593          	srli	a1,a5,0x10
   14dfe:	0107f7b3          	and	a5,a5,a6
   14e02:	07c2                	slli	a5,a5,0x10
   14e04:	010fffb3          	and	t6,t6,a6
   14e08:	95f6                	add	a1,a1,t4
   14e0a:	97fe                	add	a5,a5,t6
   14e0c:	0ab76263          	bltu	a4,a1,14eb0 <__umoddi3+0x354>
   14e10:	08b70e63          	beq	a4,a1,14eac <__umoddi3+0x350>
   14e14:	40f507b3          	sub	a5,a0,a5
   14e18:	00f53533          	sltu	a0,a0,a5
   14e1c:	40b705b3          	sub	a1,a4,a1
   14e20:	8d89                	sub	a1,a1,a0
   14e22:	01c59e33          	sll	t3,a1,t3
   14e26:	0067d533          	srl	a0,a5,t1
   14e2a:	00ae6533          	or	a0,t3,a0
   14e2e:	0065d5b3          	srl	a1,a1,t1
   14e32:	8082                	ret
   14e34:	01181833          	sll	a6,a6,a7
   14e38:	00f5d733          	srl	a4,a1,a5
   14e3c:	01085613          	srli	a2,a6,0x10
   14e40:	02c756b3          	divu	a3,a4,a2
   14e44:	01081e13          	slli	t3,a6,0x10
   14e48:	00f557b3          	srl	a5,a0,a5
   14e4c:	010e5e13          	srli	t3,t3,0x10
   14e50:	011595b3          	sll	a1,a1,a7
   14e54:	8ddd                	or	a1,a1,a5
   14e56:	0105de93          	srli	t4,a1,0x10
   14e5a:	01151333          	sll	t1,a0,a7
   14e5e:	02c77733          	remu	a4,a4,a2
   14e62:	02de07b3          	mul	a5,t3,a3
   14e66:	01071693          	slli	a3,a4,0x10
   14e6a:	01d6e6b3          	or	a3,a3,t4
   14e6e:	00f6f863          	bgeu	a3,a5,14e7e <__umoddi3+0x322>
   14e72:	96c2                	add	a3,a3,a6
   14e74:	0106e563          	bltu	a3,a6,14e7e <__umoddi3+0x322>
   14e78:	00f6f363          	bgeu	a3,a5,14e7e <__umoddi3+0x322>
   14e7c:	96c2                	add	a3,a3,a6
   14e7e:	8e9d                	sub	a3,a3,a5
   14e80:	02c6d733          	divu	a4,a3,a2
   14e84:	01059793          	slli	a5,a1,0x10
   14e88:	83c1                	srli	a5,a5,0x10
   14e8a:	02c6f6b3          	remu	a3,a3,a2
   14e8e:	02ee0733          	mul	a4,t3,a4
   14e92:	01069593          	slli	a1,a3,0x10
   14e96:	8ddd                	or	a1,a1,a5
   14e98:	00e5f863          	bgeu	a1,a4,14ea8 <__umoddi3+0x34c>
   14e9c:	95c2                	add	a1,a1,a6
   14e9e:	0105e563          	bltu	a1,a6,14ea8 <__umoddi3+0x34c>
   14ea2:	00e5f363          	bgeu	a1,a4,14ea8 <__umoddi3+0x34c>
   14ea6:	95c2                	add	a1,a1,a6
   14ea8:	8d99                	sub	a1,a1,a4
   14eaa:	b36d                	j	14c54 <__umoddi3+0xf8>
   14eac:	f6f574e3          	bgeu	a0,a5,14e14 <__umoddi3+0x2b8>
   14eb0:	40c78633          	sub	a2,a5,a2
   14eb4:	00c7b7b3          	sltu	a5,a5,a2
   14eb8:	97b6                	add	a5,a5,a3
   14eba:	8d9d                	sub	a1,a1,a5
   14ebc:	87b2                	mv	a5,a2
   14ebe:	bf99                	j	14e14 <__umoddi3+0x2b8>
   14ec0:	0106d313          	srli	t1,a3,0x10
   14ec4:	48c1                	li	a7,16
   14ec6:	b501                	j	14cc6 <__umoddi3+0x16a>
   14ec8:	01085693          	srli	a3,a6,0x10
   14ecc:	47c1                	li	a5,16
   14ece:	bba9                	j	14c28 <__umoddi3+0xcc>
   14ed0:	01065693          	srli	a3,a2,0x10
   14ed4:	47c1                	li	a5,16
   14ed6:	b17d                	j	14b84 <__umoddi3+0x28>
   14ed8:	8336                	mv	t1,a3
   14eda:	4881                	li	a7,0
   14edc:	b3ed                	j	14cc6 <__umoddi3+0x16a>
   14ede:	87ae                	mv	a5,a1
   14ee0:	bde1                	j	14db8 <__umoddi3+0x25c>
   14ee2:	8ec6                	mv	t4,a7
   14ee4:	b555                	j	14d88 <__umoddi3+0x22c>
   14ee6:	9742                	add	a4,a4,a6
   14ee8:	b379                	j	14c76 <__umoddi3+0x11a>

00014eea <__eqdf2>:
__eqdf2():
   14eea:	0145d713          	srli	a4,a1,0x14
   14eee:	001007b7          	lui	a5,0x100
   14ef2:	17fd                	addi	a5,a5,-1
   14ef4:	0146d813          	srli	a6,a3,0x14
   14ef8:	7ff77713          	andi	a4,a4,2047
   14efc:	7ff00893          	li	a7,2047
   14f00:	00b7fe33          	and	t3,a5,a1
   14f04:	8eaa                	mv	t4,a0
   14f06:	8ff5                	and	a5,a5,a3
   14f08:	81fd                	srli	a1,a1,0x1f
   14f0a:	8f32                	mv	t5,a2
   14f0c:	7ff87813          	andi	a6,a6,2047
   14f10:	82fd                	srli	a3,a3,0x1f
   14f12:	01170b63          	beq	a4,a7,14f28 <__eqdf2+0x3e>
   14f16:	4305                	li	t1,1
   14f18:	01180663          	beq	a6,a7,14f24 <__eqdf2+0x3a>
   14f1c:	01071463          	bne	a4,a6,14f24 <__eqdf2+0x3a>
   14f20:	00fe0d63          	beq	t3,a5,14f3a <__eqdf2+0x50>
   14f24:	851a                	mv	a0,t1
   14f26:	8082                	ret
   14f28:	00ae68b3          	or	a7,t3,a0
   14f2c:	4305                	li	t1,1
   14f2e:	fe089be3          	bnez	a7,14f24 <__eqdf2+0x3a>
   14f32:	fee819e3          	bne	a6,a4,14f24 <__eqdf2+0x3a>
   14f36:	8fd1                	or	a5,a5,a2
   14f38:	f7f5                	bnez	a5,14f24 <__eqdf2+0x3a>
   14f3a:	4305                	li	t1,1
   14f3c:	ffee94e3          	bne	t4,t5,14f24 <__eqdf2+0x3a>
   14f40:	4301                	li	t1,0
   14f42:	fed581e3          	beq	a1,a3,14f24 <__eqdf2+0x3a>
   14f46:	4305                	li	t1,1
   14f48:	ff71                	bnez	a4,14f24 <__eqdf2+0x3a>
   14f4a:	00ae6533          	or	a0,t3,a0
   14f4e:	00a03333          	snez	t1,a0
   14f52:	bfc9                	j	14f24 <__eqdf2+0x3a>

00014f54 <__ledf2>:
__ltdf2():
   14f54:	0145d713          	srli	a4,a1,0x14
   14f58:	001007b7          	lui	a5,0x100
   14f5c:	17fd                	addi	a5,a5,-1
   14f5e:	0146d813          	srli	a6,a3,0x14
   14f62:	7ff77713          	andi	a4,a4,2047
   14f66:	7ff00893          	li	a7,2047
   14f6a:	00b7fe33          	and	t3,a5,a1
   14f6e:	8eaa                	mv	t4,a0
   14f70:	8ff5                	and	a5,a5,a3
   14f72:	81fd                	srli	a1,a1,0x1f
   14f74:	8f32                	mv	t5,a2
   14f76:	7ff87813          	andi	a6,a6,2047
   14f7a:	82fd                	srli	a3,a3,0x1f
   14f7c:	03170e63          	beq	a4,a7,14fb8 <__ledf2+0x64>
   14f80:	01180d63          	beq	a6,a7,14f9a <__ledf2+0x46>
   14f84:	e329                	bnez	a4,14fc6 <__ledf2+0x72>
   14f86:	00ae68b3          	or	a7,t3,a0
   14f8a:	00081f63          	bnez	a6,14fa8 <__ledf2+0x54>
   14f8e:	8e5d                	or	a2,a2,a5
   14f90:	ee01                	bnez	a2,14fa8 <__ledf2+0x54>
   14f92:	4301                	li	t1,0
   14f94:	04088c63          	beqz	a7,14fec <__ledf2+0x98>
   14f98:	a821                	j	14fb0 <__ledf2+0x5c>
   14f9a:	00c7e8b3          	or	a7,a5,a2
   14f9e:	4309                	li	t1,2
   14fa0:	04089663          	bnez	a7,14fec <__ledf2+0x98>
   14fa4:	d36d                	beqz	a4,14f86 <__ledf2+0x32>
   14fa6:	a005                	j	14fc6 <__ledf2+0x72>
   14fa8:	04088463          	beqz	a7,14ff0 <__ledf2+0x9c>
   14fac:	02d58563          	beq	a1,a3,14fd6 <__ledf2+0x82>
   14fb0:	4305                	li	t1,1
   14fb2:	cd8d                	beqz	a1,14fec <__ledf2+0x98>
   14fb4:	537d                	li	t1,-1
   14fb6:	a81d                	j	14fec <__ledf2+0x98>
   14fb8:	00ae68b3          	or	a7,t3,a0
   14fbc:	4309                	li	t1,2
   14fbe:	02089763          	bnez	a7,14fec <__ledf2+0x98>
   14fc2:	02e80a63          	beq	a6,a4,14ff6 <__ledf2+0xa2>
   14fc6:	00081463          	bnez	a6,14fce <__ledf2+0x7a>
   14fca:	8e5d                	or	a2,a2,a5
   14fcc:	d275                	beqz	a2,14fb0 <__ledf2+0x5c>
   14fce:	fed591e3          	bne	a1,a3,14fb0 <__ledf2+0x5c>
   14fd2:	fce84fe3          	blt	a6,a4,14fb0 <__ledf2+0x5c>
   14fd6:	01074963          	blt	a4,a6,14fe8 <__ledf2+0x94>
   14fda:	fdc7ebe3          	bltu	a5,t3,14fb0 <__ledf2+0x5c>
   14fde:	00fe0f63          	beq	t3,a5,14ffc <__ledf2+0xa8>
   14fe2:	4301                	li	t1,0
   14fe4:	00fe7463          	bgeu	t3,a5,14fec <__ledf2+0x98>
   14fe8:	d5f1                	beqz	a1,14fb4 <__ledf2+0x60>
   14fea:	4305                	li	t1,1
   14fec:	851a                	mv	a0,t1
   14fee:	8082                	ret
   14ff0:	feed                	bnez	a3,14fea <__ledf2+0x96>
   14ff2:	537d                	li	t1,-1
   14ff4:	bfe5                	j	14fec <__ledf2+0x98>
   14ff6:	8e5d                	or	a2,a2,a5
   14ff8:	da79                	beqz	a2,14fce <__ledf2+0x7a>
   14ffa:	bfcd                	j	14fec <__ledf2+0x98>
   14ffc:	fbdf6ae3          	bltu	t5,t4,14fb0 <__ledf2+0x5c>
   15000:	4301                	li	t1,0
   15002:	ffeef5e3          	bgeu	t4,t5,14fec <__ledf2+0x98>
   15006:	f1f5                	bnez	a1,14fea <__ledf2+0x96>
   15008:	b775                	j	14fb4 <__ledf2+0x60>

0001500a <__muldf3>:
__muldf3():
   1500a:	7139                	addi	sp,sp,-64
   1500c:	d84a                	sw	s2,48(sp)
   1500e:	0145d913          	srli	s2,a1,0x14
   15012:	d64e                	sw	s3,44(sp)
   15014:	d452                	sw	s4,40(sp)
   15016:	d256                	sw	s5,36(sp)
   15018:	00c59993          	slli	s3,a1,0xc
   1501c:	de06                	sw	ra,60(sp)
   1501e:	dc22                	sw	s0,56(sp)
   15020:	da26                	sw	s1,52(sp)
   15022:	d05a                	sw	s6,32(sp)
   15024:	ce5e                	sw	s7,28(sp)
   15026:	7ff97913          	andi	s2,s2,2047
   1502a:	8a2a                	mv	s4,a0
   1502c:	00c9d993          	srli	s3,s3,0xc
   15030:	01f5da93          	srli	s5,a1,0x1f
   15034:	0e090d63          	beqz	s2,1512e <__muldf3+0x124>
   15038:	7ff00793          	li	a5,2047
   1503c:	18f90a63          	beq	s2,a5,151d0 <__muldf3+0x1c6>
   15040:	01d55413          	srli	s0,a0,0x1d
   15044:	098e                	slli	s3,s3,0x3
   15046:	013469b3          	or	s3,s0,s3
   1504a:	00800437          	lui	s0,0x800
   1504e:	0089e433          	or	s0,s3,s0
   15052:	00351493          	slli	s1,a0,0x3
   15056:	c0190913          	addi	s2,s2,-1023
   1505a:	4981                	li	s3,0
   1505c:	4b81                	li	s7,0
   1505e:	0146d713          	srli	a4,a3,0x14
   15062:	00c69a13          	slli	s4,a3,0xc
   15066:	7ff77713          	andi	a4,a4,2047
   1506a:	85b2                	mv	a1,a2
   1506c:	00ca5a13          	srli	s4,s4,0xc
   15070:	01f6db13          	srli	s6,a3,0x1f
   15074:	10070d63          	beqz	a4,1518e <__muldf3+0x184>
   15078:	7ff00793          	li	a5,2047
   1507c:	04f70363          	beq	a4,a5,150c2 <__muldf3+0xb8>
   15080:	01d65793          	srli	a5,a2,0x1d
   15084:	0a0e                	slli	s4,s4,0x3
   15086:	0147ea33          	or	s4,a5,s4
   1508a:	c0170713          	addi	a4,a4,-1023
   1508e:	008007b7          	lui	a5,0x800
   15092:	00fa67b3          	or	a5,s4,a5
   15096:	00361593          	slli	a1,a2,0x3
   1509a:	993a                	add	s2,s2,a4
   1509c:	4881                	li	a7,0
   1509e:	016ac733          	xor	a4,s5,s6
   150a2:	46bd                	li	a3,15
   150a4:	853a                	mv	a0,a4
   150a6:	00190813          	addi	a6,s2,1
   150aa:	1736ec63          	bltu	a3,s3,15222 <__muldf3+0x218>
   150ae:	00001617          	auipc	a2,0x1
   150b2:	32260613          	addi	a2,a2,802 # 163d0 <strlen+0x45e>
   150b6:	098a                	slli	s3,s3,0x2
   150b8:	99b2                	add	s3,s3,a2
   150ba:	0009a683          	lw	a3,0(s3)
   150be:	96b2                	add	a3,a3,a2
   150c0:	8682                	jr	a3
   150c2:	00ca67b3          	or	a5,s4,a2
   150c6:	7ff90913          	addi	s2,s2,2047
   150ca:	12079d63          	bnez	a5,15204 <__muldf3+0x1fa>
   150ce:	0029e993          	ori	s3,s3,2
   150d2:	4581                	li	a1,0
   150d4:	4889                	li	a7,2
   150d6:	b7e1                	j	1509e <__muldf3+0x94>
   150d8:	4701                	li	a4,0
   150da:	7ff00793          	li	a5,2047
   150de:	00080437          	lui	s0,0x80
   150e2:	4481                	li	s1,0
   150e4:	0432                	slli	s0,s0,0xc
   150e6:	07d2                	slli	a5,a5,0x14
   150e8:	8031                	srli	s0,s0,0xc
   150ea:	077e                	slli	a4,a4,0x1f
   150ec:	8c5d                	or	s0,s0,a5
   150ee:	8c59                	or	s0,s0,a4
   150f0:	85a2                	mv	a1,s0
   150f2:	50f2                	lw	ra,60(sp)
   150f4:	5462                	lw	s0,56(sp)
   150f6:	8526                	mv	a0,s1
   150f8:	5942                	lw	s2,48(sp)
   150fa:	54d2                	lw	s1,52(sp)
   150fc:	59b2                	lw	s3,44(sp)
   150fe:	5a22                	lw	s4,40(sp)
   15100:	5a92                	lw	s5,36(sp)
   15102:	5b02                	lw	s6,32(sp)
   15104:	4bf2                	lw	s7,28(sp)
   15106:	6121                	addi	sp,sp,64
   15108:	8082                	ret
   1510a:	855a                	mv	a0,s6
   1510c:	843e                	mv	s0,a5
   1510e:	84ae                	mv	s1,a1
   15110:	8bc6                	mv	s7,a7
   15112:	4789                	li	a5,2
   15114:	10fb8163          	beq	s7,a5,15216 <__muldf3+0x20c>
   15118:	478d                	li	a5,3
   1511a:	fafb8fe3          	beq	s7,a5,150d8 <__muldf3+0xce>
   1511e:	4785                	li	a5,1
   15120:	872a                	mv	a4,a0
   15122:	3afb9663          	bne	s7,a5,154ce <__muldf3+0x4c4>
   15126:	4781                	li	a5,0
   15128:	4401                	li	s0,0
   1512a:	4481                	li	s1,0
   1512c:	bf65                	j	150e4 <__muldf3+0xda>
   1512e:	00a9e433          	or	s0,s3,a0
   15132:	c461                	beqz	s0,151fa <__muldf3+0x1f0>
   15134:	c636                	sw	a3,12(sp)
   15136:	c432                	sw	a2,8(sp)
   15138:	2c098263          	beqz	s3,153fc <__muldf3+0x3f2>
   1513c:	854e                	mv	a0,s3
   1513e:	00001097          	auipc	ra,0x1
   15142:	dbe080e7          	jalr	-578(ra) # 15efc <__clzsi2>
   15146:	4622                	lw	a2,8(sp)
   15148:	46b2                	lw	a3,12(sp)
   1514a:	87aa                	mv	a5,a0
   1514c:	ff550713          	addi	a4,a0,-11
   15150:	4475                	li	s0,29
   15152:	ff878493          	addi	s1,a5,-8 # 7ffff8 <_data_lma+0x7e9ae8>
   15156:	8c19                	sub	s0,s0,a4
   15158:	009999b3          	sll	s3,s3,s1
   1515c:	008a5433          	srl	s0,s4,s0
   15160:	01346433          	or	s0,s0,s3
   15164:	009a14b3          	sll	s1,s4,s1
   15168:	0146d713          	srli	a4,a3,0x14
   1516c:	c0d00913          	li	s2,-1011
   15170:	00c69a13          	slli	s4,a3,0xc
   15174:	7ff77713          	andi	a4,a4,2047
   15178:	40f90933          	sub	s2,s2,a5
   1517c:	4981                	li	s3,0
   1517e:	4b81                	li	s7,0
   15180:	85b2                	mv	a1,a2
   15182:	00ca5a13          	srli	s4,s4,0xc
   15186:	01f6db13          	srli	s6,a3,0x1f
   1518a:	ee0717e3          	bnez	a4,15078 <__muldf3+0x6e>
   1518e:	00ca67b3          	or	a5,s4,a2
   15192:	cba1                	beqz	a5,151e2 <__muldf3+0x1d8>
   15194:	240a0163          	beqz	s4,153d6 <__muldf3+0x3cc>
   15198:	8552                	mv	a0,s4
   1519a:	c432                	sw	a2,8(sp)
   1519c:	00001097          	auipc	ra,0x1
   151a0:	d60080e7          	jalr	-672(ra) # 15efc <__clzsi2>
   151a4:	4622                	lw	a2,8(sp)
   151a6:	872a                	mv	a4,a0
   151a8:	ff550693          	addi	a3,a0,-11
   151ac:	47f5                	li	a5,29
   151ae:	ff870593          	addi	a1,a4,-8
   151b2:	8f95                	sub	a5,a5,a3
   151b4:	00ba1a33          	sll	s4,s4,a1
   151b8:	00f657b3          	srl	a5,a2,a5
   151bc:	0147e7b3          	or	a5,a5,s4
   151c0:	00b615b3          	sll	a1,a2,a1
   151c4:	40e90933          	sub	s2,s2,a4
   151c8:	c0d90913          	addi	s2,s2,-1011
   151cc:	4881                	li	a7,0
   151ce:	bdc1                	j	1509e <__muldf3+0x94>
   151d0:	00a9e433          	or	s0,s3,a0
   151d4:	ec01                	bnez	s0,151ec <__muldf3+0x1e2>
   151d6:	49a1                	li	s3,8
   151d8:	4481                	li	s1,0
   151da:	7ff00913          	li	s2,2047
   151de:	4b89                	li	s7,2
   151e0:	bdbd                	j	1505e <__muldf3+0x54>
   151e2:	0019e993          	ori	s3,s3,1
   151e6:	4581                	li	a1,0
   151e8:	4885                	li	a7,1
   151ea:	bd55                	j	1509e <__muldf3+0x94>
   151ec:	844e                	mv	s0,s3
   151ee:	84aa                	mv	s1,a0
   151f0:	49b1                	li	s3,12
   151f2:	7ff00913          	li	s2,2047
   151f6:	4b8d                	li	s7,3
   151f8:	b59d                	j	1505e <__muldf3+0x54>
   151fa:	4991                	li	s3,4
   151fc:	4481                	li	s1,0
   151fe:	4901                	li	s2,0
   15200:	4b85                	li	s7,1
   15202:	bdb1                	j	1505e <__muldf3+0x54>
   15204:	0039e993          	ori	s3,s3,3
   15208:	87d2                	mv	a5,s4
   1520a:	488d                	li	a7,3
   1520c:	bd49                	j	1509e <__muldf3+0x94>
   1520e:	4789                	li	a5,2
   15210:	8556                	mv	a0,s5
   15212:	f0fb93e3          	bne	s7,a5,15118 <__muldf3+0x10e>
   15216:	872a                	mv	a4,a0
   15218:	7ff00793          	li	a5,2047
   1521c:	4401                	li	s0,0
   1521e:	4481                	li	s1,0
   15220:	b5d1                	j	150e4 <__muldf3+0xda>
   15222:	6ec1                	lui	t4,0x10
   15224:	fffe8613          	addi	a2,t4,-1 # ffff <MCU_SECTORSIZE+0xefff>
   15228:	0104d693          	srli	a3,s1,0x10
   1522c:	0105de13          	srli	t3,a1,0x10
   15230:	8cf1                	and	s1,s1,a2
   15232:	8df1                	and	a1,a1,a2
   15234:	02958633          	mul	a2,a1,s1
   15238:	02b68333          	mul	t1,a3,a1
   1523c:	01065893          	srli	a7,a2,0x10
   15240:	029e0533          	mul	a0,t3,s1
   15244:	951a                	add	a0,a0,t1
   15246:	98aa                	add	a7,a7,a0
   15248:	03c682b3          	mul	t0,a3,t3
   1524c:	0068f363          	bgeu	a7,t1,15252 <__muldf3+0x248>
   15250:	92f6                	add	t0,t0,t4
   15252:	6fc1                	lui	t6,0x10
   15254:	ffff8313          	addi	t1,t6,-1 # ffff <MCU_SECTORSIZE+0xefff>
   15258:	0067f533          	and	a0,a5,t1
   1525c:	0107d393          	srli	t2,a5,0x10
   15260:	0068f7b3          	and	a5,a7,t1
   15264:	07c2                	slli	a5,a5,0x10
   15266:	00667333          	and	t1,a2,t1
   1526a:	933e                	add	t1,t1,a5
   1526c:	02950633          	mul	a2,a0,s1
   15270:	0108d893          	srli	a7,a7,0x10
   15274:	02a687b3          	mul	a5,a3,a0
   15278:	01065f13          	srli	t5,a2,0x10
   1527c:	029384b3          	mul	s1,t2,s1
   15280:	94be                	add	s1,s1,a5
   15282:	94fa                	add	s1,s1,t5
   15284:	02768eb3          	mul	t4,a3,t2
   15288:	00f4f363          	bgeu	s1,a5,1528e <__muldf3+0x284>
   1528c:	9efe                	add	t4,t4,t6
   1528e:	6a41                	lui	s4,0x10
   15290:	fffa0793          	addi	a5,s4,-1 # ffff <MCU_SECTORSIZE+0xefff>
   15294:	01045f93          	srli	t6,s0,0x10
   15298:	00f476b3          	and	a3,s0,a5
   1529c:	00f4f9b3          	and	s3,s1,a5
   152a0:	8e7d                	and	a2,a2,a5
   152a2:	80c1                	srli	s1,s1,0x10
   152a4:	02d58433          	mul	s0,a1,a3
   152a8:	09c2                	slli	s3,s3,0x10
   152aa:	01d48f33          	add	t5,s1,t4
   152ae:	99b2                	add	s3,s3,a2
   152b0:	98ce                	add	a7,a7,s3
   152b2:	02de07b3          	mul	a5,t3,a3
   152b6:	01045e93          	srli	t4,s0,0x10
   152ba:	02bf85b3          	mul	a1,t6,a1
   152be:	97ae                	add	a5,a5,a1
   152c0:	9ebe                	add	t4,t4,a5
   152c2:	03fe0e33          	mul	t3,t3,t6
   152c6:	00bef363          	bgeu	t4,a1,152cc <__muldf3+0x2c2>
   152ca:	9e52                	add	t3,t3,s4
   152cc:	67c1                	lui	a5,0x10
   152ce:	fff78593          	addi	a1,a5,-1 # ffff <MCU_SECTORSIZE+0xefff>
   152d2:	00bef633          	and	a2,t4,a1
   152d6:	8c6d                	and	s0,s0,a1
   152d8:	0642                	slli	a2,a2,0x10
   152da:	9622                	add	a2,a2,s0
   152dc:	010ede93          	srli	t4,t4,0x10
   152e0:	02d505b3          	mul	a1,a0,a3
   152e4:	9e76                	add	t3,t3,t4
   152e6:	02af8533          	mul	a0,t6,a0
   152ea:	0105d413          	srli	s0,a1,0x10
   152ee:	02d386b3          	mul	a3,t2,a3
   152f2:	96aa                	add	a3,a3,a0
   152f4:	96a2                	add	a3,a3,s0
   152f6:	03f38fb3          	mul	t6,t2,t6
   152fa:	00a6f363          	bgeu	a3,a0,15300 <__muldf3+0x2f6>
   152fe:	9fbe                	add	t6,t6,a5
   15300:	6541                	lui	a0,0x10
   15302:	157d                	addi	a0,a0,-1
   15304:	00a6f7b3          	and	a5,a3,a0
   15308:	07c2                	slli	a5,a5,0x10
   1530a:	8d6d                	and	a0,a0,a1
   1530c:	97aa                	add	a5,a5,a0
   1530e:	005885b3          	add	a1,a7,t0
   15312:	0135b9b3          	sltu	s3,a1,s3
   15316:	97fa                	add	a5,a5,t5
   15318:	95b2                	add	a1,a1,a2
   1531a:	01378433          	add	s0,a5,s3
   1531e:	00c5b633          	sltu	a2,a1,a2
   15322:	01c40eb3          	add	t4,s0,t3
   15326:	00ce8533          	add	a0,t4,a2
   1532a:	01343433          	sltu	s0,s0,s3
   1532e:	01e7b7b3          	sltu	a5,a5,t5
   15332:	8fc1                	or	a5,a5,s0
   15334:	01cebe33          	sltu	t3,t4,t3
   15338:	0106d413          	srli	s0,a3,0x10
   1533c:	00c53633          	sltu	a2,a0,a2
   15340:	943e                	add	s0,s0,a5
   15342:	00ce6633          	or	a2,t3,a2
   15346:	00959493          	slli	s1,a1,0x9
   1534a:	9432                	add	s0,s0,a2
   1534c:	947e                	add	s0,s0,t6
   1534e:	0064e4b3          	or	s1,s1,t1
   15352:	0426                	slli	s0,s0,0x9
   15354:	01755693          	srli	a3,a0,0x17
   15358:	009034b3          	snez	s1,s1
   1535c:	81dd                	srli	a1,a1,0x17
   1535e:	00951793          	slli	a5,a0,0x9
   15362:	8ccd                	or	s1,s1,a1
   15364:	8c55                	or	s0,s0,a3
   15366:	8cdd                	or	s1,s1,a5
   15368:	00741793          	slli	a5,s0,0x7
   1536c:	0007db63          	bgez	a5,15382 <__muldf3+0x378>
   15370:	0014d793          	srli	a5,s1,0x1
   15374:	8885                	andi	s1,s1,1
   15376:	01f41693          	slli	a3,s0,0x1f
   1537a:	8cdd                	or	s1,s1,a5
   1537c:	8cd5                	or	s1,s1,a3
   1537e:	8005                	srli	s0,s0,0x1
   15380:	8942                	mv	s2,a6
   15382:	3ff90793          	addi	a5,s2,1023
   15386:	08f05d63          	blez	a5,15420 <__muldf3+0x416>
   1538a:	0074f693          	andi	a3,s1,7
   1538e:	ce81                	beqz	a3,153a6 <__muldf3+0x39c>
   15390:	00f4f693          	andi	a3,s1,15
   15394:	4611                	li	a2,4
   15396:	00c68863          	beq	a3,a2,153a6 <__muldf3+0x39c>
   1539a:	00448693          	addi	a3,s1,4
   1539e:	0096b4b3          	sltu	s1,a3,s1
   153a2:	9426                	add	s0,s0,s1
   153a4:	84b6                	mv	s1,a3
   153a6:	00741693          	slli	a3,s0,0x7
   153aa:	0006d863          	bgez	a3,153ba <__muldf3+0x3b0>
   153ae:	ff0007b7          	lui	a5,0xff000
   153b2:	17fd                	addi	a5,a5,-1
   153b4:	8c7d                	and	s0,s0,a5
   153b6:	40090793          	addi	a5,s2,1024
   153ba:	7fe00693          	li	a3,2046
   153be:	10f6c363          	blt	a3,a5,154c4 <__muldf3+0x4ba>
   153c2:	0034d693          	srli	a3,s1,0x3
   153c6:	01d41493          	slli	s1,s0,0x1d
   153ca:	0426                	slli	s0,s0,0x9
   153cc:	8cd5                	or	s1,s1,a3
   153ce:	8031                	srli	s0,s0,0xc
   153d0:	7ff7f793          	andi	a5,a5,2047
   153d4:	bb01                	j	150e4 <__muldf3+0xda>
   153d6:	8532                	mv	a0,a2
   153d8:	c432                	sw	a2,8(sp)
   153da:	00001097          	auipc	ra,0x1
   153de:	b22080e7          	jalr	-1246(ra) # 15efc <__clzsi2>
   153e2:	01550693          	addi	a3,a0,21 # 10015 <MCU_SECTORSIZE+0xf015>
   153e6:	47f1                	li	a5,28
   153e8:	02050713          	addi	a4,a0,32
   153ec:	4622                	lw	a2,8(sp)
   153ee:	dad7dfe3          	bge	a5,a3,151ac <__muldf3+0x1a2>
   153f2:	1561                	addi	a0,a0,-8
   153f4:	00a617b3          	sll	a5,a2,a0
   153f8:	4581                	li	a1,0
   153fa:	b3e9                	j	151c4 <__muldf3+0x1ba>
   153fc:	00001097          	auipc	ra,0x1
   15400:	b00080e7          	jalr	-1280(ra) # 15efc <__clzsi2>
   15404:	01550713          	addi	a4,a0,21
   15408:	45f1                	li	a1,28
   1540a:	02050793          	addi	a5,a0,32
   1540e:	4622                	lw	a2,8(sp)
   15410:	46b2                	lw	a3,12(sp)
   15412:	d2e5dfe3          	bge	a1,a4,15150 <__muldf3+0x146>
   15416:	1561                	addi	a0,a0,-8
   15418:	00aa1433          	sll	s0,s4,a0
   1541c:	4481                	li	s1,0
   1541e:	b3a9                	j	15168 <__muldf3+0x15e>
   15420:	4685                	li	a3,1
   15422:	8e9d                	sub	a3,a3,a5
   15424:	e7b1                	bnez	a5,15470 <__muldf3+0x466>
   15426:	41e90913          	addi	s2,s2,1054
   1542a:	012497b3          	sll	a5,s1,s2
   1542e:	00d4d4b3          	srl	s1,s1,a3
   15432:	01241933          	sll	s2,s0,s2
   15436:	00f037b3          	snez	a5,a5
   1543a:	009964b3          	or	s1,s2,s1
   1543e:	8cdd                	or	s1,s1,a5
   15440:	0074f793          	andi	a5,s1,7
   15444:	00d456b3          	srl	a3,s0,a3
   15448:	cf81                	beqz	a5,15460 <__muldf3+0x456>
   1544a:	00f4f793          	andi	a5,s1,15
   1544e:	4611                	li	a2,4
   15450:	00c78863          	beq	a5,a2,15460 <__muldf3+0x456>
   15454:	00448793          	addi	a5,s1,4
   15458:	0097b4b3          	sltu	s1,a5,s1
   1545c:	96a6                	add	a3,a3,s1
   1545e:	84be                	mv	s1,a5
   15460:	00869793          	slli	a5,a3,0x8
   15464:	0407d863          	bgez	a5,154b4 <__muldf3+0x4aa>
   15468:	4785                	li	a5,1
   1546a:	4401                	li	s0,0
   1546c:	4481                	li	s1,0
   1546e:	b99d                	j	150e4 <__muldf3+0xda>
   15470:	03800613          	li	a2,56
   15474:	cad649e3          	blt	a2,a3,15126 <__muldf3+0x11c>
   15478:	467d                	li	a2,31
   1547a:	fad656e3          	bge	a2,a3,15426 <__muldf3+0x41c>
   1547e:	5605                	li	a2,-31
   15480:	40f607b3          	sub	a5,a2,a5
   15484:	02000593          	li	a1,32
   15488:	00f45633          	srl	a2,s0,a5
   1548c:	00b68763          	beq	a3,a1,1549a <__muldf3+0x490>
   15490:	43e90913          	addi	s2,s2,1086
   15494:	012417b3          	sll	a5,s0,s2
   15498:	8cdd                	or	s1,s1,a5
   1549a:	009034b3          	snez	s1,s1
   1549e:	8cd1                	or	s1,s1,a2
   154a0:	0074f693          	andi	a3,s1,7
   154a4:	4401                	li	s0,0
   154a6:	ca99                	beqz	a3,154bc <__muldf3+0x4b2>
   154a8:	00f4f793          	andi	a5,s1,15
   154ac:	4611                	li	a2,4
   154ae:	4681                	li	a3,0
   154b0:	fac792e3          	bne	a5,a2,15454 <__muldf3+0x44a>
   154b4:	00969413          	slli	s0,a3,0x9
   154b8:	8031                	srli	s0,s0,0xc
   154ba:	06f6                	slli	a3,a3,0x1d
   154bc:	808d                	srli	s1,s1,0x3
   154be:	8cd5                	or	s1,s1,a3
   154c0:	4781                	li	a5,0
   154c2:	b10d                	j	150e4 <__muldf3+0xda>
   154c4:	7ff00793          	li	a5,2047
   154c8:	4401                	li	s0,0
   154ca:	4481                	li	s1,0
   154cc:	b921                	j	150e4 <__muldf3+0xda>
   154ce:	8942                	mv	s2,a6
   154d0:	bd4d                	j	15382 <__muldf3+0x378>

000154d2 <__subdf3>:
__subdf3():
   154d2:	00100737          	lui	a4,0x100
   154d6:	177d                	addi	a4,a4,-1
   154d8:	1101                	addi	sp,sp,-32
   154da:	00b77333          	and	t1,a4,a1
   154de:	0146d893          	srli	a7,a3,0x14
   154e2:	8f75                	and	a4,a4,a3
   154e4:	01d65e93          	srli	t4,a2,0x1d
   154e8:	cc22                	sw	s0,24(sp)
   154ea:	ca26                	sw	s1,20(sp)
   154ec:	030e                	slli	t1,t1,0x3
   154ee:	0145d493          	srli	s1,a1,0x14
   154f2:	01d55793          	srli	a5,a0,0x1d
   154f6:	070e                	slli	a4,a4,0x3
   154f8:	ce06                	sw	ra,28(sp)
   154fa:	c84a                	sw	s2,16(sp)
   154fc:	c64e                	sw	s3,12(sp)
   154fe:	7ff8f893          	andi	a7,a7,2047
   15502:	7ff00e13          	li	t3,2047
   15506:	00eee733          	or	a4,t4,a4
   1550a:	7ff4f493          	andi	s1,s1,2047
   1550e:	01f5d413          	srli	s0,a1,0x1f
   15512:	0067e333          	or	t1,a5,t1
   15516:	00351f13          	slli	t5,a0,0x3
   1551a:	82fd                	srli	a3,a3,0x1f
   1551c:	00361e93          	slli	t4,a2,0x3
   15520:	19c88263          	beq	a7,t3,156a4 <__subdf3+0x1d2>
   15524:	0016c693          	xori	a3,a3,1
   15528:	411485b3          	sub	a1,s1,a7
   1552c:	12d40763          	beq	s0,a3,1565a <__subdf3+0x188>
   15530:	18b05363          	blez	a1,156b6 <__subdf3+0x1e4>
   15534:	1a088d63          	beqz	a7,156ee <__subdf3+0x21c>
   15538:	008007b7          	lui	a5,0x800
   1553c:	8f5d                	or	a4,a4,a5
   1553e:	59c48563          	beq	s1,t3,15ac8 <__subdf3+0x5f6>
   15542:	03800793          	li	a5,56
   15546:	34b7c863          	blt	a5,a1,15896 <__subdf3+0x3c4>
   1554a:	47fd                	li	a5,31
   1554c:	48b7c963          	blt	a5,a1,159de <__subdf3+0x50c>
   15550:	02000793          	li	a5,32
   15554:	8f8d                	sub	a5,a5,a1
   15556:	00bed9b3          	srl	s3,t4,a1
   1555a:	00f71833          	sll	a6,a4,a5
   1555e:	00fe9eb3          	sll	t4,t4,a5
   15562:	01386833          	or	a6,a6,s3
   15566:	00b75733          	srl	a4,a4,a1
   1556a:	01d039b3          	snez	s3,t4
   1556e:	01386833          	or	a6,a6,s3
   15572:	40e30333          	sub	t1,t1,a4
   15576:	410f09b3          	sub	s3,t5,a6
   1557a:	013f37b3          	sltu	a5,t5,s3
   1557e:	40f30633          	sub	a2,t1,a5
   15582:	00861793          	slli	a5,a2,0x8
   15586:	2407d563          	bgez	a5,157d0 <__subdf3+0x2fe>
   1558a:	00800937          	lui	s2,0x800
   1558e:	197d                	addi	s2,s2,-1
   15590:	01267933          	and	s2,a2,s2
   15594:	2e090163          	beqz	s2,15876 <__subdf3+0x3a4>
   15598:	854a                	mv	a0,s2
   1559a:	00001097          	auipc	ra,0x1
   1559e:	962080e7          	jalr	-1694(ra) # 15efc <__clzsi2>
   155a2:	ff850713          	addi	a4,a0,-8
   155a6:	02000793          	li	a5,32
   155aa:	8f99                	sub	a5,a5,a4
   155ac:	00f9d7b3          	srl	a5,s3,a5
   155b0:	00e91633          	sll	a2,s2,a4
   155b4:	8fd1                	or	a5,a5,a2
   155b6:	00e999b3          	sll	s3,s3,a4
   155ba:	2a974463          	blt	a4,s1,15862 <__subdf3+0x390>
   155be:	8f05                	sub	a4,a4,s1
   155c0:	00170613          	addi	a2,a4,1 # 100001 <_data_lma+0xe9af1>
   155c4:	46fd                	li	a3,31
   155c6:	3ac6c763          	blt	a3,a2,15974 <__subdf3+0x4a2>
   155ca:	02000713          	li	a4,32
   155ce:	8f11                	sub	a4,a4,a2
   155d0:	00c9d6b3          	srl	a3,s3,a2
   155d4:	00e99833          	sll	a6,s3,a4
   155d8:	00e79733          	sll	a4,a5,a4
   155dc:	8f55                	or	a4,a4,a3
   155de:	01003833          	snez	a6,a6
   155e2:	010769b3          	or	s3,a4,a6
   155e6:	00c7d633          	srl	a2,a5,a2
   155ea:	4481                	li	s1,0
   155ec:	0079f793          	andi	a5,s3,7
   155f0:	cf81                	beqz	a5,15608 <__subdf3+0x136>
   155f2:	00f9f693          	andi	a3,s3,15
   155f6:	4791                	li	a5,4
   155f8:	00f68863          	beq	a3,a5,15608 <__subdf3+0x136>
   155fc:	00498693          	addi	a3,s3,4
   15600:	0136b833          	sltu	a6,a3,s3
   15604:	9642                	add	a2,a2,a6
   15606:	89b6                	mv	s3,a3
   15608:	00861793          	slli	a5,a2,0x8
   1560c:	1c07d663          	bgez	a5,157d8 <__subdf3+0x306>
   15610:	00148713          	addi	a4,s1,1
   15614:	7ff00793          	li	a5,2047
   15618:	8805                	andi	s0,s0,1
   1561a:	20f70663          	beq	a4,a5,15826 <__subdf3+0x354>
   1561e:	ff8007b7          	lui	a5,0xff800
   15622:	17fd                	addi	a5,a5,-1
   15624:	8ff1                	and	a5,a5,a2
   15626:	01d79813          	slli	a6,a5,0x1d
   1562a:	0039d993          	srli	s3,s3,0x3
   1562e:	07a6                	slli	a5,a5,0x9
   15630:	01386833          	or	a6,a6,s3
   15634:	83b1                	srli	a5,a5,0xc
   15636:	7ff77713          	andi	a4,a4,2047
   1563a:	00c79693          	slli	a3,a5,0xc
   1563e:	0752                	slli	a4,a4,0x14
   15640:	82b1                	srli	a3,a3,0xc
   15642:	047e                	slli	s0,s0,0x1f
   15644:	8ed9                	or	a3,a3,a4
   15646:	8ec1                	or	a3,a3,s0
   15648:	40f2                	lw	ra,28(sp)
   1564a:	4462                	lw	s0,24(sp)
   1564c:	44d2                	lw	s1,20(sp)
   1564e:	4942                	lw	s2,16(sp)
   15650:	49b2                	lw	s3,12(sp)
   15652:	8542                	mv	a0,a6
   15654:	85b6                	mv	a1,a3
   15656:	6105                	addi	sp,sp,32
   15658:	8082                	ret
   1565a:	0ab05663          	blez	a1,15706 <__subdf3+0x234>
   1565e:	12088a63          	beqz	a7,15792 <__subdf3+0x2c0>
   15662:	008007b7          	lui	a5,0x800
   15666:	8f5d                	or	a4,a4,a5
   15668:	2dc48963          	beq	s1,t3,1593a <__subdf3+0x468>
   1566c:	03800793          	li	a5,56
   15670:	18b7c763          	blt	a5,a1,157fe <__subdf3+0x32c>
   15674:	47fd                	li	a5,31
   15676:	3cb7d463          	bge	a5,a1,15a3e <__subdf3+0x56c>
   1567a:	fe058813          	addi	a6,a1,-32
   1567e:	02000793          	li	a5,32
   15682:	010759b3          	srl	s3,a4,a6
   15686:	00f58a63          	beq	a1,a5,1569a <__subdf3+0x1c8>
   1568a:	04000793          	li	a5,64
   1568e:	40b785b3          	sub	a1,a5,a1
   15692:	00b71733          	sll	a4,a4,a1
   15696:	00eeeeb3          	or	t4,t4,a4
   1569a:	01d03833          	snez	a6,t4
   1569e:	01386833          	or	a6,a6,s3
   156a2:	a295                	j	15806 <__subdf3+0x334>
   156a4:	01d767b3          	or	a5,a4,t4
   156a8:	80148593          	addi	a1,s1,-2047
   156ac:	e399                	bnez	a5,156b2 <__subdf3+0x1e0>
   156ae:	0016c693          	xori	a3,a3,1
   156b2:	04d40a63          	beq	s0,a3,15706 <__subdf3+0x234>
   156b6:	e1d1                	bnez	a1,1573a <__subdf3+0x268>
   156b8:	00148793          	addi	a5,s1,1
   156bc:	7fe7f793          	andi	a5,a5,2046
   156c0:	1e079b63          	bnez	a5,158b6 <__subdf3+0x3e4>
   156c4:	01e367b3          	or	a5,t1,t5
   156c8:	01d76833          	or	a6,a4,t4
   156cc:	16049263          	bnez	s1,15830 <__subdf3+0x35e>
   156d0:	3c078463          	beqz	a5,15a98 <__subdf3+0x5c6>
   156d4:	42081863          	bnez	a6,15b04 <__subdf3+0x632>
   156d8:	00351813          	slli	a6,a0,0x3
   156dc:	01d31693          	slli	a3,t1,0x1d
   156e0:	00385813          	srli	a6,a6,0x3
   156e4:	0106e833          	or	a6,a3,a6
   156e8:	00335793          	srli	a5,t1,0x3
   156ec:	a219                	j	157f2 <__subdf3+0x320>
   156ee:	01d767b3          	or	a5,a4,t4
   156f2:	1a078763          	beqz	a5,158a0 <__subdf3+0x3ce>
   156f6:	fff58793          	addi	a5,a1,-1
   156fa:	3a078d63          	beqz	a5,15ab4 <__subdf3+0x5e2>
   156fe:	23c58e63          	beq	a1,t3,1593a <__subdf3+0x468>
   15702:	85be                	mv	a1,a5
   15704:	bd3d                	j	15542 <__subdf3+0x70>
   15706:	1c059b63          	bnez	a1,158dc <__subdf3+0x40a>
   1570a:	00148693          	addi	a3,s1,1
   1570e:	7fe6f793          	andi	a5,a3,2046
   15712:	efc1                	bnez	a5,157aa <__subdf3+0x2d8>
   15714:	01e367b3          	or	a5,t1,t5
   15718:	36049263          	bnez	s1,15a7c <__subdf3+0x5aa>
   1571c:	44078f63          	beqz	a5,15b7a <__subdf3+0x6a8>
   15720:	01d767b3          	or	a5,a4,t4
   15724:	46079663          	bnez	a5,15b90 <__subdf3+0x6be>
   15728:	050e                	slli	a0,a0,0x3
   1572a:	01d31813          	slli	a6,t1,0x1d
   1572e:	810d                	srli	a0,a0,0x3
   15730:	00a86833          	or	a6,a6,a0
   15734:	00335793          	srli	a5,t1,0x3
   15738:	a86d                	j	157f2 <__subdf3+0x320>
   1573a:	409885b3          	sub	a1,a7,s1
   1573e:	20049963          	bnez	s1,15950 <__subdf3+0x47e>
   15742:	01e367b3          	or	a5,t1,t5
   15746:	30078f63          	beqz	a5,15a64 <__subdf3+0x592>
   1574a:	fff58793          	addi	a5,a1,-1
   1574e:	40078b63          	beqz	a5,15b64 <__subdf3+0x692>
   15752:	7ff00513          	li	a0,2047
   15756:	20a58563          	beq	a1,a0,15960 <__subdf3+0x48e>
   1575a:	85be                	mv	a1,a5
   1575c:	03800793          	li	a5,56
   15760:	2ab7c463          	blt	a5,a1,15a08 <__subdf3+0x536>
   15764:	47fd                	li	a5,31
   15766:	3cb7ca63          	blt	a5,a1,15b3a <__subdf3+0x668>
   1576a:	02000793          	li	a5,32
   1576e:	8f8d                	sub	a5,a5,a1
   15770:	00f31833          	sll	a6,t1,a5
   15774:	00bf5633          	srl	a2,t5,a1
   15778:	00ff17b3          	sll	a5,t5,a5
   1577c:	00c86833          	or	a6,a6,a2
   15780:	00f039b3          	snez	s3,a5
   15784:	00b35333          	srl	t1,t1,a1
   15788:	01386833          	or	a6,a6,s3
   1578c:	40670733          	sub	a4,a4,t1
   15790:	a441                	j	15a10 <__subdf3+0x53e>
   15792:	01d767b3          	or	a5,a4,t4
   15796:	10078563          	beqz	a5,158a0 <__subdf3+0x3ce>
   1579a:	fff58793          	addi	a5,a1,-1
   1579e:	20078163          	beqz	a5,159a0 <__subdf3+0x4ce>
   157a2:	2fc58263          	beq	a1,t3,15a86 <__subdf3+0x5b4>
   157a6:	85be                	mv	a1,a5
   157a8:	b5d1                	j	1566c <__subdf3+0x19a>
   157aa:	7ff00793          	li	a5,2047
   157ae:	06f68b63          	beq	a3,a5,15824 <__subdf3+0x352>
   157b2:	9efa                	add	t4,t4,t5
   157b4:	01eeb633          	sltu	a2,t4,t5
   157b8:	00e307b3          	add	a5,t1,a4
   157bc:	97b2                	add	a5,a5,a2
   157be:	01f79813          	slli	a6,a5,0x1f
   157c2:	001ede93          	srli	t4,t4,0x1
   157c6:	01d869b3          	or	s3,a6,t4
   157ca:	0017d613          	srli	a2,a5,0x1
   157ce:	84b6                	mv	s1,a3
   157d0:	0079f793          	andi	a5,s3,7
   157d4:	e0079fe3          	bnez	a5,155f2 <__subdf3+0x120>
   157d8:	01d61793          	slli	a5,a2,0x1d
   157dc:	0039d813          	srli	a6,s3,0x3
   157e0:	00f86833          	or	a6,a6,a5
   157e4:	85a6                	mv	a1,s1
   157e6:	00365793          	srli	a5,a2,0x3
   157ea:	7ff00713          	li	a4,2047
   157ee:	06e58063          	beq	a1,a4,1584e <__subdf3+0x37c>
   157f2:	07b2                	slli	a5,a5,0xc
   157f4:	83b1                	srli	a5,a5,0xc
   157f6:	7ff5f713          	andi	a4,a1,2047
   157fa:	8805                	andi	s0,s0,1
   157fc:	bd3d                	j	1563a <__subdf3+0x168>
   157fe:	01d76733          	or	a4,a4,t4
   15802:	00e03833          	snez	a6,a4
   15806:	01e809b3          	add	s3,a6,t5
   1580a:	01e9b7b3          	sltu	a5,s3,t5
   1580e:	00678633          	add	a2,a5,t1
   15812:	00861793          	slli	a5,a2,0x8
   15816:	fa07dde3          	bgez	a5,157d0 <__subdf3+0x2fe>
   1581a:	0485                	addi	s1,s1,1
   1581c:	7ff00793          	li	a5,2047
   15820:	18f49e63          	bne	s1,a5,159bc <__subdf3+0x4ea>
   15824:	8805                	andi	s0,s0,1
   15826:	7ff00713          	li	a4,2047
   1582a:	4781                	li	a5,0
   1582c:	4801                	li	a6,0
   1582e:	b531                	j	1563a <__subdf3+0x168>
   15830:	10079363          	bnez	a5,15936 <__subdf3+0x464>
   15834:	3c080363          	beqz	a6,15bfa <__subdf3+0x728>
   15838:	00361813          	slli	a6,a2,0x3
   1583c:	01d71793          	slli	a5,a4,0x1d
   15840:	00385813          	srli	a6,a6,0x3
   15844:	00f86833          	or	a6,a6,a5
   15848:	8436                	mv	s0,a3
   1584a:	00375793          	srli	a5,a4,0x3
   1584e:	00f867b3          	or	a5,a6,a5
   15852:	dbe9                	beqz	a5,15824 <__subdf3+0x352>
   15854:	4401                	li	s0,0
   15856:	7ff00713          	li	a4,2047
   1585a:	000807b7          	lui	a5,0x80
   1585e:	4801                	li	a6,0
   15860:	bbe9                	j	1563a <__subdf3+0x168>
   15862:	ff800637          	lui	a2,0xff800
   15866:	167d                	addi	a2,a2,-1
   15868:	8e7d                	and	a2,a2,a5
   1586a:	0079f793          	andi	a5,s3,7
   1586e:	8c99                	sub	s1,s1,a4
   15870:	d80791e3          	bnez	a5,155f2 <__subdf3+0x120>
   15874:	b795                	j	157d8 <__subdf3+0x306>
   15876:	854e                	mv	a0,s3
   15878:	00000097          	auipc	ra,0x0
   1587c:	684080e7          	jalr	1668(ra) # 15efc <__clzsi2>
   15880:	01850713          	addi	a4,a0,24
   15884:	47fd                	li	a5,31
   15886:	d2e7d0e3          	bge	a5,a4,155a6 <__subdf3+0xd4>
   1588a:	ff850613          	addi	a2,a0,-8
   1588e:	00c997b3          	sll	a5,s3,a2
   15892:	4981                	li	s3,0
   15894:	b31d                	j	155ba <__subdf3+0xe8>
   15896:	01d76833          	or	a6,a4,t4
   1589a:	01003833          	snez	a6,a6
   1589e:	b9e1                	j	15576 <__subdf3+0xa4>
   158a0:	00351813          	slli	a6,a0,0x3
   158a4:	01d31793          	slli	a5,t1,0x1d
   158a8:	00385813          	srli	a6,a6,0x3
   158ac:	00f86833          	or	a6,a6,a5
   158b0:	00335793          	srli	a5,t1,0x3
   158b4:	bf1d                	j	157ea <__subdf3+0x318>
   158b6:	41df09b3          	sub	s3,t5,t4
   158ba:	40e30933          	sub	s2,t1,a4
   158be:	013f3633          	sltu	a2,t5,s3
   158c2:	40c90933          	sub	s2,s2,a2
   158c6:	00891793          	slli	a5,s2,0x8
   158ca:	2007ca63          	bltz	a5,15ade <__subdf3+0x60c>
   158ce:	0129e833          	or	a6,s3,s2
   158d2:	cc0811e3          	bnez	a6,15594 <__subdf3+0xc2>
   158d6:	4781                	li	a5,0
   158d8:	4401                	li	s0,0
   158da:	bf21                	j	157f2 <__subdf3+0x320>
   158dc:	409885b3          	sub	a1,a7,s1
   158e0:	14048163          	beqz	s1,15a22 <__subdf3+0x550>
   158e4:	008006b7          	lui	a3,0x800
   158e8:	7ff00793          	li	a5,2047
   158ec:	00d36333          	or	t1,t1,a3
   158f0:	20f88163          	beq	a7,a5,15af2 <__subdf3+0x620>
   158f4:	03800793          	li	a5,56
   158f8:	22b7cc63          	blt	a5,a1,15b30 <__subdf3+0x65e>
   158fc:	47fd                	li	a5,31
   158fe:	2cb7c963          	blt	a5,a1,15bd0 <__subdf3+0x6fe>
   15902:	02000793          	li	a5,32
   15906:	8f8d                	sub	a5,a5,a1
   15908:	00f31833          	sll	a6,t1,a5
   1590c:	00bf56b3          	srl	a3,t5,a1
   15910:	00ff17b3          	sll	a5,t5,a5
   15914:	00d86833          	or	a6,a6,a3
   15918:	00f039b3          	snez	s3,a5
   1591c:	00b35333          	srl	t1,t1,a1
   15920:	01386833          	or	a6,a6,s3
   15924:	971a                	add	a4,a4,t1
   15926:	01d809b3          	add	s3,a6,t4
   1592a:	01d9b7b3          	sltu	a5,s3,t4
   1592e:	00e78633          	add	a2,a5,a4
   15932:	84c6                	mv	s1,a7
   15934:	bdf9                	j	15812 <__subdf3+0x340>
   15936:	f0081fe3          	bnez	a6,15854 <__subdf3+0x382>
   1593a:	00351813          	slli	a6,a0,0x3
   1593e:	01d31793          	slli	a5,t1,0x1d
   15942:	00385813          	srli	a6,a6,0x3
   15946:	00f86833          	or	a6,a6,a5
   1594a:	00335793          	srli	a5,t1,0x3
   1594e:	b701                	j	1584e <__subdf3+0x37c>
   15950:	00800537          	lui	a0,0x800
   15954:	7ff00793          	li	a5,2047
   15958:	00a36333          	or	t1,t1,a0
   1595c:	e0f890e3          	bne	a7,a5,1575c <__subdf3+0x28a>
   15960:	060e                	slli	a2,a2,0x3
   15962:	01d71813          	slli	a6,a4,0x1d
   15966:	820d                	srli	a2,a2,0x3
   15968:	00c86833          	or	a6,a6,a2
   1596c:	00375793          	srli	a5,a4,0x3
   15970:	8436                	mv	s0,a3
   15972:	bdf1                	j	1584e <__subdf3+0x37c>
   15974:	1705                	addi	a4,a4,-31
   15976:	02000693          	li	a3,32
   1597a:	00e7d733          	srl	a4,a5,a4
   1597e:	00d60a63          	beq	a2,a3,15992 <__subdf3+0x4c0>
   15982:	04000693          	li	a3,64
   15986:	40c68633          	sub	a2,a3,a2
   1598a:	00c79633          	sll	a2,a5,a2
   1598e:	00c9e9b3          	or	s3,s3,a2
   15992:	01303833          	snez	a6,s3
   15996:	00e869b3          	or	s3,a6,a4
   1599a:	4601                	li	a2,0
   1599c:	4481                	li	s1,0
   1599e:	bd0d                	j	157d0 <__subdf3+0x2fe>
   159a0:	01df09b3          	add	s3,t5,t4
   159a4:	00e307b3          	add	a5,t1,a4
   159a8:	01e9bf33          	sltu	t5,s3,t5
   159ac:	01e78633          	add	a2,a5,t5
   159b0:	00861793          	slli	a5,a2,0x8
   159b4:	4485                	li	s1,1
   159b6:	e007dde3          	bgez	a5,157d0 <__subdf3+0x2fe>
   159ba:	4489                	li	s1,2
   159bc:	ff8007b7          	lui	a5,0xff800
   159c0:	17fd                	addi	a5,a5,-1
   159c2:	8ff1                	and	a5,a5,a2
   159c4:	0019d713          	srli	a4,s3,0x1
   159c8:	0019f813          	andi	a6,s3,1
   159cc:	01076833          	or	a6,a4,a6
   159d0:	01f79993          	slli	s3,a5,0x1f
   159d4:	0109e9b3          	or	s3,s3,a6
   159d8:	0017d613          	srli	a2,a5,0x1
   159dc:	b901                	j	155ec <__subdf3+0x11a>
   159de:	fe058813          	addi	a6,a1,-32
   159e2:	02000793          	li	a5,32
   159e6:	010759b3          	srl	s3,a4,a6
   159ea:	00f58a63          	beq	a1,a5,159fe <__subdf3+0x52c>
   159ee:	04000793          	li	a5,64
   159f2:	40b785b3          	sub	a1,a5,a1
   159f6:	00b71733          	sll	a4,a4,a1
   159fa:	00eeeeb3          	or	t4,t4,a4
   159fe:	01d03833          	snez	a6,t4
   15a02:	01386833          	or	a6,a6,s3
   15a06:	be85                	j	15576 <__subdf3+0xa4>
   15a08:	01e36333          	or	t1,t1,t5
   15a0c:	00603833          	snez	a6,t1
   15a10:	410e89b3          	sub	s3,t4,a6
   15a14:	013eb7b3          	sltu	a5,t4,s3
   15a18:	40f70633          	sub	a2,a4,a5
   15a1c:	84c6                	mv	s1,a7
   15a1e:	8436                	mv	s0,a3
   15a20:	b68d                	j	15582 <__subdf3+0xb0>
   15a22:	01e367b3          	or	a5,t1,t5
   15a26:	18078763          	beqz	a5,15bb4 <__subdf3+0x6e2>
   15a2a:	fff58793          	addi	a5,a1,-1
   15a2e:	1c078c63          	beqz	a5,15c06 <__subdf3+0x734>
   15a32:	7ff00693          	li	a3,2047
   15a36:	0ad58e63          	beq	a1,a3,15af2 <__subdf3+0x620>
   15a3a:	85be                	mv	a1,a5
   15a3c:	bd65                	j	158f4 <__subdf3+0x422>
   15a3e:	02000793          	li	a5,32
   15a42:	8f8d                	sub	a5,a5,a1
   15a44:	00bed9b3          	srl	s3,t4,a1
   15a48:	00f71833          	sll	a6,a4,a5
   15a4c:	00fe9eb3          	sll	t4,t4,a5
   15a50:	01386833          	or	a6,a6,s3
   15a54:	00b75733          	srl	a4,a4,a1
   15a58:	01d039b3          	snez	s3,t4
   15a5c:	01386833          	or	a6,a6,s3
   15a60:	933a                	add	t1,t1,a4
   15a62:	b355                	j	15806 <__subdf3+0x334>
   15a64:	00361813          	slli	a6,a2,0x3
   15a68:	01d71793          	slli	a5,a4,0x1d
   15a6c:	00385813          	srli	a6,a6,0x3
   15a70:	0107e833          	or	a6,a5,a6
   15a74:	8436                	mv	s0,a3
   15a76:	00375793          	srli	a5,a4,0x3
   15a7a:	bb85                	j	157ea <__subdf3+0x318>
   15a7c:	cbbd                	beqz	a5,15af2 <__subdf3+0x620>
   15a7e:	01d76733          	or	a4,a4,t4
   15a82:	dc0719e3          	bnez	a4,15854 <__subdf3+0x382>
   15a86:	050e                	slli	a0,a0,0x3
   15a88:	01d31813          	slli	a6,t1,0x1d
   15a8c:	810d                	srli	a0,a0,0x3
   15a8e:	00a86833          	or	a6,a6,a0
   15a92:	00335793          	srli	a5,t1,0x3
   15a96:	bb65                	j	1584e <__subdf3+0x37c>
   15a98:	e2080fe3          	beqz	a6,158d6 <__subdf3+0x404>
   15a9c:	00361813          	slli	a6,a2,0x3
   15aa0:	01d71793          	slli	a5,a4,0x1d
   15aa4:	00385813          	srli	a6,a6,0x3
   15aa8:	00f86833          	or	a6,a6,a5
   15aac:	8436                	mv	s0,a3
   15aae:	00375793          	srli	a5,a4,0x3
   15ab2:	b381                	j	157f2 <__subdf3+0x320>
   15ab4:	41df09b3          	sub	s3,t5,t4
   15ab8:	40e307b3          	sub	a5,t1,a4
   15abc:	013f3f33          	sltu	t5,t5,s3
   15ac0:	41e78633          	sub	a2,a5,t5
   15ac4:	4485                	li	s1,1
   15ac6:	bc75                	j	15582 <__subdf3+0xb0>
   15ac8:	00351813          	slli	a6,a0,0x3
   15acc:	01d31693          	slli	a3,t1,0x1d
   15ad0:	00385813          	srli	a6,a6,0x3
   15ad4:	0106e833          	or	a6,a3,a6
   15ad8:	00335793          	srli	a5,t1,0x3
   15adc:	bb8d                	j	1584e <__subdf3+0x37c>
   15ade:	41ee89b3          	sub	s3,t4,t5
   15ae2:	40670633          	sub	a2,a4,t1
   15ae6:	013eb933          	sltu	s2,t4,s3
   15aea:	41260933          	sub	s2,a2,s2
   15aee:	8436                	mv	s0,a3
   15af0:	b455                	j	15594 <__subdf3+0xc2>
   15af2:	060e                	slli	a2,a2,0x3
   15af4:	01d71813          	slli	a6,a4,0x1d
   15af8:	820d                	srli	a2,a2,0x3
   15afa:	00c86833          	or	a6,a6,a2
   15afe:	00375793          	srli	a5,a4,0x3
   15b02:	b3b1                	j	1584e <__subdf3+0x37c>
   15b04:	41df09b3          	sub	s3,t5,t4
   15b08:	40e307b3          	sub	a5,t1,a4
   15b0c:	013f3633          	sltu	a2,t5,s3
   15b10:	40c78633          	sub	a2,a5,a2
   15b14:	00861793          	slli	a5,a2,0x8
   15b18:	0a07d763          	bgez	a5,15bc6 <__subdf3+0x6f4>
   15b1c:	41ee89b3          	sub	s3,t4,t5
   15b20:	406707b3          	sub	a5,a4,t1
   15b24:	013ebeb3          	sltu	t4,t4,s3
   15b28:	41d78633          	sub	a2,a5,t4
   15b2c:	8436                	mv	s0,a3
   15b2e:	bc7d                	j	155ec <__subdf3+0x11a>
   15b30:	01e36333          	or	t1,t1,t5
   15b34:	00603833          	snez	a6,t1
   15b38:	b3fd                	j	15926 <__subdf3+0x454>
   15b3a:	fe058813          	addi	a6,a1,-32
   15b3e:	02000793          	li	a5,32
   15b42:	010359b3          	srl	s3,t1,a6
   15b46:	00f58a63          	beq	a1,a5,15b5a <__subdf3+0x688>
   15b4a:	04000793          	li	a5,64
   15b4e:	40b785b3          	sub	a1,a5,a1
   15b52:	00b31333          	sll	t1,t1,a1
   15b56:	006f6f33          	or	t5,t5,t1
   15b5a:	01e03833          	snez	a6,t5
   15b5e:	01386833          	or	a6,a6,s3
   15b62:	b57d                	j	15a10 <__subdf3+0x53e>
   15b64:	41ee89b3          	sub	s3,t4,t5
   15b68:	406707b3          	sub	a5,a4,t1
   15b6c:	013ebeb3          	sltu	t4,t4,s3
   15b70:	41d78633          	sub	a2,a5,t4
   15b74:	8436                	mv	s0,a3
   15b76:	4485                	li	s1,1
   15b78:	b429                	j	15582 <__subdf3+0xb0>
   15b7a:	00361813          	slli	a6,a2,0x3
   15b7e:	01d71793          	slli	a5,a4,0x1d
   15b82:	00385813          	srli	a6,a6,0x3
   15b86:	00f86833          	or	a6,a6,a5
   15b8a:	00375793          	srli	a5,a4,0x3
   15b8e:	b195                	j	157f2 <__subdf3+0x320>
   15b90:	01df09b3          	add	s3,t5,t4
   15b94:	00e307b3          	add	a5,t1,a4
   15b98:	01e9bf33          	sltu	t5,s3,t5
   15b9c:	01e78633          	add	a2,a5,t5
   15ba0:	00861793          	slli	a5,a2,0x8
   15ba4:	c207d6e3          	bgez	a5,157d0 <__subdf3+0x2fe>
   15ba8:	ff8007b7          	lui	a5,0xff800
   15bac:	17fd                	addi	a5,a5,-1
   15bae:	8e7d                	and	a2,a2,a5
   15bb0:	4485                	li	s1,1
   15bb2:	b939                	j	157d0 <__subdf3+0x2fe>
   15bb4:	060e                	slli	a2,a2,0x3
   15bb6:	01d71813          	slli	a6,a4,0x1d
   15bba:	820d                	srli	a2,a2,0x3
   15bbc:	00c86833          	or	a6,a6,a2
   15bc0:	00375793          	srli	a5,a4,0x3
   15bc4:	b11d                	j	157ea <__subdf3+0x318>
   15bc6:	00c9e833          	or	a6,s3,a2
   15bca:	d00806e3          	beqz	a6,158d6 <__subdf3+0x404>
   15bce:	b109                	j	157d0 <__subdf3+0x2fe>
   15bd0:	fe058813          	addi	a6,a1,-32
   15bd4:	02000793          	li	a5,32
   15bd8:	010359b3          	srl	s3,t1,a6
   15bdc:	00f58a63          	beq	a1,a5,15bf0 <__subdf3+0x71e>
   15be0:	04000793          	li	a5,64
   15be4:	40b785b3          	sub	a1,a5,a1
   15be8:	00b31333          	sll	t1,t1,a1
   15bec:	006f6f33          	or	t5,t5,t1
   15bf0:	01e03833          	snez	a6,t5
   15bf4:	01386833          	or	a6,a6,s3
   15bf8:	b33d                	j	15926 <__subdf3+0x454>
   15bfa:	4401                	li	s0,0
   15bfc:	7ff00713          	li	a4,2047
   15c00:	000807b7          	lui	a5,0x80
   15c04:	bc1d                	j	1563a <__subdf3+0x168>
   15c06:	01df09b3          	add	s3,t5,t4
   15c0a:	00e307b3          	add	a5,t1,a4
   15c0e:	01d9beb3          	sltu	t4,s3,t4
   15c12:	01d78633          	add	a2,a5,t4
   15c16:	bb69                	j	159b0 <__subdf3+0x4de>

00015c18 <__fixunsdfdi>:
__fixunsdfdi():
   15c18:	0145d793          	srli	a5,a1,0x14
   15c1c:	001006b7          	lui	a3,0x100
   15c20:	fff68713          	addi	a4,a3,-1 # fffff <_data_lma+0xe9aef>
   15c24:	7ff7f793          	andi	a5,a5,2047
   15c28:	3fe00613          	li	a2,1022
   15c2c:	8f6d                	and	a4,a4,a1
   15c2e:	81fd                	srli	a1,a1,0x1f
   15c30:	00f65363          	bge	a2,a5,15c36 <__fixunsdfdi+0x1e>
   15c34:	c581                	beqz	a1,15c3c <__fixunsdfdi+0x24>
   15c36:	4501                	li	a0,0
   15c38:	4581                	li	a1,0
   15c3a:	8082                	ret
   15c3c:	43e00613          	li	a2,1086
   15c40:	00f65563          	bge	a2,a5,15c4a <__fixunsdfdi+0x32>
   15c44:	557d                	li	a0,-1
   15c46:	55fd                	li	a1,-1
   15c48:	8082                	ret
   15c4a:	43200613          	li	a2,1074
   15c4e:	00d765b3          	or	a1,a4,a3
   15c52:	00f65c63          	bge	a2,a5,15c6a <__fixunsdfdi+0x52>
   15c56:	bad78713          	addi	a4,a5,-1107 # 7fbad <_data_lma+0x6969d>
   15c5a:	bcd78793          	addi	a5,a5,-1075
   15c5e:	04074063          	bltz	a4,15c9e <__fixunsdfdi+0x86>
   15c62:	00e515b3          	sll	a1,a0,a4
   15c66:	4501                	li	a0,0
   15c68:	8082                	ret
   15c6a:	43300693          	li	a3,1075
   15c6e:	8e9d                	sub	a3,a3,a5
   15c70:	477d                	li	a4,31
   15c72:	00d75b63          	bge	a4,a3,15c88 <__fixunsdfdi+0x70>
   15c76:	41300713          	li	a4,1043
   15c7a:	40f707b3          	sub	a5,a4,a5
   15c7e:	00f5d7b3          	srl	a5,a1,a5
   15c82:	4581                	li	a1,0
   15c84:	853e                	mv	a0,a5
   15c86:	8082                	ret
   15c88:	bed78713          	addi	a4,a5,-1043
   15c8c:	00e59733          	sll	a4,a1,a4
   15c90:	00d55533          	srl	a0,a0,a3
   15c94:	00a767b3          	or	a5,a4,a0
   15c98:	00d5d5b3          	srl	a1,a1,a3
   15c9c:	b7e5                	j	15c84 <__fixunsdfdi+0x6c>
   15c9e:	46fd                	li	a3,31
   15ca0:	00155713          	srli	a4,a0,0x1
   15ca4:	8e9d                	sub	a3,a3,a5
   15ca6:	00d75733          	srl	a4,a4,a3
   15caa:	00f595b3          	sll	a1,a1,a5
   15cae:	8dd9                	or	a1,a1,a4
   15cb0:	00f51533          	sll	a0,a0,a5
   15cb4:	8082                	ret

00015cb6 <__floatundidf>:
__floatundidf():
   15cb6:	00b567b3          	or	a5,a0,a1
   15cba:	c3b1                	beqz	a5,15cfe <__floatundidf+0x48>
   15cbc:	1141                	addi	sp,sp,-16
   15cbe:	c422                	sw	s0,8(sp)
   15cc0:	c226                	sw	s1,4(sp)
   15cc2:	c04a                	sw	s2,0(sp)
   15cc4:	c606                	sw	ra,12(sp)
   15cc6:	84aa                	mv	s1,a0
   15cc8:	892e                	mv	s2,a1
   15cca:	842e                	mv	s0,a1
   15ccc:	c1b9                	beqz	a1,15d12 <__floatundidf+0x5c>
   15cce:	852e                	mv	a0,a1
   15cd0:	00000097          	auipc	ra,0x0
   15cd4:	22c080e7          	jalr	556(ra) # 15efc <__clzsi2>
   15cd8:	43e00693          	li	a3,1086
   15cdc:	8e89                	sub	a3,a3,a0
   15cde:	43300793          	li	a5,1075
   15ce2:	06d7c763          	blt	a5,a3,15d50 <__floatundidf+0x9a>
   15ce6:	00c91793          	slli	a5,s2,0xc
   15cea:	462d                	li	a2,11
   15cec:	8726                	mv	a4,s1
   15cee:	7ff6f693          	andi	a3,a3,2047
   15cf2:	83b1                	srli	a5,a5,0xc
   15cf4:	0ca65f63          	bge	a2,a0,15dd2 <__floatundidf+0x11c>
   15cf8:	ff550613          	addi	a2,a0,-11 # 7ffff5 <_data_lma+0x7e9ae5>
   15cfc:	a825                	j	15d34 <__floatundidf+0x7e>
   15cfe:	4781                	li	a5,0
   15d00:	4681                	li	a3,0
   15d02:	07b2                	slli	a5,a5,0xc
   15d04:	06d2                	slli	a3,a3,0x14
   15d06:	83b1                	srli	a5,a5,0xc
   15d08:	4701                	li	a4,0
   15d0a:	8fd5                	or	a5,a5,a3
   15d0c:	853a                	mv	a0,a4
   15d0e:	85be                	mv	a1,a5
   15d10:	8082                	ret
   15d12:	00000097          	auipc	ra,0x0
   15d16:	1ea080e7          	jalr	490(ra) # 15efc <__clzsi2>
   15d1a:	862a                	mv	a2,a0
   15d1c:	43e00693          	li	a3,1086
   15d20:	02050513          	addi	a0,a0,32
   15d24:	8e89                	sub	a3,a3,a0
   15d26:	02a00713          	li	a4,42
   15d2a:	7ff6f693          	andi	a3,a3,2047
   15d2e:	0ca74c63          	blt	a4,a0,15e06 <__floatundidf+0x150>
   15d32:	0655                	addi	a2,a2,21
   15d34:	02b00713          	li	a4,43
   15d38:	8f09                	sub	a4,a4,a0
   15d3a:	00c917b3          	sll	a5,s2,a2
   15d3e:	00e4d733          	srl	a4,s1,a4
   15d42:	8f5d                	or	a4,a4,a5
   15d44:	00c71793          	slli	a5,a4,0xc
   15d48:	83b1                	srli	a5,a5,0xc
   15d4a:	00c49733          	sll	a4,s1,a2
   15d4e:	a051                	j	15dd2 <__floatundidf+0x11c>
   15d50:	43600793          	li	a5,1078
   15d54:	02d7d963          	bge	a5,a3,15d86 <__floatundidf+0xd0>
   15d58:	01850713          	addi	a4,a0,24
   15d5c:	03850793          	addi	a5,a0,56
   15d60:	0c074763          	bltz	a4,15e2e <__floatundidf+0x178>
   15d64:	00e49633          	sll	a2,s1,a4
   15d68:	4701                	li	a4,0
   15d6a:	4421                	li	s0,8
   15d6c:	8c09                	sub	s0,s0,a0
   15d6e:	8f51                	or	a4,a4,a2
   15d70:	fe040793          	addi	a5,s0,-32 # 7ffe0 <_data_lma+0x69ad0>
   15d74:	00e03733          	snez	a4,a4
   15d78:	0807cf63          	bltz	a5,15e16 <__floatundidf+0x160>
   15d7c:	00f954b3          	srl	s1,s2,a5
   15d80:	4781                	li	a5,0
   15d82:	8cd9                	or	s1,s1,a4
   15d84:	843e                	mv	s0,a5
   15d86:	47a1                	li	a5,8
   15d88:	06a7c163          	blt	a5,a0,15dea <__floatundidf+0x134>
   15d8c:	ff800737          	lui	a4,0xff800
   15d90:	177d                	addi	a4,a4,-1
   15d92:	0074f613          	andi	a2,s1,7
   15d96:	00e477b3          	and	a5,s0,a4
   15d9a:	c605                	beqz	a2,15dc2 <__floatundidf+0x10c>
   15d9c:	00f4f613          	andi	a2,s1,15
   15da0:	4591                	li	a1,4
   15da2:	02b60063          	beq	a2,a1,15dc2 <__floatundidf+0x10c>
   15da6:	00448613          	addi	a2,s1,4
   15daa:	009634b3          	sltu	s1,a2,s1
   15dae:	97a6                	add	a5,a5,s1
   15db0:	00879593          	slli	a1,a5,0x8
   15db4:	0805d963          	bgez	a1,15e46 <__floatundidf+0x190>
   15db8:	43f00693          	li	a3,1087
   15dbc:	8ff9                	and	a5,a5,a4
   15dbe:	8e89                	sub	a3,a3,a0
   15dc0:	84b2                	mv	s1,a2
   15dc2:	01d79713          	slli	a4,a5,0x1d
   15dc6:	808d                	srli	s1,s1,0x3
   15dc8:	07a6                	slli	a5,a5,0x9
   15dca:	8f45                	or	a4,a4,s1
   15dcc:	83b1                	srli	a5,a5,0xc
   15dce:	7ff6f693          	andi	a3,a3,2047
   15dd2:	40b2                	lw	ra,12(sp)
   15dd4:	4422                	lw	s0,8(sp)
   15dd6:	07b2                	slli	a5,a5,0xc
   15dd8:	06d2                	slli	a3,a3,0x14
   15dda:	83b1                	srli	a5,a5,0xc
   15ddc:	8fd5                	or	a5,a5,a3
   15dde:	4492                	lw	s1,4(sp)
   15de0:	4902                	lw	s2,0(sp)
   15de2:	853a                	mv	a0,a4
   15de4:	85be                	mv	a1,a5
   15de6:	0141                	addi	sp,sp,16
   15de8:	8082                	ret
   15dea:	02800713          	li	a4,40
   15dee:	ff850613          	addi	a2,a0,-8
   15df2:	8f09                	sub	a4,a4,a0
   15df4:	00e4d733          	srl	a4,s1,a4
   15df8:	00c417b3          	sll	a5,s0,a2
   15dfc:	00f76433          	or	s0,a4,a5
   15e00:	00c494b3          	sll	s1,s1,a2
   15e04:	b761                	j	15d8c <__floatundidf+0xd6>
   15e06:	ff560793          	addi	a5,a2,-11 # ff7ffff5 <_eusrstack+0xdf7f7ff5>
   15e0a:	00f497b3          	sll	a5,s1,a5
   15e0e:	07b2                	slli	a5,a5,0xc
   15e10:	83b1                	srli	a5,a5,0xc
   15e12:	4701                	li	a4,0
   15e14:	bf7d                	j	15dd2 <__floatundidf+0x11c>
   15e16:	467d                	li	a2,31
   15e18:	00191793          	slli	a5,s2,0x1
   15e1c:	8e01                	sub	a2,a2,s0
   15e1e:	00c797b3          	sll	a5,a5,a2
   15e22:	0084d4b3          	srl	s1,s1,s0
   15e26:	8cdd                	or	s1,s1,a5
   15e28:	008957b3          	srl	a5,s2,s0
   15e2c:	bf99                	j	15d82 <__floatundidf+0xcc>
   15e2e:	467d                	li	a2,31
   15e30:	8e1d                	sub	a2,a2,a5
   15e32:	0014d713          	srli	a4,s1,0x1
   15e36:	00c75733          	srl	a4,a4,a2
   15e3a:	00f91633          	sll	a2,s2,a5
   15e3e:	8e59                	or	a2,a2,a4
   15e40:	00f49733          	sll	a4,s1,a5
   15e44:	b71d                	j	15d6a <__floatundidf+0xb4>
   15e46:	84b2                	mv	s1,a2
   15e48:	bfad                	j	15dc2 <__floatundidf+0x10c>

00015e4a <__extendsfdf2>:
__extendsfdf2():
   15e4a:	01755713          	srli	a4,a0,0x17
   15e4e:	0ff77713          	andi	a4,a4,255
   15e52:	1141                	addi	sp,sp,-16
   15e54:	00170793          	addi	a5,a4,1 # ff800001 <_eusrstack+0xdf7f8001>
   15e58:	c422                	sw	s0,8(sp)
   15e5a:	c226                	sw	s1,4(sp)
   15e5c:	00951413          	slli	s0,a0,0x9
   15e60:	c606                	sw	ra,12(sp)
   15e62:	0fe7f793          	andi	a5,a5,254
   15e66:	8025                	srli	s0,s0,0x9
   15e68:	01f55493          	srli	s1,a0,0x1f
   15e6c:	c785                	beqz	a5,15e94 <__extendsfdf2+0x4a>
   15e6e:	00345793          	srli	a5,s0,0x3
   15e72:	38070713          	addi	a4,a4,896
   15e76:	0476                	slli	s0,s0,0x1d
   15e78:	07b2                	slli	a5,a5,0xc
   15e7a:	0752                	slli	a4,a4,0x14
   15e7c:	83b1                	srli	a5,a5,0xc
   15e7e:	01f49513          	slli	a0,s1,0x1f
   15e82:	8fd9                	or	a5,a5,a4
   15e84:	8fc9                	or	a5,a5,a0
   15e86:	40b2                	lw	ra,12(sp)
   15e88:	8522                	mv	a0,s0
   15e8a:	4422                	lw	s0,8(sp)
   15e8c:	4492                	lw	s1,4(sp)
   15e8e:	85be                	mv	a1,a5
   15e90:	0141                	addi	sp,sp,16
   15e92:	8082                	ret
   15e94:	eb1d                	bnez	a4,15eca <__extendsfdf2+0x80>
   15e96:	c831                	beqz	s0,15eea <__extendsfdf2+0xa0>
   15e98:	8522                	mv	a0,s0
   15e9a:	00000097          	auipc	ra,0x0
   15e9e:	062080e7          	jalr	98(ra) # 15efc <__clzsi2>
   15ea2:	47a9                	li	a5,10
   15ea4:	04a7c663          	blt	a5,a0,15ef0 <__extendsfdf2+0xa6>
   15ea8:	472d                	li	a4,11
   15eaa:	8f09                	sub	a4,a4,a0
   15eac:	01550793          	addi	a5,a0,21
   15eb0:	00e45733          	srl	a4,s0,a4
   15eb4:	00f41433          	sll	s0,s0,a5
   15eb8:	00c71793          	slli	a5,a4,0xc
   15ebc:	38900713          	li	a4,905
   15ec0:	8f09                	sub	a4,a4,a0
   15ec2:	83b1                	srli	a5,a5,0xc
   15ec4:	7ff77713          	andi	a4,a4,2047
   15ec8:	bf45                	j	15e78 <__extendsfdf2+0x2e>
   15eca:	cc01                	beqz	s0,15ee2 <__extendsfdf2+0x98>
   15ecc:	00345713          	srli	a4,s0,0x3
   15ed0:	000807b7          	lui	a5,0x80
   15ed4:	8fd9                	or	a5,a5,a4
   15ed6:	07b2                	slli	a5,a5,0xc
   15ed8:	0476                	slli	s0,s0,0x1d
   15eda:	83b1                	srli	a5,a5,0xc
   15edc:	7ff00713          	li	a4,2047
   15ee0:	bf61                	j	15e78 <__extendsfdf2+0x2e>
   15ee2:	7ff00713          	li	a4,2047
   15ee6:	4781                	li	a5,0
   15ee8:	bf41                	j	15e78 <__extendsfdf2+0x2e>
   15eea:	4701                	li	a4,0
   15eec:	4781                	li	a5,0
   15eee:	b769                	j	15e78 <__extendsfdf2+0x2e>
   15ef0:	ff550713          	addi	a4,a0,-11
   15ef4:	00e41733          	sll	a4,s0,a4
   15ef8:	4401                	li	s0,0
   15efa:	bf7d                	j	15eb8 <__extendsfdf2+0x6e>

00015efc <__clzsi2>:
__clzsi2():
   15efc:	67c1                	lui	a5,0x10
   15efe:	02f57e63          	bgeu	a0,a5,15f3a <__clzsi2+0x3e>
   15f02:	0ff00793          	li	a5,255
   15f06:	02000713          	li	a4,32
   15f0a:	00a7ec63          	bltu	a5,a0,15f22 <__clzsi2+0x26>
   15f0e:	00000797          	auipc	a5,0x0
   15f12:	50278793          	addi	a5,a5,1282 # 16410 <__clz_tab>
   15f16:	97aa                	add	a5,a5,a0
   15f18:	0007c503          	lbu	a0,0(a5)
   15f1c:	40a70533          	sub	a0,a4,a0
   15f20:	8082                	ret
   15f22:	8121                	srli	a0,a0,0x8
   15f24:	00000797          	auipc	a5,0x0
   15f28:	4ec78793          	addi	a5,a5,1260 # 16410 <__clz_tab>
   15f2c:	97aa                	add	a5,a5,a0
   15f2e:	0007c503          	lbu	a0,0(a5)
   15f32:	4761                	li	a4,24
   15f34:	40a70533          	sub	a0,a4,a0
   15f38:	8082                	ret
   15f3a:	010007b7          	lui	a5,0x1000
   15f3e:	00f56e63          	bltu	a0,a5,15f5a <__clzsi2+0x5e>
   15f42:	8161                	srli	a0,a0,0x18
   15f44:	00000797          	auipc	a5,0x0
   15f48:	4cc78793          	addi	a5,a5,1228 # 16410 <__clz_tab>
   15f4c:	97aa                	add	a5,a5,a0
   15f4e:	0007c503          	lbu	a0,0(a5)
   15f52:	4721                	li	a4,8
   15f54:	40a70533          	sub	a0,a4,a0
   15f58:	8082                	ret
   15f5a:	8141                	srli	a0,a0,0x10
   15f5c:	00000797          	auipc	a5,0x0
   15f60:	4b478793          	addi	a5,a5,1204 # 16410 <__clz_tab>
   15f64:	97aa                	add	a5,a5,a0
   15f66:	0007c503          	lbu	a0,0(a5)
   15f6a:	4741                	li	a4,16
   15f6c:	40a70533          	sub	a0,a4,a0
   15f70:	8082                	ret

00015f72 <strlen>:
strlen():
   15f72:	87aa                	mv	a5,a0
   15f74:	0785                	addi	a5,a5,1
   15f76:	fff7c703          	lbu	a4,-1(a5)
   15f7a:	ff6d                	bnez	a4,15f74 <strlen+0x2>
   15f7c:	40a78533          	sub	a0,a5,a0
   15f80:	157d                	addi	a0,a0,-1
   15f82:	8082                	ret
   15f84:	2d2d                	jal	165be <_data_lma+0xae>
   15f86:	2d2d                	jal	165c0 <_data_lma+0xb0>
   15f88:	2d2d                	jal	165c2 <_data_lma+0xb2>
   15f8a:	2d2d                	jal	165c4 <_data_lma+0xb4>
   15f8c:	2d2d                	jal	165c6 <_data_lma+0xb6>
   15f8e:	2d2d                	jal	165c8 <_data_lma+0xb8>
   15f90:	2d2d                	jal	165ca <_data_lma+0xba>
   15f92:	2d2d                	jal	165cc <_data_lma+0xbc>
   15f94:	2d2d                	jal	165ce <_data_lma+0xbe>
   15f96:	2d2d                	jal	165d0 <_data_lma+0xc0>
   15f98:	2d2d                	jal	165d2 <_data_lma+0xc2>
   15f9a:	2d2d                	jal	165d4 <_data_lma+0xc4>
   15f9c:	2d2d                	jal	165d6 <_data_lma+0xc6>
   15f9e:	2d2d                	jal	165d8 <_data_lma+0xc8>
   15fa0:	2d2d                	jal	165da <_data_lma+0xca>
   15fa2:	2d2d                	jal	165dc <_data_lma+0xcc>
   15fa4:	2d2d                	jal	165de <_data_lma+0xce>
   15fa6:	2d2d                	jal	165e0 <_data_lma+0xd0>
   15fa8:	2d2d                	jal	165e2 <_data_lma+0xd2>
   15faa:	2d2d                	jal	165e4 <_data_lma+0xd4>
   15fac:	2d2d                	jal	165e6 <_data_lma+0xd6>
   15fae:	2d2d                	jal	165e8 <_data_lma+0xd8>
   15fb0:	2d2d                	jal	165ea <_data_lma+0xda>
   15fb2:	2d2d                	jal	165ec <_data_lma+0xdc>
   15fb4:	2d2d                	jal	165ee <_data_lma+0xde>
   15fb6:	0a2d                	addi	s4,s4,11
   15fb8:	000a                	c.slli	zero,0x2
   15fba:	0000                	unimp
   15fbc:	0000                	unimp
   15fbe:	bc00                	fsd	fs0,56(s0)
   15fc0:	2d2d                	jal	165fa <_data_lma+0xea>
   15fc2:	2d2d                	jal	165fc <_data_lma+0xec>
   15fc4:	2d2d                	jal	165fe <_data_lma+0xee>
   15fc6:	2d2d                	jal	16600 <_data_lma+0xf0>
   15fc8:	2d2d                	jal	16602 <_data_lma+0xf2>
   15fca:	2d2d                	jal	16604 <_data_lma+0xf4>
   15fcc:	2d2d                	jal	16606 <_data_lma+0xf6>
   15fce:	2d2d                	jal	16608 <_data_lma+0xf8>
   15fd0:	2d2d                	jal	1660a <_data_lma+0xfa>
   15fd2:	2d2d                	jal	1660c <_data_lma+0xfc>
   15fd4:	2d2d                	jal	1660e <_data_lma+0xfe>
   15fd6:	2d2d                	jal	16610 <_data_lma+0x100>
   15fd8:	2d2d                	jal	16612 <_data_lma+0x102>
   15fda:	2d2d                	jal	16614 <_data_lma+0x104>
   15fdc:	2d2d                	jal	16616 <_data_lma+0x106>
   15fde:	2d2d                	jal	16618 <_data_lma+0x108>
   15fe0:	2d2d                	jal	1661a <_data_lma+0x10a>
   15fe2:	2d2d                	jal	1661c <_data_lma+0x10c>
   15fe4:	2d2d                	jal	1661e <_data_lma+0x10e>
   15fe6:	2d2d                	jal	16620 <_data_lma+0x110>
   15fe8:	2d2d                	jal	16622 <_data_lma+0x112>
   15fea:	2d2d                	jal	16624 <_data_lma+0x114>
   15fec:	2d2d                	jal	16626 <_data_lma+0x116>
   15fee:	2d2d                	jal	16628 <_data_lma+0x118>
   15ff0:	2d2d                	jal	1662a <_data_lma+0x11a>
   15ff2:	2d2d                	jal	1662c <_data_lma+0x11c>
   15ff4:	2d2d                	jal	1662e <_data_lma+0x11e>
   15ff6:	000a                	c.slli	zero,0x2
   15ff8:	efa1                	bnez	a5,16050 <strlen+0xde>
   15ffa:	f0bd                	bnez	s1,15f60 <__clzsi2+0x64>
   15ffc:	f9ba                	fsw	fa4,240(sp)
   15ffe:	abc2                	fsd	fa6,464(sp)
   16000:	e1cc                	fsw	fa1,4(a1)
   16002:	beca                	fsd	fs2,376(sp)
   16004:	efa1                	bnez	a5,1605c <strlen+0xea>
   16006:	2020                	fld	fs0,64(s0)
   16008:	2020                	fld	fs0,64(s0)
   1600a:	2020                	fld	fs0,64(s0)
   1600c:	2020                	fld	fs0,64(s0)
   1600e:	2020                	fld	fs0,64(s0)
   16010:	2020                	fld	fs0,64(s0)
   16012:	2020                	fld	fs0,64(s0)
   16014:	2020                	fld	fs0,64(s0)
   16016:	2020                	fld	fs0,64(s0)
   16018:	2020                	fld	fs0,64(s0)
   1601a:	2020                	fld	fs0,64(s0)
   1601c:	2020                	fld	fs0,64(s0)
   1601e:	2020                	fld	fs0,64(s0)
   16020:	2020                	fld	fs0,64(s0)
   16022:	2020                	fld	fs0,64(s0)
   16024:	2020                	fld	fs0,64(s0)
   16026:	2020                	fld	fs0,64(s0)
   16028:	2020                	fld	fs0,64(s0)
   1602a:	2020                	fld	fs0,64(s0)
   1602c:	2020                	fld	fs0,64(s0)
   1602e:	0a20                	addi	s0,sp,280
   16030:	0000                	unimp
   16032:	0000                	unimp
   16034:	bea1                	j	15b8c <__subdf3+0x6ba>
   16036:	d0d6                	sw	s5,96(sp)
   16038:	c4ce                	sw	s3,72(sp)
   1603a:	c6b3fbc3          	fmadd.q	fs7,ft7,fa1,fs8
   1603e:	bfa1                	j	15f96 <strlen+0x24>
   16040:	cfc8                	sw	a0,28(a5)
   16042:	b6ca                	fsd	fs2,360(sp)
   16044:	a1b8                	fsd	fa4,64(a1)
   16046:	e3b5                	bnez	a5,160aa <strlen+0x138>
   16048:	fdca                	fsw	fs2,248(sp)
   1604a:	c4b5                	beqz	s1,160b6 <strlen+0x144>
   1604c:	e6b4                	fsw	fa3,72(a3)
   1604e:	a2b4                	fsd	fa3,64(a3)
   16050:	bdcabdb7          	lui	s11,0xbdcab
   16054:	2020                	fld	fs0,64(s0)
   16056:	2020                	fld	fs0,64(s0)
   16058:	2020                	fld	fs0,64(s0)
   1605a:	2020                	fld	fs0,64(s0)
   1605c:	2020                	fld	fs0,64(s0)
   1605e:	2020                	fld	fs0,64(s0)
   16060:	2020                	fld	fs0,64(s0)
   16062:	2020                	fld	fs0,64(s0)
   16064:	2020                	fld	fs0,64(s0)
   16066:	2020                	fld	fs0,64(s0)
   16068:	2020                	fld	fs0,64(s0)
   1606a:	2020                	fld	fs0,64(s0)
   1606c:	000a                	c.slli	zero,0x2
   1606e:	0000                	unimp
   16070:	bea1                	j	15bc8 <__subdf3+0x6f6>
   16072:	f2d0ccb3          	0xf2d0ccb3
   16076:	a6b9                	j	163c4 <strlen+0x452>
   16078:	dcc4                	sw	s1,60(s1)
   1607a:	bfa1                	j	15fd2 <strlen+0x60>
   1607c:	2020                	fld	fs0,64(s0)
   1607e:	2020                	fld	fs0,64(s0)
   16080:	2020                	fld	fs0,64(s0)
   16082:	2020                	fld	fs0,64(s0)
   16084:	2020                	fld	fs0,64(s0)
   16086:	2020                	fld	fs0,64(s0)
   16088:	2020                	fld	fs0,64(s0)
   1608a:	2020                	fld	fs0,64(s0)
   1608c:	2020                	fld	fs0,64(s0)
   1608e:	2020                	fld	fs0,64(s0)
   16090:	2020                	fld	fs0,64(s0)
   16092:	2020                	fld	fs0,64(s0)
   16094:	2020                	fld	fs0,64(s0)
   16096:	2020                	fld	fs0,64(s0)
   16098:	2020                	fld	fs0,64(s0)
   1609a:	2020                	fld	fs0,64(s0)
   1609c:	2020                	fld	fs0,64(s0)
   1609e:	2020                	fld	fs0,64(s0)
   160a0:	2020                	fld	fs0,64(s0)
   160a2:	2020                	fld	fs0,64(s0)
   160a4:	2020                	fld	fs0,64(s0)
   160a6:	0a20                	addi	s0,sp,280
   160a8:	0000                	unimp
   160aa:	0000                	unimp
   160ac:	2020                	fld	fs0,64(s0)
   160ae:	2020                	fld	fs0,64(s0)
   160b0:	2020                	fld	fs0,64(s0)
   160b2:	2020                	fld	fs0,64(s0)
   160b4:	a220                	fsd	fs0,64(a2)
   160b6:	20d9                	jal	1617c <strlen+0x20a>
   160b8:	b6c0                	fsd	fs0,168(a3)
   160ba:	abc9                	j	1668c <_data_lma+0x17c>
   160bc:	c1c9                	beqz	a1,1613e <strlen+0x1cc>
   160be:	bba3b8cb          	fnmsub.d	fa7,ft7,fs10,fs7,rup
   160c2:	2020                	fld	fs0,64(s0)
   160c4:	2020                	fld	fs0,64(s0)
   160c6:	2020                	fld	fs0,64(s0)
   160c8:	2020                	fld	fs0,64(s0)
   160ca:	2020                	fld	fs0,64(s0)
   160cc:	2020                	fld	fs0,64(s0)
   160ce:	2020                	fld	fs0,64(s0)
   160d0:	2020                	fld	fs0,64(s0)
   160d2:	2020                	fld	fs0,64(s0)
   160d4:	2020                	fld	fs0,64(s0)
   160d6:	2020                	fld	fs0,64(s0)
   160d8:	2020                	fld	fs0,64(s0)
   160da:	2020                	fld	fs0,64(s0)
   160dc:	2020                	fld	fs0,64(s0)
   160de:	2020                	fld	fs0,64(s0)
   160e0:	2020                	fld	fs0,64(s0)
   160e2:	0a20                	addi	s0,sp,280
   160e4:	0000                	unimp
   160e6:	0000                	unimp
   160e8:	2020                	fld	fs0,64(s0)
   160ea:	2020                	fld	fs0,64(s0)
   160ec:	2020                	fld	fs0,64(s0)
   160ee:	2020                	fld	fs0,64(s0)
   160f0:	a220                	fsd	fs0,64(a2)
   160f2:	20da                	fld	ft1,400(sp)
   160f4:	e4ca                	fsw	fs2,72(sp)
   160f6:	a1b8f6b3          	0xa1b8f6b3
   160fa:	e3b5                	bnez	a5,1615e <strlen+0x1ec>
   160fc:	fdca                	fsw	fs2,248(sp)
   160fe:	c4b5                	beqz	s1,1616a <strlen+0x1f8>
   16100:	e6b4                	fsw	fa3,72(a3)
   16102:	a2b4                	fsd	fa3,64(a3)
   16104:	f6bfe9c7          	fmsub.q	fs3,ft11,fa1,ft10,unknown
   16108:	a3a1                	j	16650 <_data_lma+0x140>
   1610a:	2020                	fld	fs0,64(s0)
   1610c:	2020                	fld	fs0,64(s0)
   1610e:	2020                	fld	fs0,64(s0)
   16110:	2020                	fld	fs0,64(s0)
   16112:	2020                	fld	fs0,64(s0)
   16114:	2020                	fld	fs0,64(s0)
   16116:	2020                	fld	fs0,64(s0)
   16118:	2020                	fld	fs0,64(s0)
   1611a:	2020                	fld	fs0,64(s0)
   1611c:	2020                	fld	fs0,64(s0)
   1611e:	0a20                	addi	s0,sp,280
   16120:	0000                	unimp
   16122:	0000                	unimp
   16124:	4c20                	lw	s0,88(s0)
   16126:	4749                	li	a4,18
   16128:	5448                	lw	a0,44(s0)
   1612a:	425f 554c 3a45      	0x3a45554c425f
   16130:	20204e4f          	fnmadd.s	ft8,ft0,ft2,ft4,rmm
   16134:	0a20                	addi	s0,sp,280
   16136:	0000                	unimp
   16138:	b520                	fsd	fs0,104(a0)
   1613a:	c9c6                	sw	a7,208(sp)
   1613c:	cbc1                	beqz	a5,161cc <strlen+0x25a>
   1613e:	b4b8                	fsd	fa4,104(s1)
   16140:	cace                	sw	s3,84(sp)
   16142:	6dfd                	lui	s11,0x1f
   16144:	694c                	flw	fa1,20(a0)
   16146:	43746867          	0x43746867
   1614a:	746e756f          	jal	a0,fd890 <_data_lma+0xe7380>
   1614e:	3d20                	fld	fs0,120(a0)
   16150:	2520                	fld	fs0,72(a0)
   16152:	0a64                	addi	s1,sp,284
   16154:	000a                	c.slli	zero,0x2
   16156:	0000                	unimp
   16158:	4c20                	lw	s0,88(s0)
   1615a:	4749                	li	a4,18
   1615c:	5448                	lw	a0,44(s0)
   1615e:	425f 554c 3a45      	0x3a45554c425f
   16164:	2046464f          	fnmadd.s	fa2,fa2,ft4,ft4,rmm
   16168:	0a20                	addi	s0,sp,280
   1616a:	0000                	unimp
   1616c:	3d3d                	jal	15faa <strlen+0x38>
   1616e:	3d3d                	jal	15fac <strlen+0x3a>
   16170:	3d3d                	jal	15fae <strlen+0x3c>
   16172:	3d3d                	jal	15fb0 <strlen+0x3e>
   16174:	3d3d                	jal	15fb2 <strlen+0x40>
   16176:	3d3d                	jal	15fb4 <strlen+0x42>
   16178:	3d3d                	jal	15fb6 <strlen+0x44>
   1617a:	3d3d                	jal	15fb8 <strlen+0x46>
   1617c:	3d3d                	jal	15fba <strlen+0x48>
   1617e:	3d3d                	jal	15fbc <strlen+0x4a>
   16180:	3d3d                	jal	15fbe <strlen+0x4c>
   16182:	000a                	c.slli	zero,0x2
   16184:	b5ca                	fsd	fs2,232(sp)
   16186:	fdca                	fsw	fs2,248(sp)
   16188:	31665f67          	0x31665f67
   1618c:	253d                	jal	167ba <_data_lma+0x2aa>
   1618e:	3031                	jal	1599a <__subdf3+0x4c8>
   16190:	372e                	fld	fa4,232(sp)
   16192:	666c                	flw	fa1,76(a2)
   16194:	000a                	c.slli	zero,0x2
   16196:	0000                	unimp
   16198:	b5ca                	fsd	fs2,232(sp)
   1619a:	fdca                	fsw	fs2,248(sp)
   1619c:	31665f67          	0x31665f67
   161a0:	c4b5                	beqz	s1,1620c <strlen+0x29a>
   161a2:	e6b4                	fsw	fa3,72(a3)
   161a4:	a2b4                	fsd	fa3,64(a3)
   161a6:	d8b5                	beqz	s1,1611a <strlen+0x1a8>
   161a8:	b7d6                	fsd	fs5,488(sp)
   161aa:	253d                	jal	167d8 <_data_lma+0x2c8>
   161ac:	0a78                	addi	a4,sp,284
   161ae:	0000                	unimp
   161b0:	b5ca                	fsd	fs2,232(sp)
   161b2:	fdca                	fsw	fs2,248(sp)
   161b4:	31665f67          	0x31665f67
   161b8:	c4b5                	beqz	s1,16224 <strlen+0x2b2>
   161ba:	a1b8                	fsd	fa4,64(a1)
   161bc:	e3b5                	bnez	a5,16220 <strlen+0x2ae>
   161be:	fdca                	fsw	fs2,248(sp)
   161c0:	e6b4                	fsw	fa3,72(a3)
   161c2:	a2b4                	fsd	fa3,64(a3)
   161c4:	ced0                	sw	a2,28(a3)
   161c6:	bdca                	fsd	fs2,248(sp)
   161c8:	303d                	jal	159f6 <__subdf3+0x524>
   161ca:	2578                	fld	fa4,200(a0)
   161cc:	0a78                	addi	a4,sp,284
   161ce:	0000                	unimp
   161d0:	d4d2                	sw	s4,104(sp)
   161d2:	e6b4                	fsw	fa3,72(a3)
   161d4:	a2b4                	fsd	fa3,64(a3)
   161d6:	d8b5                	beqz	s1,1614a <strlen+0x1d8>
   161d8:	b7d6                	fsd	fs5,488(sp)
   161da:	b1d6                	fsd	fs5,224(sp)
   161dc:	dbb9                	beqz	a5,16132 <strlen+0x1c0>
   161de:	bdcabdb7          	lui	s11,0xbdcab
   161e2:	c1b6                	sw	a3,192(sp)
   161e4:	c4b5f6b3          	0xc4b5f6b3
   161e8:	b5d6                	fsd	fs5,232(sp)
   161ea:	253d                	jal	16818 <_data_lma+0x308>
   161ec:	3031                	jal	159f8 <__subdf3+0x526>
   161ee:	372e                	fld	fa4,232(sp)
   161f0:	0a66                	slli	s4,s4,0x19
   161f2:	0000                	unimp
   161f4:	2020                	fld	fs0,64(s0)
   161f6:	bea1                	j	15d4e <__floatundidf+0x98>
   161f8:	7355                	lui	t1,0xffff5
   161fa:	7265                	lui	tp,0xffff9
   161fc:	e1cc                	fsw	fa1,4(a1)
   161fe:	beca                	fsd	fs2,376(sp)
   16200:	bfa1                	j	16158 <strlen+0x1e6>
   16202:	abbdbaa3          	0xabbdbaa3
   16206:	f8bd                	bnez	s1,1617c <strlen+0x20a>
   16208:	ebc8                	fsw	fa0,20(a5)
   1620a:	7355                	lui	t1,0xffff5
   1620c:	7265                	lui	tp,0xffff9
   1620e:	c4b5                	beqz	s1,1627a <strlen+0x308>
   16210:	616d                	addi	sp,sp,240
   16212:	6e69                	lui	t3,0x1a
   16214:	afba                	fsd	fa4,472(sp)
   16216:	fdca                	fsw	fs2,248(sp)
   16218:	b4d6                	fsd	fs5,104(sp)
   1621a:	d0d0                	sw	a2,36(s1)
   1621c:	2e2e                	fld	ft8,200(sp)
   1621e:	0d2e                	slli	s10,s10,0xb
   16220:	0a0a                	slli	s4,s4,0x2
   16222:	0000                	unimp
   16224:	da28                	sw	a0,112(a2)
   16226:	ffff                	0xffff
   16228:	da2c                	sw	a1,112(a2)
   1622a:	ffff                	0xffff
   1622c:	da24                	sw	s1,112(a2)
   1622e:	ffff                	0xffff
   16230:	da32                	sw	a2,52(sp)
   16232:	ffff                	0xffff
   16234:	da1c                	sw	a5,48(a2)
   16236:	ffff                	0xffff
   16238:	da32                	sw	a2,52(sp)
   1623a:	ffff                	0xffff
   1623c:	da18                	sw	a4,48(a2)
   1623e:	ffff                	0xffff
   16240:	da32                	sw	a2,52(sp)
   16242:	ffff                	0xffff
   16244:	da32                	sw	a2,52(sp)
   16246:	ffff                	0xffff
   16248:	da32                	sw	a2,52(sp)
   1624a:	ffff                	0xffff
   1624c:	da32                	sw	a2,52(sp)
   1624e:	ffff                	0xffff
   16250:	da32                	sw	a2,52(sp)
   16252:	ffff                	0xffff
   16254:	da20                	sw	s0,112(a2)
   16256:	ffff                	0xffff
   16258:	d964                	sw	s1,116(a0)
   1625a:	ffff                	0xffff
   1625c:	d968                	sw	a0,116(a0)
   1625e:	ffff                	0xffff
   16260:	d960                	sw	s0,116(a0)
   16262:	ffff                	0xffff
   16264:	d9fe                	sw	t6,240(sp)
   16266:	ffff                	0xffff
   16268:	d958                	sw	a4,52(a0)
   1626a:	ffff                	0xffff
   1626c:	d9fe                	sw	t6,240(sp)
   1626e:	ffff                	0xffff
   16270:	d954                	sw	a3,52(a0)
   16272:	ffff                	0xffff
   16274:	d9fe                	sw	t6,240(sp)
   16276:	ffff                	0xffff
   16278:	d9fe                	sw	t6,240(sp)
   1627a:	ffff                	0xffff
   1627c:	d9fe                	sw	t6,240(sp)
   1627e:	ffff                	0xffff
   16280:	d9fe                	sw	t6,240(sp)
   16282:	ffff                	0xffff
   16284:	d9fe                	sw	t6,240(sp)
   16286:	ffff                	0xffff
   16288:	d95c                	sw	a5,52(a0)
   1628a:	ffff                	0xffff
   1628c:	d96c                	sw	a1,116(a0)
   1628e:	ffff                	0xffff
   16290:	d970                	sw	a2,116(a0)
   16292:	ffff                	0xffff
   16294:	d968                	sw	a0,116(a0)
   16296:	ffff                	0xffff
   16298:	d9ca                	sw	s2,240(sp)
   1629a:	ffff                	0xffff
   1629c:	d960                	sw	s0,116(a0)
   1629e:	ffff                	0xffff
   162a0:	d9ca                	sw	s2,240(sp)
   162a2:	ffff                	0xffff
   162a4:	d95c                	sw	a5,52(a0)
   162a6:	ffff                	0xffff
   162a8:	d9ca                	sw	s2,240(sp)
   162aa:	ffff                	0xffff
   162ac:	d9ca                	sw	s2,240(sp)
   162ae:	ffff                	0xffff
   162b0:	d9ca                	sw	s2,240(sp)
   162b2:	ffff                	0xffff
   162b4:	d9ca                	sw	s2,240(sp)
   162b6:	ffff                	0xffff
   162b8:	d9ca                	sw	s2,240(sp)
   162ba:	ffff                	0xffff
   162bc:	d964                	sw	s1,116(a0)
   162be:	ffff                	0xffff
   162c0:	d974                	sw	a3,116(a0)
   162c2:	ffff                	0xffff
   162c4:	d978                	sw	a4,116(a0)
   162c6:	ffff                	0xffff
   162c8:	d970                	sw	a2,116(a0)
   162ca:	ffff                	0xffff
   162cc:	d996                	sw	t0,240(sp)
   162ce:	ffff                	0xffff
   162d0:	d968                	sw	a0,116(a0)
   162d2:	ffff                	0xffff
   162d4:	d996                	sw	t0,240(sp)
   162d6:	ffff                	0xffff
   162d8:	d964                	sw	s1,116(a0)
   162da:	ffff                	0xffff
   162dc:	d996                	sw	t0,240(sp)
   162de:	ffff                	0xffff
   162e0:	d996                	sw	t0,240(sp)
   162e2:	ffff                	0xffff
   162e4:	d996                	sw	t0,240(sp)
   162e6:	ffff                	0xffff
   162e8:	d996                	sw	t0,240(sp)
   162ea:	ffff                	0xffff
   162ec:	d996                	sw	t0,240(sp)
   162ee:	ffff                	0xffff
   162f0:	d96c                	sw	a1,116(a0)
   162f2:	ffff                	0xffff
   162f4:	de8e                	sw	gp,124(sp)
   162f6:	ffff                	0xffff
   162f8:	df10                	sw	a2,56(a4)
   162fa:	ffff                	0xffff
   162fc:	df10                	sw	a2,56(a4)
   162fe:	ffff                	0xffff
   16300:	de9a                	sw	t1,124(sp)
   16302:	ffff                	0xffff
   16304:	df10                	sw	a2,56(a4)
   16306:	ffff                	0xffff
   16308:	df10                	sw	a2,56(a4)
   1630a:	ffff                	0xffff
   1630c:	df10                	sw	a2,56(a4)
   1630e:	ffff                	0xffff
   16310:	df10                	sw	a2,56(a4)
   16312:	ffff                	0xffff
   16314:	df10                	sw	a2,56(a4)
   16316:	ffff                	0xffff
   16318:	df10                	sw	a2,56(a4)
   1631a:	ffff                	0xffff
   1631c:	df10                	sw	a2,56(a4)
   1631e:	ffff                	0xffff
   16320:	de88                	sw	a0,56(a3)
   16322:	ffff                	0xffff
   16324:	df10                	sw	a2,56(a4)
   16326:	ffff                	0xffff
   16328:	de64                	sw	s1,124(a2)
   1632a:	ffff                	0xffff
   1632c:	df10                	sw	a2,56(a4)
   1632e:	ffff                	0xffff
   16330:	df10                	sw	a2,56(a4)
   16332:	ffff                	0xffff
   16334:	de94                	sw	a3,56(a3)
   16336:	ffff                	0xffff
   16338:	e0fc                	fsw	fa5,68(s1)
   1633a:	ffff                	0xffff
   1633c:	e38a                	fsw	ft2,196(sp)
   1633e:	ffff                	0xffff
   16340:	e38a                	fsw	ft2,196(sp)
   16342:	ffff                	0xffff
   16344:	e38a                	fsw	ft2,196(sp)
   16346:	ffff                	0xffff
   16348:	e38a                	fsw	ft2,196(sp)
   1634a:	ffff                	0xffff
   1634c:	e38a                	fsw	ft2,196(sp)
   1634e:	ffff                	0xffff
   16350:	e38a                	fsw	ft2,196(sp)
   16352:	ffff                	0xffff
   16354:	e38a                	fsw	ft2,196(sp)
   16356:	ffff                	0xffff
   16358:	e38a                	fsw	ft2,196(sp)
   1635a:	ffff                	0xffff
   1635c:	e38a                	fsw	ft2,196(sp)
   1635e:	ffff                	0xffff
   16360:	e200                	fsw	fs0,0(a2)
   16362:	ffff                	0xffff
   16364:	e2dc                	fsw	fa5,4(a3)
   16366:	ffff                	0xffff
   16368:	df0c                	sw	a1,56(a4)
   1636a:	ffff                	0xffff
   1636c:	e38a                	fsw	ft2,196(sp)
   1636e:	ffff                	0xffff
   16370:	dfb4                	sw	a3,120(a5)
   16372:	ffff                	0xffff
   16374:	e38a                	fsw	ft2,196(sp)
   16376:	ffff                	0xffff
   16378:	e38a                	fsw	ft2,196(sp)
   1637a:	ffff                	0xffff
   1637c:	df0c                	sw	a1,56(a4)
   1637e:	ffff                	0xffff
   16380:	e38a                	fsw	ft2,196(sp)
   16382:	ffff                	0xffff
   16384:	e38a                	fsw	ft2,196(sp)
   16386:	ffff                	0xffff
   16388:	e38a                	fsw	ft2,196(sp)
   1638a:	ffff                	0xffff
   1638c:	e38a                	fsw	ft2,196(sp)
   1638e:	ffff                	0xffff
   16390:	e37e                	fsw	ft11,132(sp)
   16392:	ffff                	0xffff
   16394:	e1c8                	fsw	fa0,4(a1)
   16396:	ffff                	0xffff
   16398:	e220                	fsw	fs0,64(a2)
   1639a:	ffff                	0xffff
   1639c:	e38a                	fsw	ft2,196(sp)
   1639e:	ffff                	0xffff
   163a0:	e38a                	fsw	ft2,196(sp)
   163a2:	ffff                	0xffff
   163a4:	e2f4                	fsw	fa3,68(a3)
   163a6:	ffff                	0xffff
   163a8:	e38a                	fsw	ft2,196(sp)
   163aa:	ffff                	0xffff
   163ac:	e240                	fsw	fs0,4(a2)
   163ae:	ffff                	0xffff
   163b0:	e38a                	fsw	ft2,196(sp)
   163b2:	ffff                	0xffff
   163b4:	e38a                	fsw	ft2,196(sp)
   163b6:	ffff                	0xffff
   163b8:	e0fc                	fsw	fa5,68(s1)
   163ba:	ffff                	0xffff
	...
   163c4:	0000                	unimp
   163c6:	4024                	lw	s1,64(s0)
   163c8:	999a                	add	s3,s3,t1
   163ca:	9999                	andi	a1,a1,-26
   163cc:	9999                	andi	a1,a1,-26
   163ce:	3fb9                	jal	1632c <strlen+0x3ba>
   163d0:	ee52                	fsw	fs4,28(sp)
   163d2:	ffff                	0xffff
   163d4:	ed3c                	fsw	fa5,88(a0)
   163d6:	ffff                	0xffff
   163d8:	ed3c                	fsw	fa5,88(a0)
   163da:	ffff                	0xffff
   163dc:	ed3a                	fsw	fa4,152(sp)
   163de:	ffff                	0xffff
   163e0:	ed42                	fsw	fa6,152(sp)
   163e2:	ffff                	0xffff
   163e4:	ed42                	fsw	fa6,152(sp)
   163e6:	ffff                	0xffff
   163e8:	ed08                	fsw	fa0,24(a0)
   163ea:	ffff                	0xffff
   163ec:	ed3a                	fsw	fa4,152(sp)
   163ee:	ffff                	0xffff
   163f0:	ed42                	fsw	fa6,152(sp)
   163f2:	ffff                	0xffff
   163f4:	ed08                	fsw	fa0,24(a0)
   163f6:	ffff                	0xffff
   163f8:	ed42                	fsw	fa6,152(sp)
   163fa:	ffff                	0xffff
   163fc:	ed3a                	fsw	fa4,152(sp)
   163fe:	ffff                	0xffff
   16400:	ee3e                	fsw	fa5,28(sp)
   16402:	ffff                	0xffff
   16404:	ee3e                	fsw	fa5,28(sp)
   16406:	ffff                	0xffff
   16408:	ee3e                	fsw	fa5,28(sp)
   1640a:	ffff                	0xffff
   1640c:	ed08                	fsw	fa0,24(a0)
   1640e:	ffff                	0xffff

00016410 <__clz_tab>:
   16410:	0100 0202 0303 0303 0404 0404 0404 0404     ................
   16420:	0505 0505 0505 0505 0505 0505 0505 0505     ................
   16430:	0606 0606 0606 0606 0606 0606 0606 0606     ................
   16440:	0606 0606 0606 0606 0606 0606 0606 0606     ................
   16450:	0707 0707 0707 0707 0707 0707 0707 0707     ................
   16460:	0707 0707 0707 0707 0707 0707 0707 0707     ................
   16470:	0707 0707 0707 0707 0707 0707 0707 0707     ................
   16480:	0707 0707 0707 0707 0707 0707 0707 0707     ................
   16490:	0808 0808 0808 0808 0808 0808 0808 0808     ................
   164a0:	0808 0808 0808 0808 0808 0808 0808 0808     ................
   164b0:	0808 0808 0808 0808 0808 0808 0808 0808     ................
   164c0:	0808 0808 0808 0808 0808 0808 0808 0808     ................
   164d0:	0808 0808 0808 0808 0808 0808 0808 0808     ................
   164e0:	0808 0808 0808 0808 0808 0808 0808 0808     ................
   164f0:	0808 0808 0808 0808 0808 0808 0808 0808     ................
   16500:	0808 0808 0808 0808 0808 0808 0808 0808     ................
