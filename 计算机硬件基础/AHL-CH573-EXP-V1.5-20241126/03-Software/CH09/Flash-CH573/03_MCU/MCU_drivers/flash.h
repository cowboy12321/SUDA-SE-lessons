//===========================================================================
//文件名称：flash.h
//功能概要：Flash底层驱动构件头文件
//版权所有：苏大嵌入式(sumcu.suda.edu.cn)
//版本更新：20210417-20240810
//芯片类型：CH573F,大小、地址范围、扇区大小
//         可用大小： DataFlash + CodeFlash = 480KB
//         地址范围： 0x00000000 - 0x00077FFF
//         扇区大小： 4096（即480K/4K=120个扇区）
//===========================================================================

#ifndef _FLASH_H
#define _FLASH_H

#include "string.h"
#include "stdio.h"
#include "CH573SFR.h"
#include "ISP573.h"
#define FLASH_START_ADDRESS   0x00000000   //Flash区域开始地址
#define FLASH_SECT_SIZE       4096         //Flash扇区大小

//======================================================================
//函数名称：flash_init
//函数返回：无
//参数说明：无
//功能概要：初始化flash模块
//======================================================================
void flash_init(void);

//======================================================================
//函数名称：flash_erase
//函数返回：函数执行执行状态：0=正常；1=异常。
//参数说明：sect：目标扇区号（范围取决于实际芯片，例如 CH573:0~119,每扇区4KB）
//功能概要：擦除flash存储器的sect扇区
//======================================================================
uint8_t flash_erase(uint16_t sect);

//======================================================================
//函数名称：flash_write
//函数返回：函数执行状态：0=正常；1=异常。
//参数说明：sect：扇区号（范围取决于实际芯片，例如 CH573:0~119,每扇区4KB）
//        offset:写入扇区内部偏移地址（0~4092，要求为0,4,8,12，......）
//        N：写入字节数目（4~4096,要求为4,8,12,......）
//        buff：源数据缓冲区首地址
//功能概要：将buff开始的N字节写入到flash存储器的sect扇区的 offset处
//编程参考：暂无
//=======================================================================
uint8_t flash_write(uint16_t sect,uint16_t offset,uint16_t N,uint8_t *buff);

//==========================================================================
//函数名称：flash_write_physical
//函数返回：函数执行状态：0=正常；非0=异常。
//参数说明： addr：目标地址，要求为4的倍数且大于Flash首地址
//              （例如：0x00000004，Flash首地址为0x00000000）
//           N：写入字节数目
//           buff：源数据缓冲区首地址
//功能概要：根据物理地址addr进行flash写入操作
//编程参考：暂无
//==========================================================================
uint8_t flash_write_physical(uint32_t addr,uint16_t N,uint8_t* buff);

//======================================================================
//函数名称：flash_read_logic
//函数返回：无
//参数说明：dest：读出数据存放处（传地址，目的是带出所读数据，RAM区）
//         sect：扇区号（范围取决于实际芯片，例如 CH573:0~119,每扇区4KB）
//         offset:扇区内部偏移地址（0~4092，要求为0,4,8,12，......）
//         N：读字节数目（4~4096,要求为4,8,12,......）
//功能概要：读取flash存储器的sect扇区的 offset处开始的N字节，到RAM区dest处
//编程参考：暂无
//=======================================================================
void flash_read_logic(uint8_t* dest,uint16_t sect,uint16_t offset,uint32_t N);

//======================================================================
//函数名称：flash_read_physical
//函数返回：无
//参数说明：dest：读出数据存放处（传地址，目的是带出所读数据，RAM区）
//         addr：目标地址，要求为4的倍数（例如：0x00000004）
//         N：读字节数目
//功能概要：读取flash指定地址的内容
//======================================================================
void flash_read_physical(uint8_t *dest,uint32_t addr,uint16_t N);

//======================================================================
//函数名称：flash_isempty
//函数返回：1=目标区域为空；0=目标区域非空。
//参数说明：sect:所需判断的扇区号
//          N:所需判断的区域大小（该扇区的前N个字节，N不超过4096）
//功能概要：flash判空操作
//编程来源：暂无
//======================================================================
uint8_t flash_isempty(uint16_t sect,uint16_t N);


//======================================================================
//函数名称：flash_protect
//函数返回：无
//参数说明：M=0时，解开对Flash的保护；
//         M=1时，保护系统非易失配置信息存储区InfoFlash
//         M=2时，保护系统引导程序存储区 BootLoader
//         M=3时，保护用户应用程序存储区CodeFlash和用户非易失数据存储区DataFlash
//功能概要：flash保护操作
//说    明：flash保护之后无法对对应区域进行擦除或是写入操作
//         InfoFlash： 0x0007E000-0x0007FFFF
//         BootLoader：0x00078000-0x0007DFFF
//         CodeFlash： 0x00000000-0x0006FFFF
//         DataFlash： 0x00070000-0x00077FFF
//======================================================================
void flash_protect(uint8_t M);

#endif    /* SRC_FLASH_H_ */
