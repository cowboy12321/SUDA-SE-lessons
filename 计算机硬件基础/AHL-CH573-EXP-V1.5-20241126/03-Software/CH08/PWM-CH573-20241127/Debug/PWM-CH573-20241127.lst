
PWM-CH573-20241127.elf:     file format elf32-littleriscv
PWM-CH573-20241127.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00012000

Program Header:
    LOAD off    0x00001000 vaddr 0x00012000 paddr 0x00012000 align 2**12
         filesz 0x000000ec memsz 0x000000ec flags r-x
    LOAD off    0x00002000 vaddr 0x00013000 paddr 0x00013000 align 2**12
         filesz 0x00004908 memsz 0x00004908 flags r-x
    LOAD off    0x00007600 vaddr 0x20005600 paddr 0x00017908 align 2**12
         filesz 0x00000000 memsz 0x00000080 flags rw-
    LOAD off    0x00007680 vaddr 0x20005680 paddr 0x00017908 align 2**12
         filesz 0x00000008 memsz 0x0000000c flags rw-

Sections:
Idx Name            Size      VMA       LMA       File off  Algn  Flags
  0 .init           00000004  00012000  00012000  00001000  2**1  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .vector         000000e8  00012004  00012004  00001004  2**1  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .highcodelalign 00000000  00013000  00013000  00007688  2**0  CONTENTS
  3 .highcode       00000000  20005600  20005600  00007688  2**0  CONTENTS
  4 .text           00004908  00013000  00013000  00002000  2**3  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .fini           00000000  00017908  00017908  00007688  2**0  CONTENTS, ALLOC, LOAD, CODE
  6 .dalign         00000080  20005600  00017908  00007600  2**0  ALLOC
  7 .dlalign        00000000  00017908  00017908  00007688  2**0  CONTENTS
  8 .data           00000008  20005680  00017908  00007680  2**1  CONTENTS, ALLOC, LOAD, DATA
  9 .bss            00000004  20005688  00017910  00007688  2**2  ALLOC
 10 .stack          00000000  20008000  20008000  00007688  2**0  CONTENTS
 11 .debug_info     00005b53  00000000  00000000  00007688  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev   0000139f  00000000  00000000  0000d1db  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc      0000337d  00000000  00000000  0000e57a  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges  00000240  00000000  00000000  000118f8  2**3  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges   00000240  00000000  00000000  00011b38  2**3  CONTENTS, READONLY, DEBUGGING
 16 .debug_line     00005c17  00000000  00000000  00011d78  2**0  CONTENTS, READONLY, DEBUGGING
 17 .debug_str      00000c64  00000000  00000000  0001798f  2**0  CONTENTS, READONLY, DEBUGGING
 18 .comment        00000033  00000000  00000000  000185f3  2**0  CONTENTS, READONLY
 19 .debug_frame    00000848  00000000  00000000  00018628  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00012000 l    d  .init	00000000 .init
00012004 l    d  .vector	00000000 .vector
00013000 l    d  .highcodelalign	00000000 .highcodelalign
20005600 l    d  .highcode	00000000 .highcode
00013000 l    d  .text	00000000 .text
00017908 l    d  .fini	00000000 .fini
20005600 l    d  .dalign	00000000 .dalign
00017908 l    d  .dlalign	00000000 .dlalign
20005680 l    d  .data	00000000 .data
20005688 l    d  .bss	00000000 .bss
20008000 l    d  .stack	00000000 .stack
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 ./obj/startup_CH573.o
00012004 l       .vector	00000000 _vector_base
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 flash.c
00000000 l    df *ABS*	00000000 gpio.c
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 gec.c
00000000 l    df *ABS*	00000000 uart.c
00000000 l    df *ABS*	00000000 printf.c
00013f5a l     F .text	0000003c printk_putc
00013f96 l     F .text	00000082 printk_mknumstr
00014018 l     F .text	0000003c printk_pad_space
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 fixunsdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 fixunsdfdi.c
00000000 l    df *ABS*	00000000 floatundidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 libgcc2.c
000133c8 g     F .text	000000cc flash_write
00016266 g     F .text	0000006a .hidden __eqdf2
00014a6c g     F .text	000003d8 .hidden __divdi3
20005e80 g       .data	00000000 __global_pointer$
00000025 g       *ABS*	00000000 GEC_USER_SECTOR_END
00012098  w      .vector	00000000 HardFault_Handler
000120ac  w      .vector	00000000 GPIOB_IRQHandler
000120a8  w      .vector	00000000 GPIOA_IRQHandler
0001209c  w      .vector	00000000 SysTick_Handler
00012094  w      .vector	00000000 NMI_Handler
000120cc  w      .vector	00000000 UART1_IRQHandler
20005688 g       .bss	00000000 _sbss
00000012 g       *ABS*	00000000 GEC_USER_SECTOR_START
000120c8  w      .vector	00000000 UART0_IRQHandler
00017058 g     F .text	00000076 .hidden __floatsidf
000162d0 g     F .text	000000b6 .hidden __ltdf2
00012004 g       .init	00000000 _einit
00016ffc g     F .text	0000005c .hidden __fixunsdfsi
000120b4  w      .vector	00000000 BB_IRQHandler
00013354 g     F .text	00000026 flash_erase
0001337a g     F .text	00000028 flash_Best
000120a4  w      .vector	00000000 TMR0_IRQHandler
0001556a g     F .text	00000738 .hidden __adddf3
000151dc g     F .text	0000038e .hidden __umoddi3
00014e44 g     F .text	00000398 .hidden __udivdi3
000170ce g     F .text	0000006c .hidden __floatunsidf
0001406c g     F .text	000002e8 printk_mkfloatstr
000120d0  w      .vector	00000000 RTC_IRQHandler
2000568c g       .bss	00000000 _ebss
00001000 g       *ABS*	00000000 MCU_SECTORSIZE
00016f94 g     F .text	00000068 .hidden __fixdfsi
000135fc g     F .text	00000564 pwm_init
000162d0 g     F .text	000000b6 .hidden __ledf2
20007fff g       *ABS*	00000000 GEC_USER_RAM_END
00014a36 g     F .text	00000036 myprintf
000120e0  w      .vector	00000000 UART2_IRQHandler
000120d8  w      .vector	00000000 PWMX_IRQHandler
0001736c g     F .text	00000076 .hidden __clzsi2
0001359c g     F .text	00000060 gpio_get
00012000 g       .init	00000000 _start
20005688 g     O .bss	00000004 component_fun
000171d8 g     F .text	00000194 .hidden __floatundidf
20005600 g       *ABS*	00000000 GEC_USER_RAM_START
000120d4  w      .vector	00000000 ADC_IRQHandler
20005600 g       .highcode	00000000 _highcode_vma_start
000120c4  w      .vector	00000000 TMR2_IRQHandler
20005680 g       .data	00000000 _data_vma
00014054 g     F .text	00000018 out_char
000120bc  w      .vector	00000000 USB_IRQHandler
00014354 g     F .text	000006e2 printk
00015ca2 g     F .text	000005c4 .hidden __divdf3
000133a2 g     F .text	00000026 flash_read_logic
00016386 g     F .text	000004c8 .hidden __muldf3
000130c0 g     F .text	000000a8 memset
00013168 g     F .text	000001ec main
00013d14 g     F .text	000000b8 IRQ_OPC_CHANGE
00013000 g       .highcodelalign	00000000 _highcode_lma
00016266 g     F .text	0000006a .hidden __nedf2
0001713a g     F .text	0000009e .hidden __fixunsdfdi
00017808 g     O .text	00000100 .hidden __clz_tab
000120b8  w      .vector	00000000 LLE_IRQHandler
00012000 g       .init	00000000 _sinit
20005680 g     O .data	00000002 gc_period_minus_one
000120e8  w      .vector	00000000 WDOG_BAT_IRQHandler
000120dc  w      .vector	00000000 TMR3_IRQHandler
20008000 g       .stack	00000000 _eusrstack
000120a0  w      .vector	00000000 SW_Handler
00013dcc g     F .text	00000080 Vectors_Init
20005688 g       .data	00000000 _edata
000120b0  w      .vector	00000000 SPI0_IRQHandler
20005600 g       .highcode	00000000 _highcode_vma_end
00017908 g       .dlalign	00000000 _data_lma
00013000  w      .text	00000000 handle_reset
00013b60 g     F .text	000001b4 pwm_update
000173e2 g     F .text	00000012 strlen
000120e4  w      .vector	00000000 UART3_IRQHandler
00013e4c g     F .text	0000010e uart_send1
00013494 g     F .text	00000072 gpio_set
00013506 g     F .text	00000096 gpio_init
0001684e g     F .text	00000746 .hidden __subdf3
000120c0  w      .vector	00000000 TMR1_IRQHandler
00000000 g       *ABS*	00000000 MCU_FLASH_ADDR_START



Disassembly of section .init:

00012000 <_sinit>:
_start():
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:14
	.section	.init,"ax",@progbits   /*ax是 allocation  execute的缩写，表示该节区可分配并且可执行，progbits是类型*/
	.global	_start   /*将_start标签定义为全局可见*/
	.align	1   /*将当前PC地址推进到2的1次方个字节对齐的位置*/
    .option	norelax  /*	不允许链接松弛*/
_start:     /*定义此处的标签为_start*/
	j	handle_reset     /*跳转指令跳转到标签handle_reset所在的位置*/
   12000:	0000106f          	j	13000 <_highcode_lma>

Disassembly of section .vector:

00012004 <_vector_base>:
_vector_base():
   12004:	8000                	0x8000
   12006:	2000                	fld	fs0,0(s0)
   12008:	0000                	unimp
   1200a:	0000                	unimp
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:22
    .align  1
_vector_base:
    .option norvc; /*表示接下来的汇编程序不可以被汇编生成16位宽的压缩指令*/
    .word   _eusrstack
    .word   0
        j   NMI_Handler                 /* NMI Handler */
   1200c:	0880006f          	j	12094 <NMI_Handler>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:23
        j   HardFault_Handler           /* Hard Fault Handler */
   12010:	0880006f          	j	12098 <HardFault_Handler>
	...
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:32
    .word   0
    .word   0
    .word   0
    .word   0
    .word   0
        j   SysTick_Handler            /* SysTick Handler */
   12034:	0680006f          	j	1209c <SysTick_Handler>
   12038:	0000                	unimp
   1203a:	0000                	unimp
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:34
    .word   0
        j   SW_Handler                 /* SW Handler */
   1203c:	0640006f          	j	120a0 <SW_Handler>
   12040:	0000                	unimp
   12042:	0000                	unimp
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:37
    .word   0
    /* External Interrupts */
        j   TMR0_IRQHandler            /* 0:  TMR0 */
   12044:	0600006f          	j	120a4 <TMR0_IRQHandler>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:38
        j   GPIOA_IRQHandler           /* GPIOA */
   12048:	0600006f          	j	120a8 <GPIOA_IRQHandler>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:39
        j   GPIOB_IRQHandler           /* GPIOB */
   1204c:	0600006f          	j	120ac <GPIOB_IRQHandler>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:40
        j   SPI0_IRQHandler            /* SPI0 */
   12050:	0600006f          	j	120b0 <SPI0_IRQHandler>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:41
        j   BB_IRQHandler              /* BLEB */
   12054:	0600006f          	j	120b4 <BB_IRQHandler>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:42
        j   LLE_IRQHandler             /* BLEL */
   12058:	0600006f          	j	120b8 <LLE_IRQHandler>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:43
        j   USB_IRQHandler             /* USB */
   1205c:	0600006f          	j	120bc <USB_IRQHandler>
   12060:	0000                	unimp
   12062:	0000                	unimp
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:45
        .word   0
        j   TMR1_IRQHandler            /* TMR1 */
   12064:	05c0006f          	j	120c0 <TMR1_IRQHandler>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:46
        j   TMR2_IRQHandler            /* TMR2 */
   12068:	05c0006f          	j	120c4 <TMR2_IRQHandler>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:47
        j   UART0_IRQHandler           /* UART0 */
   1206c:	05c0006f          	j	120c8 <UART0_IRQHandler>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:48
        j   UART1_IRQHandler           /* UART1 */
   12070:	05c0006f          	j	120cc <UART1_IRQHandler>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:49
        j   RTC_IRQHandler             /* RTC */
   12074:	05c0006f          	j	120d0 <RTC_IRQHandler>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:50
        j   ADC_IRQHandler             /* ADC */
   12078:	05c0006f          	j	120d4 <ADC_IRQHandler>
   1207c:	0000                	unimp
   1207e:	0000                	unimp
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:52
        .word   0
        j   PWMX_IRQHandler            /* PWMX */
   12080:	0580006f          	j	120d8 <PWMX_IRQHandler>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:53
        j   TMR3_IRQHandler            /* TMR3 */
   12084:	0580006f          	j	120dc <TMR3_IRQHandler>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:54
        j   UART2_IRQHandler           /* UART2 */
   12088:	0580006f          	j	120e0 <UART2_IRQHandler>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:55
        j   UART3_IRQHandler           /* UART3 */
   1208c:	0580006f          	j	120e4 <UART3_IRQHandler>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:56
        j   WDOG_BAT_IRQHandler        /* WDOG_BAT */
   12090:	0580006f          	j	120e8 <WDOG_BAT_IRQHandler>

00012094 <NMI_Handler>:
NMI_Handler():
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:84
    .weak   TMR3_IRQHandler
    .weak   UART2_IRQHandler
    .weak   UART3_IRQHandler
    .weak   WDOG_BAT_IRQHandler

NMI_Handler:  1:  j 1b     /* 在被引用之时，数字标签通常需要带上一个字母“f”或者“b”的后缀，“f”表示下一行，“b”表示向上一行*/
   12094:	0000006f          	j	12094 <NMI_Handler>

00012098 <HardFault_Handler>:
HardFault_Handler():
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:85
HardFault_Handler:  1:  j 1b
   12098:	0000006f          	j	12098 <HardFault_Handler>

0001209c <SysTick_Handler>:
SysTick_Handler():
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:86
SysTick_Handler:  1:  j 1b
   1209c:	0000006f          	j	1209c <SysTick_Handler>

000120a0 <SW_Handler>:
SW_Handler():
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:87
SW_Handler:  1:  j 1b
   120a0:	0000006f          	j	120a0 <SW_Handler>

000120a4 <TMR0_IRQHandler>:
TMR0_IRQHandler():
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:88
TMR0_IRQHandler:  1:  j 1b
   120a4:	0000006f          	j	120a4 <TMR0_IRQHandler>

000120a8 <GPIOA_IRQHandler>:
GPIOA_IRQHandler():
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:89
GPIOA_IRQHandler:  1:  j 1b
   120a8:	0000006f          	j	120a8 <GPIOA_IRQHandler>

000120ac <GPIOB_IRQHandler>:
GPIOB_IRQHandler():
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:90
GPIOB_IRQHandler:  1:  j 1b
   120ac:	0000006f          	j	120ac <GPIOB_IRQHandler>

000120b0 <SPI0_IRQHandler>:
SPI0_IRQHandler():
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:91
SPI0_IRQHandler:  1:  j 1b
   120b0:	0000006f          	j	120b0 <SPI0_IRQHandler>

000120b4 <BB_IRQHandler>:
BB_IRQHandler():
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:92
BB_IRQHandler:  1:  j 1b
   120b4:	0000006f          	j	120b4 <BB_IRQHandler>

000120b8 <LLE_IRQHandler>:
LLE_IRQHandler():
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:93
LLE_IRQHandler:  1:  j 1b
   120b8:	0000006f          	j	120b8 <LLE_IRQHandler>

000120bc <USB_IRQHandler>:
USB_IRQHandler():
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:94
USB_IRQHandler:  1:  j 1b
   120bc:	0000006f          	j	120bc <USB_IRQHandler>

000120c0 <TMR1_IRQHandler>:
TMR1_IRQHandler():
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:95
TMR1_IRQHandler:  1:  j 1b
   120c0:	0000006f          	j	120c0 <TMR1_IRQHandler>

000120c4 <TMR2_IRQHandler>:
TMR2_IRQHandler():
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:96
TMR2_IRQHandler:  1:  j 1b
   120c4:	0000006f          	j	120c4 <TMR2_IRQHandler>

000120c8 <UART0_IRQHandler>:
UART0_IRQHandler():
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:97
UART0_IRQHandler:  1:  j 1b
   120c8:	0000006f          	j	120c8 <UART0_IRQHandler>

000120cc <UART1_IRQHandler>:
UART1_IRQHandler():
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:98
UART1_IRQHandler:  1:  j 1b
   120cc:	0000006f          	j	120cc <UART1_IRQHandler>

000120d0 <RTC_IRQHandler>:
RTC_IRQHandler():
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:99
RTC_IRQHandler:  1:  j 1b
   120d0:	0000006f          	j	120d0 <RTC_IRQHandler>

000120d4 <ADC_IRQHandler>:
ADC_IRQHandler():
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:100
ADC_IRQHandler:  1:  j 1b
   120d4:	0000006f          	j	120d4 <ADC_IRQHandler>

000120d8 <PWMX_IRQHandler>:
PWMX_IRQHandler():
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:101
PWMX_IRQHandler:  1:  j 1b
   120d8:	0000006f          	j	120d8 <PWMX_IRQHandler>

000120dc <TMR3_IRQHandler>:
TMR3_IRQHandler():
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:102
TMR3_IRQHandler:  1:  j 1b
   120dc:	0000006f          	j	120dc <TMR3_IRQHandler>

000120e0 <UART2_IRQHandler>:
UART2_IRQHandler():
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:103
UART2_IRQHandler:  1:  j 1b
   120e0:	0000006f          	j	120e0 <UART2_IRQHandler>

000120e4 <UART3_IRQHandler>:
UART3_IRQHandler():
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:104
UART3_IRQHandler:  1:  j 1b
   120e4:	0000006f          	j	120e4 <UART3_IRQHandler>

000120e8 <WDOG_BAT_IRQHandler>:
WDOG_BAT_IRQHandler():
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:105
WDOG_BAT_IRQHandler:  1:  j 1b
   120e8:	0000006f          	j	120e8 <WDOG_BAT_IRQHandler>

Disassembly of section .text:

00013000 <handle_reset>:
handle_reset():
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:113
	.weak	handle_reset
	.align	1
handle_reset:
.option push 
.option	norelax 
	la gp, __global_pointer$
   13000:	1fff3197          	auipc	gp,0x1fff3
   13004:	e8018193          	addi	gp,gp,-384 # 20005e80 <__global_pointer$>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:116
.option	pop 
1:
	la sp, _eusrstack 
   13008:	1fff5117          	auipc	sp,0x1fff5
   1300c:	ff810113          	addi	sp,sp,-8 # 20008000 <_eusrstack>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:120

/* Load highcode code  section from flash to RAM */
2:
    la a0, _highcode_lma
   13010:	00000517          	auipc	a0,0x0
   13014:	ff050513          	addi	a0,a0,-16 # 13000 <handle_reset>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:121
    la a1, _highcode_vma_start
   13018:	1fff2597          	auipc	a1,0x1fff2
   1301c:	5e858593          	addi	a1,a1,1512 # 20005600 <GEC_USER_RAM_START>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:122
    la a2, _highcode_vma_end
   13020:	1fff2617          	auipc	a2,0x1fff2
   13024:	5e060613          	addi	a2,a2,1504 # 20005600 <GEC_USER_RAM_START>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:123
    bgeu a1, a2, 2f
   13028:	00c5fc63          	bgeu	a1,a2,13040 <handle_reset+0x40>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:125
1:
    lw t0, (a0)
   1302c:	00052283          	lw	t0,0(a0)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:126
    sw t0, (a1)
   13030:	0055a023          	sw	t0,0(a1)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:127
    addi a0, a0, 4
   13034:	00450513          	addi	a0,a0,4
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:128
    addi a1, a1, 4
   13038:	00458593          	addi	a1,a1,4
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:129
    bltu a1, a2, 1b
   1303c:	fec5e8e3          	bltu	a1,a2,1302c <handle_reset+0x2c>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:133

/* Load data section from flash to RAM */
2:
	la a0, _data_lma
   13040:	00005517          	auipc	a0,0x5
   13044:	8c850513          	addi	a0,a0,-1848 # 17908 <_data_lma>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:134
	la a1, _data_vma
   13048:	1fff2597          	auipc	a1,0x1fff2
   1304c:	63858593          	addi	a1,a1,1592 # 20005680 <gc_period_minus_one>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:135
	la a2, _edata
   13050:	1fff2617          	auipc	a2,0x1fff2
   13054:	63860613          	addi	a2,a2,1592 # 20005688 <_edata>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:136
	bgeu a1, a2, 2f
   13058:	00c5fc63          	bgeu	a1,a2,13070 <handle_reset+0x70>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:138
1:
	lw t0, (a0)
   1305c:	00052283          	lw	t0,0(a0)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:139
	sw t0, (a1)
   13060:	0055a023          	sw	t0,0(a1)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:140
	addi a0, a0, 4
   13064:	00450513          	addi	a0,a0,4
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:141
	addi a1, a1, 4
   13068:	00458593          	addi	a1,a1,4
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:142
	bltu a1, a2, 1b
   1306c:	fec5e8e3          	bltu	a1,a2,1305c <handle_reset+0x5c>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:145
2:
	/* clear bss section */
	la a0, _sbss
   13070:	1fff2517          	auipc	a0,0x1fff2
   13074:	61850513          	addi	a0,a0,1560 # 20005688 <_edata>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:146
	la a1, _ebss
   13078:	1fff2597          	auipc	a1,0x1fff2
   1307c:	61458593          	addi	a1,a1,1556 # 2000568c <_ebss>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:147
	bgeu a0, a1, 2f
   13080:	00b57863          	bgeu	a0,a1,13090 <handle_reset+0x90>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:149
1:
	sw zero, (a0)
   13084:	00052023          	sw	zero,0(a0)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:150
	addi a0, a0, 4
   13088:	00450513          	addi	a0,a0,4
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:151
	bltu a0, a1, 1b
   1308c:	feb56ce3          	bltu	a0,a1,13084 <handle_reset+0x84>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:153
2:
    li t0, 0x1880
   13090:	000022b7          	lui	t0,0x2
   13094:	88028293          	addi	t0,t0,-1920 # 1880 <MCU_SECTORSIZE+0x880>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:154
    csrs mstatus, t0
   13098:	3002a073          	csrs	mstatus,t0
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:156

    jal  Vectors_Init	    /* 跳转并链接到Vectors_Init函数，Vectors_Init：User对BIOS中断向量表的部分继承,构件库函数指针初始化 */		
   1309c:	531000ef          	jal	ra,13dcc <Vectors_Init>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:157
	la t0, _vector_base
   130a0:	fffff297          	auipc	t0,0xfffff
   130a4:	f6428293          	addi	t0,t0,-156 # 12004 <_einit>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:158
    ori t0, t0, 1
   130a8:	0012e293          	ori	t0,t0,1
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:159
	csrw mtvec, t0
   130ac:	30529073          	csrw	mtvec,t0
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:160
	la t0, main
   130b0:	00000297          	auipc	t0,0x0
   130b4:	0b828293          	addi	t0,t0,184 # 13168 <main>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:161
	csrw mepc, t0
   130b8:	34129073          	csrw	mepc,t0
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcs/startup_CH573.S:168
	/* enable vector relocation
	li t0, 0xE000ED14
	li t1, 1
	sw t1, 0(t0)*/
	
	mret
   130bc:	30200073          	mret

000130c0 <memset>:
memset():
   130c0:	433d                	li	t1,15
   130c2:	872a                	mv	a4,a0
   130c4:	02c37363          	bgeu	t1,a2,130ea <memset+0x2a>
   130c8:	00f77793          	andi	a5,a4,15
   130cc:	efbd                	bnez	a5,1314a <memset+0x8a>
   130ce:	e5ad                	bnez	a1,13138 <memset+0x78>
   130d0:	ff067693          	andi	a3,a2,-16
   130d4:	8a3d                	andi	a2,a2,15
   130d6:	96ba                	add	a3,a3,a4
   130d8:	c30c                	sw	a1,0(a4)
   130da:	c34c                	sw	a1,4(a4)
   130dc:	c70c                	sw	a1,8(a4)
   130de:	c74c                	sw	a1,12(a4)
   130e0:	0741                	addi	a4,a4,16
   130e2:	fed76be3          	bltu	a4,a3,130d8 <memset+0x18>
   130e6:	e211                	bnez	a2,130ea <memset+0x2a>
   130e8:	8082                	ret
   130ea:	40c306b3          	sub	a3,t1,a2
   130ee:	068a                	slli	a3,a3,0x2
   130f0:	00000297          	auipc	t0,0x0
   130f4:	9696                	add	a3,a3,t0
   130f6:	00a68067          	jr	10(a3)
   130fa:	00b70723          	sb	a1,14(a4)
   130fe:	00b706a3          	sb	a1,13(a4)
   13102:	00b70623          	sb	a1,12(a4)
   13106:	00b705a3          	sb	a1,11(a4)
   1310a:	00b70523          	sb	a1,10(a4)
   1310e:	00b704a3          	sb	a1,9(a4)
   13112:	00b70423          	sb	a1,8(a4)
   13116:	00b703a3          	sb	a1,7(a4)
   1311a:	00b70323          	sb	a1,6(a4)
   1311e:	00b702a3          	sb	a1,5(a4)
   13122:	00b70223          	sb	a1,4(a4)
   13126:	00b701a3          	sb	a1,3(a4)
   1312a:	00b70123          	sb	a1,2(a4)
   1312e:	00b700a3          	sb	a1,1(a4)
   13132:	00b70023          	sb	a1,0(a4)
   13136:	8082                	ret
   13138:	0ff5f593          	andi	a1,a1,255
   1313c:	00859693          	slli	a3,a1,0x8
   13140:	8dd5                	or	a1,a1,a3
   13142:	01059693          	slli	a3,a1,0x10
   13146:	8dd5                	or	a1,a1,a3
   13148:	b761                	j	130d0 <memset+0x10>
   1314a:	00279693          	slli	a3,a5,0x2
   1314e:	00000297          	auipc	t0,0x0
   13152:	9696                	add	a3,a3,t0
   13154:	8286                	mv	t0,ra
   13156:	fa8680e7          	jalr	-88(a3)
   1315a:	8096                	mv	ra,t0
   1315c:	17c1                	addi	a5,a5,-16
   1315e:	8f1d                	sub	a4,a4,a5
   13160:	963e                	add	a2,a2,a5
   13162:	f8c374e3          	bgeu	t1,a2,130ea <memset+0x2a>
   13166:	b7a5                	j	130ce <memset+0xe>

00013168 <main>:
main():
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/main.c:16

//main.c使用的内部函数声明处---------------------------------------------

//主函数，一般情况下可以认为程序从此开始运行（实际上有启动过程）-----------
int main(void)  //main函数（开头）
{
   13168:	7139                	addi	sp,sp,-64
   1316a:	de06                	sw	ra,60(sp)
   1316c:	dc22                	sw	s0,56(sp)
   1316e:	da26                	sw	s1,52(sp)
   13170:	d84a                	sw	s2,48(sp)
   13172:	d64e                	sw	s3,44(sp)
   13174:	d452                	sw	s4,40(sp)
   13176:	d256                	sw	s5,36(sp)
   13178:	d05a                	sw	s6,32(sp)
   1317a:	ce5e                	sw	s7,28(sp)
   1317c:	cc62                	sw	s8,24(sp)
   1317e:	ca66                	sw	s9,20(sp)
   13180:	c86a                	sw	s10,16(sp)
   13182:	c66e                	sw	s11,12(sp)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/main.c:17
    printf("------------------------------------------------------------\n");   
   13184:	00004517          	auipc	a0,0x4
   13188:	2bc50513          	addi	a0,a0,700 # 17440 <strlen+0x5e>
   1318c:	00002097          	auipc	ra,0x2
   13190:	8aa080e7          	jalr	-1878(ra) # 14a36 <myprintf>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/main.c:18
    printf("★金葫芦提示★                                               \n");
   13194:	00004517          	auipc	a0,0x4
   13198:	2ec50513          	addi	a0,a0,748 # 17480 <strlen+0x9e>
   1319c:	00002097          	auipc	ra,0x2
   131a0:	89a080e7          	jalr	-1894(ra) # 14a36 <myprintf>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/main.c:19
    printf("【中文名称】GEC的NOS编程框架（PWM构件测试样例）               \n");
   131a4:	00004517          	auipc	a0,0x4
   131a8:	31c50513          	addi	a0,a0,796 # 174c0 <strlen+0xde>
   131ac:	00002097          	auipc	ra,0x2
   131b0:	88a080e7          	jalr	-1910(ra) # 14a36 <myprintf>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/main.c:20
	printf("【程序功能】                                                 \n");
   131b4:	00004517          	auipc	a0,0x4
   131b8:	34c50513          	addi	a0,a0,844 # 17500 <strlen+0x11e>
   131bc:	00002097          	auipc	ra,0x2
   131c0:	87a080e7          	jalr	-1926(ra) # 14a36 <myprintf>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/main.c:21
	printf("     ① 程序改变PWM占空比，蓝灯跟随变化；                     \n");
   131c4:	00004517          	auipc	a0,0x4
   131c8:	37c50513          	addi	a0,a0,892 # 17540 <strlen+0x15e>
   131cc:	00002097          	auipc	ra,0x2
   131d0:	86a080e7          	jalr	-1942(ra) # 14a36 <myprintf>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/main.c:22
	printf("     ② 运行PWM-测试程序C#，观察PWM波形                       \n");
   131d4:	00004517          	auipc	a0,0x4
   131d8:	3ac50513          	addi	a0,a0,940 # 17580 <strlen+0x19e>
   131dc:	00002097          	auipc	ra,0x2
   131e0:	85a080e7          	jalr	-1958(ra) # 14a36 <myprintf>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/main.c:23
    printf("【硬件连接】见本工程05_UserBoard文件夹下user.h文件            \n");
   131e4:	00004517          	auipc	a0,0x4
   131e8:	3dc50513          	addi	a0,a0,988 # 175c0 <strlen+0x1de>
   131ec:	00002097          	auipc	ra,0x2
   131f0:	84a080e7          	jalr	-1974(ra) # 14a36 <myprintf>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/main.c:24
    printf("【操作说明】运行PC方的PWM-测试程序C#                         \n");
   131f4:	00004517          	auipc	a0,0x4
   131f8:	40c50513          	addi	a0,a0,1036 # 17600 <strlen+0x21e>
   131fc:	00002097          	auipc	ra,0x2
   13200:	83a080e7          	jalr	-1990(ra) # 14a36 <myprintf>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/main.c:25
    printf("-----------------------------------------------------------\n\0"); 
   13204:	00004517          	auipc	a0,0x4
   13208:	1f050513          	addi	a0,a0,496 # 173f4 <strlen+0x12>
   1320c:	00002097          	auipc	ra,0x2
   13210:	82a080e7          	jalr	-2006(ra) # 14a36 <myprintf>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/main.c:34
    uint32_t mCount;        //PWM高低电平个数
    uint8_t  mPWM_state;    //PWM状态标志
    uint8_t  mFlag;         //电平切换标志

    //【1.2】【不变】关总中断
    DISABLE_INTERRUPTS;
   13214:	42a1                	li	t0,8
   13216:	3002b073          	csrc	mstatus,t0
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/main.c:44
    mFlag=0;            //电平切换标志初始状态为1   

    //【1.4】给全局变量赋初值

    //【1.5】【根据所用到的外部硬件设备】进行用户外设模块初始化化
    gpio_init(LIGHT_BLUE,GPIO_OUTPUT,LIGHT_OFF);    //初始化蓝灯
   1321a:	4605                	li	a2,1
   1321c:	4585                	li	a1,1
   1321e:	10e00513          	li	a0,270
   13222:	00000097          	auipc	ra,0x0
   13226:	2e4080e7          	jalr	740(ra) # 13506 <gpio_init>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/main.c:46
    //PWM输出初始化     时钟频率  PWM周期   占空比  对齐方式   极性 
    pwm_init(PWM_USER, 3000,   1000,     10.0,   PWM_EDGE, PWM_PLUS);  
   1322a:	4801                	li	a6,0
   1322c:	4781                	li	a5,0
   1322e:	00004717          	auipc	a4,0x4
   13232:	20a70713          	addi	a4,a4,522 # 17438 <strlen+0x56>
   13236:	4314                	lw	a3,0(a4)
   13238:	4358                	lw	a4,4(a4)
   1323a:	3e800613          	li	a2,1000
   1323e:	6585                	lui	a1,0x1
   13240:	bb858593          	addi	a1,a1,-1096 # bb8 <GEC_USER_SECTOR_END+0xb93>
   13244:	20000513          	li	a0,512
   13248:	00000097          	auipc	ra,0x0
   1324c:	3b4080e7          	jalr	948(ra) # 135fc <pwm_init>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/main.c:51

    //【1.6】使能模块中断

    //【1.7】【不变】开总中断
    ENABLE_INTERRUPTS;
   13250:	42a1                	li	t0,8
   13252:	3002a073          	csrs	mstatus,t0
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/main.c:39
    mFlag=0;            //电平切换标志初始状态为1   
   13256:	4481                	li	s1,0
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/main.c:38
    mCount = 0;         //PWM高低电平个数
   13258:	4401                	li	s0,0
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/main.c:37
    mduty = 0.0;        //占空比
   1325a:	4981                	li	s3,0
   1325c:	4901                	li	s2,0
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/main.c:59

    //【2】======主循环部分【开头】========================================
    while (1)   //while循环【开头】
    {
        //（2.1）打出PWM波
        if (mCount >= 7)
   1325e:	4a19                	li	s4,6
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/main.c:16
{
   13260:	4a81                	li	s5,0
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/main.c:86
        if ((mPWM_state == 0) && (mFlag == 0))
        {
            mFlag = 1;
            mCount=mCount+1;
            gpio_set(LIGHT_BLUE,0);
            printf("低电平：0\n");
   13262:	00004c97          	auipc	s9,0x4
   13266:	40ec8c93          	addi	s9,s9,1038 # 17670 <strlen+0x28e>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/main.c:63
            mduty= mduty+10.0;
   1326a:	00004c17          	auipc	s8,0x4
   1326e:	1cec0c13          	addi	s8,s8,462 # 17438 <strlen+0x56>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/main.c:65
            printf("占空比=%d, 观察蓝灯,运行PWM-C#！\r\n", (int)mduty);
   13272:	00004b97          	auipc	s7,0x4
   13276:	3ceb8b93          	addi	s7,s7,974 # 17640 <strlen+0x25e>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/main.c:66
            if ((int)mduty >= 90)  mduty = 0.0;
   1327a:	05900b13          	li	s6,89
   1327e:	4d81                	li	s11,0
   13280:	4d01                	li	s10,0
   13282:	a84d                	j	13334 <main+0x1cc>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/main.c:63
            mduty= mduty+10.0;
   13284:	000c2603          	lw	a2,0(s8)
   13288:	004c2683          	lw	a3,4(s8)
   1328c:	854e                	mv	a0,s3
   1328e:	85ca                	mv	a1,s2
   13290:	00002097          	auipc	ra,0x2
   13294:	2da080e7          	jalr	730(ra) # 1556a <__adddf3>
   13298:	89aa                	mv	s3,a0
   1329a:	892e                	mv	s2,a1
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/main.c:64
            pwm_update(PWM_USER, mduty);
   1329c:	85aa                	mv	a1,a0
   1329e:	864a                	mv	a2,s2
   132a0:	20000513          	li	a0,512
   132a4:	00001097          	auipc	ra,0x1
   132a8:	8bc080e7          	jalr	-1860(ra) # 13b60 <pwm_update>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/main.c:65
            printf("占空比=%d, 观察蓝灯,运行PWM-C#！\r\n", (int)mduty);
   132ac:	854e                	mv	a0,s3
   132ae:	85ca                	mv	a1,s2
   132b0:	00004097          	auipc	ra,0x4
   132b4:	ce4080e7          	jalr	-796(ra) # 16f94 <__fixdfsi>
   132b8:	842a                	mv	s0,a0
   132ba:	85aa                	mv	a1,a0
   132bc:	855e                	mv	a0,s7
   132be:	00001097          	auipc	ra,0x1
   132c2:	778080e7          	jalr	1912(ra) # 14a36 <myprintf>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/main.c:66
            if ((int)mduty >= 90)  mduty = 0.0;
   132c6:	008b5463          	bge	s6,s0,132ce <main+0x166>
   132ca:	89ee                	mv	s3,s11
   132cc:	896a                	mv	s2,s10
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/main.c:69
        mPWM_state = gpio_get(INCAP_USER);
   132ce:	10a00513          	li	a0,266
   132d2:	00000097          	auipc	ra,0x0
   132d6:	2ca080e7          	jalr	714(ra) # 1359c <gpio_get>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/main.c:73
        if ((mPWM_state == 1) && (mFlag == 1))
   132da:	4785                	li	a5,1
   132dc:	00f50d63          	beq	a0,a5,132f6 <main+0x18e>
   132e0:	4485                	li	s1,1
   132e2:	4401                	li	s0,0
   132e4:	a881                	j	13334 <main+0x1cc>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/main.c:73 (discriminator 1)
   132e6:	e099                	bnez	s1,132ec <main+0x184>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/main.c:16
{
   132e8:	84d6                	mv	s1,s5
   132ea:	a0a9                	j	13334 <main+0x1cc>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/main.c:76
            mCount=mCount+1;
   132ec:	0405                	addi	s0,s0,1
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/main.c:75
            mFlag = 0;
   132ee:	84d6                	mv	s1,s5
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/main.c:77
            if  (mCount>=7)  continue;
   132f0:	048a6263          	bltu	s4,s0,13334 <main+0x1cc>
   132f4:	a011                	j	132f8 <main+0x190>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/main.c:76
            mCount=mCount+1;
   132f6:	4405                	li	s0,1
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/main.c:78
            gpio_set(LIGHT_BLUE,1);
   132f8:	4585                	li	a1,1
   132fa:	10e00513          	li	a0,270
   132fe:	00000097          	auipc	ra,0x0
   13302:	196080e7          	jalr	406(ra) # 13494 <gpio_set>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/main.c:79
            printf("高电平：1\n");
   13306:	00004517          	auipc	a0,0x4
   1330a:	35e50513          	addi	a0,a0,862 # 17664 <strlen+0x282>
   1330e:	00001097          	auipc	ra,0x1
   13312:	728080e7          	jalr	1832(ra) # 14a36 <myprintf>
   13316:	bfc9                	j	132e8 <main+0x180>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/main.c:84
            mCount=mCount+1;
   13318:	0405                	addi	s0,s0,1
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/main.c:85
            gpio_set(LIGHT_BLUE,0);
   1331a:	85d6                	mv	a1,s5
   1331c:	10e00513          	li	a0,270
   13320:	00000097          	auipc	ra,0x0
   13324:	174080e7          	jalr	372(ra) # 13494 <gpio_set>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/main.c:86
            printf("低电平：0\n");
   13328:	8566                	mv	a0,s9
   1332a:	00001097          	auipc	ra,0x1
   1332e:	70c080e7          	jalr	1804(ra) # 14a36 <myprintf>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/main.c:83
            mFlag = 1;
   13332:	4485                	li	s1,1
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/main.c:59
        if (mCount >= 7)
   13334:	f48a68e3          	bltu	s4,s0,13284 <main+0x11c>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/main.c:69
        mPWM_state = gpio_get(INCAP_USER);
   13338:	10a00513          	li	a0,266
   1333c:	00000097          	auipc	ra,0x0
   13340:	260080e7          	jalr	608(ra) # 1359c <gpio_get>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/main.c:73
        if ((mPWM_state == 1) && (mFlag == 1))
   13344:	4785                	li	a5,1
   13346:	faf500e3          	beq	a0,a5,132e6 <main+0x17e>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/main.c:81
        if ((mPWM_state == 0) && (mFlag == 0))
   1334a:	8d45                	or	a0,a0,s1
   1334c:	0ff57513          	andi	a0,a0,255
   13350:	d561                	beqz	a0,13318 <main+0x1b0>
   13352:	b7cd                	j	13334 <main+0x1cc>

00013354 <flash_erase>:
flash_erase():
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/flash.c:66
//函数返回：函数执行执行状态：0=正常；1=异常。
//参数说明：sect：目标扇区号（范围取决于实际芯片
//功能概要：擦除flash存储器的sect扇区
//======================================================================
uint8_t flash_erase(uint16_t sect)
{
   13354:	1141                	addi	sp,sp,-16
   13356:	c606                	sw	ra,12(sp)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/flash.c:70
    uint32_t StartAddr;
    uint8_t flag;
    StartAddr = (uint32_t)(sect * Flash_Sect_size + Flash_Address);
    flag = FLASH_ROM_ERASE(StartAddr,4096);
   13358:	1fff2797          	auipc	a5,0x1fff2
   1335c:	33078793          	addi	a5,a5,816 # 20005688 <_edata>
   13360:	439c                	lw	a5,0(a5)
   13362:	57fc                	lw	a5,108(a5)
   13364:	6685                	lui	a3,0x1
   13366:	4601                	li	a2,0
   13368:	00c51593          	slli	a1,a0,0xc
   1336c:	4505                	li	a0,1
   1336e:	9782                	jalr	a5
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/flash.c:73
    return flag;

}
   13370:	0ff57513          	andi	a0,a0,255
   13374:	40b2                	lw	ra,12(sp)
   13376:	0141                	addi	sp,sp,16
   13378:	8082                	ret

0001337a <flash_Best>:
flash_Best():
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/flash.c:176
//            buf:待写入数据的首地址
//功能概要：首位地址都对齐的情况下的数据写入
//编程参考：暂无
//======================================================================
uint8_t flash_Best(uint16_t sect,uint16_t offset,uint16_t N,uint8_t *buf)
{
   1337a:	1141                	addi	sp,sp,-16
   1337c:	c606                	sw	ra,12(sp)
   1337e:	8736                	mv	a4,a3
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/flash.c:178
    uint32_t addr;
    addr = (uint32_t)(Flash_Address+sect*Flash_Sect_size+offset);
   13380:	0532                	slli	a0,a0,0xc
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/flash.c:179
    uint8_t flag=FLASH_ROM_WRITE(addr,buf,N);
   13382:	1fff2797          	auipc	a5,0x1fff2
   13386:	30678793          	addi	a5,a5,774 # 20005688 <_edata>
   1338a:	439c                	lw	a5,0(a5)
   1338c:	57fc                	lw	a5,108(a5)
   1338e:	86b2                	mv	a3,a2
   13390:	863a                	mv	a2,a4
   13392:	95aa                	add	a1,a1,a0
   13394:	4509                	li	a0,2
   13396:	9782                	jalr	a5
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/flash.c:181
    return flag;
}
   13398:	0ff57513          	andi	a0,a0,255
   1339c:	40b2                	lw	ra,12(sp)
   1339e:	0141                	addi	sp,sp,16
   133a0:	8082                	ret

000133a2 <flash_read_logic>:
flash_read_logic():
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/flash.c:198
//编程参考：暂无
//=======================================================================
void flash_read_logic(uint8_t* Buffer,uint16_t sect,uint16_t offset,uint32_t N)
{

    uint32_t i, Length = ( N + 3 ) >> 2;
   133a2:	068d                	addi	a3,a3,3
   133a4:	8289                	srli	a3,a3,0x2
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/flash.c:199
    uint32_t* pCode = ( uint32_t* ) (sect * Flash_Sect_size + offset + Flash_Address);
   133a6:	05b2                	slli	a1,a1,0xc
   133a8:	962e                	add	a2,a2,a1
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/flash.c:202
    uint32_t* pBuf = ( uint32_t* ) Buffer;

    for ( i = 0; i < Length; i++ )
   133aa:	ce91                	beqz	a3,133c6 <flash_read_logic+0x24>
   133ac:	068a                	slli	a3,a3,0x2
   133ae:	96aa                	add	a3,a3,a0
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/flash.c:200
    uint32_t* pBuf = ( uint32_t* ) Buffer;
   133b0:	87aa                	mv	a5,a0
   133b2:	40a60533          	sub	a0,a2,a0
   133b6:	00a78733          	add	a4,a5,a0
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/flash.c:204 (discriminator 3)
    {
      *pBuf++ = *pCode++;
   133ba:	0791                	addi	a5,a5,4
   133bc:	4318                	lw	a4,0(a4)
   133be:	fee7ae23          	sw	a4,-4(a5)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/flash.c:202 (discriminator 3)
    for ( i = 0; i < Length; i++ )
   133c2:	fed79ae3          	bne	a5,a3,133b6 <flash_read_logic+0x14>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/flash.c:207
    }

}
   133c6:	8082                	ret

000133c8 <flash_write>:
flash_write():
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/flash.c:107
{
   133c8:	7179                	addi	sp,sp,-48
   133ca:	d606                	sw	ra,44(sp)
   133cc:	d422                	sw	s0,40(sp)
   133ce:	d226                	sw	s1,36(sp)
   133d0:	d04a                	sw	s2,32(sp)
   133d2:	ce4e                	sw	s3,28(sp)
   133d4:	737d                	lui	t1,0xfffff
   133d6:	911a                	add	sp,sp,t1
   133d8:	89aa                	mv	s3,a0
   133da:	892e                	mv	s2,a1
   133dc:	84b2                	mv	s1,a2
   133de:	8436                	mv	s0,a3
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/flash.c:112
    if(offset+N>Flash_Sect_size)
   133e0:	00b60733          	add	a4,a2,a1
   133e4:	6785                	lui	a5,0x1
   133e6:	04e7d663          	bge	a5,a4,13432 <flash_write+0x6a>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/flash.c:116
        flash_write(sect,offset,Flash_Sect_size-offset,buf);
   133ea:	6605                	lui	a2,0x1
   133ec:	8e0d                	sub	a2,a2,a1
   133ee:	0642                	slli	a2,a2,0x10
   133f0:	8241                	srli	a2,a2,0x10
   133f2:	00000097          	auipc	ra,0x0
   133f6:	fd6080e7          	jalr	-42(ra) # 133c8 <flash_write>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/flash.c:118
        flash_write(sect+1,0,N-(Flash_Sect_size-offset),buf+(Flash_Sect_size-offset));
   133fa:	6685                	lui	a3,0x1
   133fc:	412686b3          	sub	a3,a3,s2
   13400:	767d                	lui	a2,0xfffff
   13402:	9626                	add	a2,a2,s1
   13404:	964a                	add	a2,a2,s2
   13406:	00198513          	addi	a0,s3,1
   1340a:	96a2                	add	a3,a3,s0
   1340c:	0642                	slli	a2,a2,0x10
   1340e:	8241                	srli	a2,a2,0x10
   13410:	4581                	li	a1,0
   13412:	0542                	slli	a0,a0,0x10
   13414:	8141                	srli	a0,a0,0x10
   13416:	00000097          	auipc	ra,0x0
   1341a:	fb2080e7          	jalr	-78(ra) # 133c8 <flash_write>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/flash.c:134
}
   1341e:	4501                	li	a0,0
   13420:	6305                	lui	t1,0x1
   13422:	911a                	add	sp,sp,t1
   13424:	50b2                	lw	ra,44(sp)
   13426:	5422                	lw	s0,40(sp)
   13428:	5492                	lw	s1,36(sp)
   1342a:	5902                	lw	s2,32(sp)
   1342c:	49f2                	lw	s3,28(sp)
   1342e:	6145                	addi	sp,sp,48
   13430:	8082                	ret
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/flash.c:124
         flash_read_logic(data,sect,0,Flash_Sect_size); //将当前扇区的全部值读入数组中
   13432:	6685                	lui	a3,0x1
   13434:	4601                	li	a2,0
   13436:	85aa                	mv	a1,a0
   13438:	757d                	lui	a0,0xfffff
   1343a:	6785                	lui	a5,0x1
   1343c:	0818                	addi	a4,sp,16
   1343e:	97ba                	add	a5,a5,a4
   13440:	953e                	add	a0,a0,a5
   13442:	00000097          	auipc	ra,0x0
   13446:	f60080e7          	jalr	-160(ra) # 133a2 <flash_read_logic>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/flash.c:126
         for(i = 0;i<N;i++)
   1344a:	c885                	beqz	s1,1347a <flash_write+0xb2>
   1344c:	87a2                	mv	a5,s0
   1344e:	777d                	lui	a4,0xfffff
   13450:	6685                	lui	a3,0x1
   13452:	0810                	addi	a2,sp,16
   13454:	96b2                	add	a3,a3,a2
   13456:	9736                	add	a4,a4,a3
   13458:	c63a                	sw	a4,12(sp)
   1345a:	012705b3          	add	a1,a4,s2
   1345e:	0405                	addi	s0,s0,1
   13460:	fff48693          	addi	a3,s1,-1
   13464:	06c2                	slli	a3,a3,0x10
   13466:	82c1                	srli	a3,a3,0x10
   13468:	96a2                	add	a3,a3,s0
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/flash.c:128 (discriminator 3)
             data[offset+i] = buf[i];
   1346a:	0007c703          	lbu	a4,0(a5) # 1000 <MCU_SECTORSIZE>
   1346e:	00e58023          	sb	a4,0(a1)
   13472:	0785                	addi	a5,a5,1
   13474:	0585                	addi	a1,a1,1
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/flash.c:126 (discriminator 3)
         for(i = 0;i<N;i++)
   13476:	fed79ae3          	bne	a5,a3,1346a <flash_write+0xa2>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/flash.c:131
         flash_Best(sect,0,Flash_Sect_size,data);
   1347a:	76fd                	lui	a3,0xfffff
   1347c:	6785                	lui	a5,0x1
   1347e:	0818                	addi	a4,sp,16
   13480:	97ba                	add	a5,a5,a4
   13482:	96be                	add	a3,a3,a5
   13484:	6605                	lui	a2,0x1
   13486:	4581                	li	a1,0
   13488:	854e                	mv	a0,s3
   1348a:	00000097          	auipc	ra,0x0
   1348e:	ef0080e7          	jalr	-272(ra) # 1337a <flash_Best>
   13492:	b771                	j	1341e <flash_write+0x56>

00013494 <gpio_set>:
gpio_get_port_pin():
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/gpio.c:361
//功能概要：将传进参数port_pin进行解析，得出具体端口号与引脚号，分别赋值给port与pin,返回。
//       （例：(PTB_NUM)|(9)解析为PORTB与9，并将其分别赋值给port与pin）。
//=====================================================================
void gpio_get_port_pin(uint16_t port_pin,uint8_t* port,uint8_t* pin)
{
    *port = (port_pin>>8);
   13494:	00855793          	srli	a5,a0,0x8
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/gpio.c:362
    *pin = port_pin;
   13498:	0ff57513          	andi	a0,a0,255
gpio_set():
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/gpio.c:70
   switch(port)
   1349c:	c789                	beqz	a5,134a6 <gpio_set+0x12>
   1349e:	4705                	li	a4,1
   134a0:	02e78b63          	beq	a5,a4,134d6 <gpio_set+0x42>
   134a4:	8082                	ret
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/gpio.c:74
       if(1 == state)    //高电平(该引脚对应置位寄存器置1)
   134a6:	4785                	li	a5,1
   134a8:	00f58d63          	beq	a1,a5,134c2 <gpio_set+0x2e>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/gpio.c:77
           R32_PA_CLR |= (1<<pin);
   134ac:	40001737          	lui	a4,0x40001
   134b0:	0ac72683          	lw	a3,172(a4) # 400010ac <_eusrstack+0x1fff90ac>
   134b4:	4785                	li	a5,1
   134b6:	00a79533          	sll	a0,a5,a0
   134ba:	8d55                	or	a0,a0,a3
   134bc:	0aa72623          	sw	a0,172(a4)
   134c0:	8082                	ret
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/gpio.c:75
           R32_PA_OUT |= (1<<pin);
   134c2:	40001737          	lui	a4,0x40001
   134c6:	0a872683          	lw	a3,168(a4) # 400010a8 <_eusrstack+0x1fff90a8>
   134ca:	00a79533          	sll	a0,a5,a0
   134ce:	8d55                	or	a0,a0,a3
   134d0:	0aa72423          	sw	a0,168(a4)
   134d4:	8082                	ret
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/gpio.c:81
      if(1 == state)    //高电平(该引脚对应置位寄存器置1)
   134d6:	4785                	li	a5,1
   134d8:	00f58d63          	beq	a1,a5,134f2 <gpio_set+0x5e>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/gpio.c:84
          R32_PB_CLR |= (1<<pin);
   134dc:	40001737          	lui	a4,0x40001
   134e0:	0cc72683          	lw	a3,204(a4) # 400010cc <_eusrstack+0x1fff90cc>
   134e4:	4785                	li	a5,1
   134e6:	00a79533          	sll	a0,a5,a0
   134ea:	8d55                	or	a0,a0,a3
   134ec:	0ca72623          	sw	a0,204(a4)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/gpio.c:88
}
   134f0:	8082                	ret
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/gpio.c:82
          R32_PB_OUT |= (1<<pin);
   134f2:	40001737          	lui	a4,0x40001
   134f6:	0c872683          	lw	a3,200(a4) # 400010c8 <_eusrstack+0x1fff90c8>
   134fa:	00a79533          	sll	a0,a5,a0
   134fe:	8d55                	or	a0,a0,a3
   13500:	0ca72423          	sw	a0,200(a4)
   13504:	8082                	ret

00013506 <gpio_init>:
gpio_init():
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/gpio.c:24
{
   13506:	1141                	addi	sp,sp,-16
   13508:	c606                	sw	ra,12(sp)
gpio_get_port_pin():
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/gpio.c:361
    *port = (port_pin>>8);
   1350a:	00855793          	srli	a5,a0,0x8
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/gpio.c:362
    *pin = port_pin;
   1350e:	0ff57693          	andi	a3,a0,255
gpio_init():
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/gpio.c:29
    switch(port)
   13512:	c799                	beqz	a5,13520 <gpio_init+0x1a>
   13514:	4705                	li	a4,1
   13516:	04e78463          	beq	a5,a4,1355e <gpio_init+0x58>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/gpio.c:55
}
   1351a:	40b2                	lw	ra,12(sp)
   1351c:	0141                	addi	sp,sp,16
   1351e:	8082                	ret
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/gpio.c:32
        if(dir == 1)  //定义为输出引脚
   13520:	4785                	li	a5,1
   13522:	00f58f63          	beq	a1,a5,13540 <gpio_init+0x3a>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/gpio.c:39
            R32_PA_DIR &=~(1 << pin );
   13526:	40001737          	lui	a4,0x40001
   1352a:	0a072603          	lw	a2,160(a4) # 400010a0 <_eusrstack+0x1fff90a0>
   1352e:	4785                	li	a5,1
   13530:	00d797b3          	sll	a5,a5,a3
   13534:	fff7c793          	not	a5,a5
   13538:	8ff1                	and	a5,a5,a2
   1353a:	0af72023          	sw	a5,160(a4)
   1353e:	bff1                	j	1351a <gpio_init+0x14>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/gpio.c:34
            R32_PA_DIR |= (1 << pin );
   13540:	40001737          	lui	a4,0x40001
   13544:	0a072583          	lw	a1,160(a4) # 400010a0 <_eusrstack+0x1fff90a0>
   13548:	00d797b3          	sll	a5,a5,a3
   1354c:	8fcd                	or	a5,a5,a1
   1354e:	0af72023          	sw	a5,160(a4)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/gpio.c:35
            gpio_set(port_pin,state);
   13552:	85b2                	mv	a1,a2
   13554:	00000097          	auipc	ra,0x0
   13558:	f40080e7          	jalr	-192(ra) # 13494 <gpio_set>
   1355c:	bf7d                	j	1351a <gpio_init+0x14>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/gpio.c:43
        if(dir == 1)  //定义为输出引脚
   1355e:	4785                	li	a5,1
   13560:	00f58f63          	beq	a1,a5,1357e <gpio_init+0x78>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/gpio.c:50
            R32_PB_DIR &=~(1 << pin );
   13564:	40001737          	lui	a4,0x40001
   13568:	0c072603          	lw	a2,192(a4) # 400010c0 <_eusrstack+0x1fff90c0>
   1356c:	4785                	li	a5,1
   1356e:	00d797b3          	sll	a5,a5,a3
   13572:	fff7c793          	not	a5,a5
   13576:	8ff1                	and	a5,a5,a2
   13578:	0cf72023          	sw	a5,192(a4)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/gpio.c:55
}
   1357c:	bf79                	j	1351a <gpio_init+0x14>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/gpio.c:45
            R32_PB_DIR |= (1 << pin );
   1357e:	40001737          	lui	a4,0x40001
   13582:	0c072583          	lw	a1,192(a4) # 400010c0 <_eusrstack+0x1fff90c0>
   13586:	00d797b3          	sll	a5,a5,a3
   1358a:	8fcd                	or	a5,a5,a1
   1358c:	0cf72023          	sw	a5,192(a4)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/gpio.c:46
            gpio_set(port_pin,state);
   13590:	85b2                	mv	a1,a2
   13592:	00000097          	auipc	ra,0x0
   13596:	f02080e7          	jalr	-254(ra) # 13494 <gpio_set>
   1359a:	b741                	j	1351a <gpio_init+0x14>

0001359c <gpio_get>:
gpio_get_port_pin():
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/gpio.c:361
    *port = (port_pin>>8);
   1359c:	00855713          	srli	a4,a0,0x8
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/gpio.c:362
    *pin = port_pin;
   135a0:	0ff57513          	andi	a0,a0,255
gpio_get():
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/gpio.c:104
    tempA=R32_PA_DIR;
   135a4:	400016b7          	lui	a3,0x40001
   135a8:	0a06a603          	lw	a2,160(a3) # 400010a0 <_eusrstack+0x1fff90a0>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/gpio.c:105
    tempB=R32_PB_DIR;
   135ac:	0c06a683          	lw	a3,192(a3)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/gpio.c:106
    switch(port)
   135b0:	c711                	beqz	a4,135bc <gpio_get+0x20>
   135b2:	4685                	li	a3,1
   135b4:	02d70963          	beq	a4,a3,135e6 <gpio_get+0x4a>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/gpio.c:135
}
   135b8:	853e                	mv	a0,a5
   135ba:	8082                	ret
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/gpio.c:109
        if(tempA&(1<<pin))//GPIO输出
   135bc:	4785                	li	a5,1
   135be:	00a797b3          	sll	a5,a5,a0
   135c2:	8e7d                	and	a2,a2,a5
   135c4:	ca09                	beqz	a2,135d6 <gpio_get+0x3a>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/gpio.c:111
            tempA=R32_PA_OUT;
   135c6:	40001737          	lui	a4,0x40001
   135ca:	0a872703          	lw	a4,168(a4) # 400010a8 <_eusrstack+0x1fff90a8>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/gpio.c:112
            if((tempA&(1<<pin)))
   135ce:	8ff9                	and	a5,a5,a4
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/gpio.c:121
                value=1;
   135d0:	00f037b3          	snez	a5,a5
   135d4:	b7d5                	j	135b8 <gpio_get+0x1c>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/gpio.c:119
            tempA=R32_PA_PIN;
   135d6:	40001737          	lui	a4,0x40001
   135da:	0a472703          	lw	a4,164(a4) # 400010a4 <_eusrstack+0x1fff90a4>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/gpio.c:120
            if((tempA&(1<<pin)))
   135de:	8ff9                	and	a5,a5,a4
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/gpio.c:121
                value=1;
   135e0:	00f037b3          	snez	a5,a5
   135e4:	bfd1                	j	135b8 <gpio_get+0x1c>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/gpio.c:127
        tempB=R32_PB_PIN;
   135e6:	400017b7          	lui	a5,0x40001
   135ea:	0c47a703          	lw	a4,196(a5) # 400010c4 <_eusrstack+0x1fff90c4>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/gpio.c:128
        if((tempB&(1<<pin)))
   135ee:	4785                	li	a5,1
   135f0:	00a797b3          	sll	a5,a5,a0
   135f4:	8ff9                	and	a5,a5,a4
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/gpio.c:121
                value=1;
   135f6:	00f037b3          	snez	a5,a5
   135fa:	bf7d                	j	135b8 <gpio_get+0x1c>

000135fc <pwm_init>:
pwm_init():
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:29
//         一个通道不能独立设置，但占空比和极性可以独立设置
//=====================================================================
uint16_t gc_period_minus_one=255;
void pwm_init(uint16_t pwmNo, uint32_t clockFre, uint32_t period, 
               double duty, uint8_t align, uint8_t pol)
{
   135fc:	7179                	addi	sp,sp,-48
   135fe:	d606                	sw	ra,44(sp)
   13600:	d422                	sw	s0,40(sp)
   13602:	d226                	sw	s1,36(sp)
   13604:	d04a                	sw	s2,32(sp)
   13606:	ce4e                	sw	s3,28(sp)
   13608:	cc52                	sw	s4,24(sp)
   1360a:	ca56                	sw	s5,20(sp)
   1360c:	c85a                	sw	s6,16(sp)
   1360e:	c65e                	sw	s7,12(sp)
   13610:	c462                	sw	s8,8(sp)
   13612:	84aa                	mv	s1,a0
   13614:	8aae                	mv	s5,a1
   13616:	8432                	mv	s0,a2
   13618:	8936                	mv	s2,a3
   1361a:	89ba                	mv	s3,a4
   1361c:	8a42                	mv	s4,a6
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:30
    if(pwmNo&0xff){
   1361e:	0ff57793          	andi	a5,a0,255
   13622:	2c078f63          	beqz	a5,13900 <pwm_init+0x304>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:31
        R8_PWM_CLOCK_DIV=60000000/clockFre;
   13626:	039385b7          	lui	a1,0x3938
   1362a:	70058593          	addi	a1,a1,1792 # 3938700 <_data_lma+0x3920df8>
   1362e:	0355d5b3          	divu	a1,a1,s5
   13632:	0ff5f593          	andi	a1,a1,255
   13636:	400057b7          	lui	a5,0x40005
   1363a:	00b781a3          	sb	a1,3(a5) # 40005003 <_eusrstack+0x1fffd003>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:32
        if(pwmNo&CH_PWM4) gpio_init(PTA_NUM|12, GPIO_OUTPUT,1); // PA12 - PWM4
   1363e:	00157793          	andi	a5,a0,1
   13642:	ebad                	bnez	a5,136b4 <pwm_init+0xb8>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:33
        if(pwmNo&CH_PWM5) gpio_init(PTA_NUM|13, GPIO_OUTPUT,1); // PA13 - PWM5
   13644:	0024f793          	andi	a5,s1,2
   13648:	efb5                	bnez	a5,136c4 <pwm_init+0xc8>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:34
        if(pwmNo&CH_PWM6) gpio_init(PTB_NUM|0,  GPIO_OUTPUT,1); // PB0 - PWM6
   1364a:	0044f793          	andi	a5,s1,4
   1364e:	e3d9                	bnez	a5,136d4 <pwm_init+0xd8>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:35
        if(pwmNo&CH_PWM7) gpio_init(PTB_NUM|4,  GPIO_OUTPUT,1); // PB4 - PWM7
   13650:	0084f793          	andi	a5,s1,8
   13654:	ebc9                	bnez	a5,136e6 <pwm_init+0xea>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:36
        if(pwmNo&CH_PWM8) gpio_init(PTB_NUM|6,  GPIO_OUTPUT,1); // PB6 - PWM8
   13656:	0104f793          	andi	a5,s1,16
   1365a:	efd9                	bnez	a5,136f8 <pwm_init+0xfc>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:37
        if(pwmNo&CH_PWM9) gpio_init(PTB_NUM|7,  GPIO_OUTPUT,1); // PB7 - PWM9
   1365c:	0204f793          	andi	a5,s1,32
   13660:	e7cd                	bnez	a5,1370a <pwm_init+0x10e>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:38
        if(pwmNo&CH_PWM10) gpio_init(PTB_NUM|14, GPIO_OUTPUT,1); // PB14 - PWM10
   13662:	0404f793          	andi	a5,s1,64
   13666:	ebdd                	bnez	a5,1371c <pwm_init+0x120>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:39
        if(pwmNo&CH_PWM11) gpio_init(PTB_NUM|23, GPIO_OUTPUT,1); // PB23 - PWM11
   13668:	0804f793          	andi	a5,s1,128
   1366c:	e3e9                	bnez	a5,1372e <pwm_init+0x132>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:42
        
        //设置周期
        switch(period)
   1366e:	04000793          	li	a5,64
   13672:	18f40263          	beq	s0,a5,137f6 <pwm_init+0x1fa>
   13676:	0c87f563          	bgeu	a5,s0,13740 <pwm_init+0x144>
   1367a:	08000793          	li	a5,128
   1367e:	14f40b63          	beq	s0,a5,137d4 <pwm_init+0x1d8>
   13682:	1087f363          	bgeu	a5,s0,13788 <pwm_init+0x18c>
   13686:	0ff00793          	li	a5,255
   1368a:	12f40463          	beq	s0,a5,137b2 <pwm_init+0x1b6>
   1368e:	10000793          	li	a5,256
   13692:	0cf41263          	bne	s0,a5,13756 <pwm_init+0x15a>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:45
        {
            case 256:
                R8_PWM_CONFIG = R8_PWM_CONFIG & 0xf2;
   13696:	40005737          	lui	a4,0x40005
   1369a:	00274783          	lbu	a5,2(a4) # 40005002 <_eusrstack+0x1fffd002>
   1369e:	0f27f793          	andi	a5,a5,242
   136a2:	00f70123          	sb	a5,2(a4)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:46
                gc_period_minus_one=255;
   136a6:	0ff00793          	li	a5,255
   136aa:	1fff2717          	auipc	a4,0x1fff2
   136ae:	fcf71b23          	sh	a5,-42(a4) # 20005680 <gc_period_minus_one>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:47
                break;
   136b2:	a055                	j	13756 <pwm_init+0x15a>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:32 (discriminator 1)
        if(pwmNo&CH_PWM4) gpio_init(PTA_NUM|12, GPIO_OUTPUT,1); // PA12 - PWM4
   136b4:	4605                	li	a2,1
   136b6:	4585                	li	a1,1
   136b8:	4531                	li	a0,12
   136ba:	00000097          	auipc	ra,0x0
   136be:	e4c080e7          	jalr	-436(ra) # 13506 <gpio_init>
   136c2:	b749                	j	13644 <pwm_init+0x48>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:33 (discriminator 1)
        if(pwmNo&CH_PWM5) gpio_init(PTA_NUM|13, GPIO_OUTPUT,1); // PA13 - PWM5
   136c4:	4605                	li	a2,1
   136c6:	4585                	li	a1,1
   136c8:	4535                	li	a0,13
   136ca:	00000097          	auipc	ra,0x0
   136ce:	e3c080e7          	jalr	-452(ra) # 13506 <gpio_init>
   136d2:	bfa5                	j	1364a <pwm_init+0x4e>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:34 (discriminator 1)
        if(pwmNo&CH_PWM6) gpio_init(PTB_NUM|0,  GPIO_OUTPUT,1); // PB0 - PWM6
   136d4:	4605                	li	a2,1
   136d6:	4585                	li	a1,1
   136d8:	10000513          	li	a0,256
   136dc:	00000097          	auipc	ra,0x0
   136e0:	e2a080e7          	jalr	-470(ra) # 13506 <gpio_init>
   136e4:	b7b5                	j	13650 <pwm_init+0x54>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:35 (discriminator 1)
        if(pwmNo&CH_PWM7) gpio_init(PTB_NUM|4,  GPIO_OUTPUT,1); // PB4 - PWM7
   136e6:	4605                	li	a2,1
   136e8:	4585                	li	a1,1
   136ea:	10400513          	li	a0,260
   136ee:	00000097          	auipc	ra,0x0
   136f2:	e18080e7          	jalr	-488(ra) # 13506 <gpio_init>
   136f6:	b785                	j	13656 <pwm_init+0x5a>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:36 (discriminator 1)
        if(pwmNo&CH_PWM8) gpio_init(PTB_NUM|6,  GPIO_OUTPUT,1); // PB6 - PWM8
   136f8:	4605                	li	a2,1
   136fa:	4585                	li	a1,1
   136fc:	10600513          	li	a0,262
   13700:	00000097          	auipc	ra,0x0
   13704:	e06080e7          	jalr	-506(ra) # 13506 <gpio_init>
   13708:	bf91                	j	1365c <pwm_init+0x60>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:37 (discriminator 1)
        if(pwmNo&CH_PWM9) gpio_init(PTB_NUM|7,  GPIO_OUTPUT,1); // PB7 - PWM9
   1370a:	4605                	li	a2,1
   1370c:	4585                	li	a1,1
   1370e:	10700513          	li	a0,263
   13712:	00000097          	auipc	ra,0x0
   13716:	df4080e7          	jalr	-524(ra) # 13506 <gpio_init>
   1371a:	b7a1                	j	13662 <pwm_init+0x66>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:38 (discriminator 1)
        if(pwmNo&CH_PWM10) gpio_init(PTB_NUM|14, GPIO_OUTPUT,1); // PB14 - PWM10
   1371c:	4605                	li	a2,1
   1371e:	4585                	li	a1,1
   13720:	10e00513          	li	a0,270
   13724:	00000097          	auipc	ra,0x0
   13728:	de2080e7          	jalr	-542(ra) # 13506 <gpio_init>
   1372c:	bf35                	j	13668 <pwm_init+0x6c>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:39 (discriminator 1)
        if(pwmNo&CH_PWM11) gpio_init(PTB_NUM|23, GPIO_OUTPUT,1); // PB23 - PWM11
   1372e:	4605                	li	a2,1
   13730:	4585                	li	a1,1
   13732:	11700513          	li	a0,279
   13736:	00000097          	auipc	ra,0x0
   1373a:	dd0080e7          	jalr	-560(ra) # 13506 <gpio_init>
   1373e:	bf05                	j	1366e <pwm_init+0x72>
   13740:	02000793          	li	a5,32
   13744:	0ef40b63          	beq	s0,a5,1383a <pwm_init+0x23e>
   13748:	03f00793          	li	a5,63
   1374c:	0cf40663          	beq	s0,a5,13818 <pwm_init+0x21c>
   13750:	47fd                	li	a5,31
   13752:	10f40463          	beq	s0,a5,1385a <pwm_init+0x25e>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:88

            default:
                break;
        }
        
        (pol==PWM_PLUS) ? (R8_PWM_POLAR &= ~(pwmNo)):(R8_PWM_POLAR |= (pwmNo)) ;
   13756:	120a1063          	bnez	s4,13876 <pwm_init+0x27a>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:88 (discriminator 1)
   1375a:	40005737          	lui	a4,0x40005
   1375e:	00174683          	lbu	a3,1(a4) # 40005001 <_eusrstack+0x1fffd001>
   13762:	fff4c793          	not	a5,s1
   13766:	8ff5                	and	a5,a5,a3
   13768:	00f700a3          	sb	a5,1(a4)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:29 (discriminator 1)
{
   1376c:	4401                	li	s0,0
   1376e:	40005b37          	lui	s6,0x40005
   13772:	0b11                	addi	s6,s6,4
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:93 (discriminator 1)
        for(uint8_t i = 0; i < 8; i++)
        {
            if((pwmNo >> i) & 1)
            {
                *((volatile uint8_t *)((&R8_PWM4_DATA) + i)) =(uint8_t)( gc_period_minus_one*duty/100);
   13774:	1fff2c17          	auipc	s8,0x1fff2
   13778:	f0cc0c13          	addi	s8,s8,-244 # 20005680 <gc_period_minus_one>
   1377c:	00004b97          	auipc	s7,0x4
   13780:	f04b8b93          	addi	s7,s7,-252 # 17680 <strlen+0x29e>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:89 (discriminator 1)
        for(uint8_t i = 0; i < 8; i++)
   13784:	4aa1                	li	s5,8
   13786:	a229                	j	13890 <pwm_init+0x294>
   13788:	07f00793          	li	a5,127
   1378c:	fcf415e3          	bne	s0,a5,13756 <pwm_init+0x15a>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:60
                R8_PWM_CONFIG = (R8_PWM_CONFIG & 0xf2) | (1 << 2) | 0x01;
   13790:	40005737          	lui	a4,0x40005
   13794:	00274783          	lbu	a5,2(a4) # 40005002 <_eusrstack+0x1fffd002>
   13798:	0f27f793          	andi	a5,a5,242
   1379c:	0057e793          	ori	a5,a5,5
   137a0:	00f70123          	sb	a5,2(a4)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:61
                gc_period_minus_one=126;
   137a4:	07e00793          	li	a5,126
   137a8:	1fff2717          	auipc	a4,0x1fff2
   137ac:	ecf71c23          	sh	a5,-296(a4) # 20005680 <gc_period_minus_one>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:62
                break;
   137b0:	b75d                	j	13756 <pwm_init+0x15a>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:50
                R8_PWM_CONFIG = (R8_PWM_CONFIG & 0xf2) | 0x01;
   137b2:	40005737          	lui	a4,0x40005
   137b6:	00274783          	lbu	a5,2(a4) # 40005002 <_eusrstack+0x1fffd002>
   137ba:	0f27f793          	andi	a5,a5,242
   137be:	0017e793          	ori	a5,a5,1
   137c2:	00f70123          	sb	a5,2(a4)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:51
                gc_period_minus_one=254;
   137c6:	0fe00793          	li	a5,254
   137ca:	1fff2717          	auipc	a4,0x1fff2
   137ce:	eaf71b23          	sh	a5,-330(a4) # 20005680 <gc_period_minus_one>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:52
                break;
   137d2:	b751                	j	13756 <pwm_init+0x15a>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:55
                R8_PWM_CONFIG = (R8_PWM_CONFIG & 0xf2) | (1 << 2);
   137d4:	40005737          	lui	a4,0x40005
   137d8:	00274783          	lbu	a5,2(a4) # 40005002 <_eusrstack+0x1fffd002>
   137dc:	0f27f793          	andi	a5,a5,242
   137e0:	0047e793          	ori	a5,a5,4
   137e4:	00f70123          	sb	a5,2(a4)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:56
                gc_period_minus_one=127;
   137e8:	07f00793          	li	a5,127
   137ec:	1fff2717          	auipc	a4,0x1fff2
   137f0:	e8f71a23          	sh	a5,-364(a4) # 20005680 <gc_period_minus_one>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:57
                break;
   137f4:	b78d                	j	13756 <pwm_init+0x15a>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:65
                R8_PWM_CONFIG = (R8_PWM_CONFIG & 0xf2) | (2 << 2);
   137f6:	40005737          	lui	a4,0x40005
   137fa:	00274783          	lbu	a5,2(a4) # 40005002 <_eusrstack+0x1fffd002>
   137fe:	0f27f793          	andi	a5,a5,242
   13802:	0087e793          	ori	a5,a5,8
   13806:	00f70123          	sb	a5,2(a4)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:66
                gc_period_minus_one=63;
   1380a:	03f00793          	li	a5,63
   1380e:	1fff2717          	auipc	a4,0x1fff2
   13812:	e6f71923          	sh	a5,-398(a4) # 20005680 <gc_period_minus_one>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:67
                break;
   13816:	b781                	j	13756 <pwm_init+0x15a>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:70
                R8_PWM_CONFIG = (R8_PWM_CONFIG & 0xf2) | (2 << 2) | 0x01;
   13818:	40005737          	lui	a4,0x40005
   1381c:	00274783          	lbu	a5,2(a4) # 40005002 <_eusrstack+0x1fffd002>
   13820:	0f27f793          	andi	a5,a5,242
   13824:	0097e793          	ori	a5,a5,9
   13828:	00f70123          	sb	a5,2(a4)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:71
                gc_period_minus_one=62;
   1382c:	03e00793          	li	a5,62
   13830:	1fff2717          	auipc	a4,0x1fff2
   13834:	e4f71823          	sh	a5,-432(a4) # 20005680 <gc_period_minus_one>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:72
                break;
   13838:	bf39                	j	13756 <pwm_init+0x15a>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:75
                R8_PWM_CONFIG = (R8_PWM_CONFIG & 0xf2) | (3 << 2);
   1383a:	40005737          	lui	a4,0x40005
   1383e:	00274783          	lbu	a5,2(a4) # 40005002 <_eusrstack+0x1fffd002>
   13842:	0f27f793          	andi	a5,a5,242
   13846:	00c7e793          	ori	a5,a5,12
   1384a:	00f70123          	sb	a5,2(a4)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:76
                gc_period_minus_one=31;
   1384e:	47fd                	li	a5,31
   13850:	1fff2717          	auipc	a4,0x1fff2
   13854:	e2f71823          	sh	a5,-464(a4) # 20005680 <gc_period_minus_one>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:77
                break;
   13858:	bdfd                	j	13756 <pwm_init+0x15a>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:80
                R8_PWM_CONFIG = (R8_PWM_CONFIG & 0xf2) | (3 << 2) | 0x01;
   1385a:	40005737          	lui	a4,0x40005
   1385e:	00274783          	lbu	a5,2(a4) # 40005002 <_eusrstack+0x1fffd002>
   13862:	00d7e793          	ori	a5,a5,13
   13866:	00f70123          	sb	a5,2(a4)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:81
                gc_period_minus_one=30;
   1386a:	47f9                	li	a5,30
   1386c:	1fff2717          	auipc	a4,0x1fff2
   13870:	e0f71a23          	sh	a5,-492(a4) # 20005680 <gc_period_minus_one>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:82
                break;
   13874:	b5cd                	j	13756 <pwm_init+0x15a>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:88 (discriminator 2)
        (pol==PWM_PLUS) ? (R8_PWM_POLAR &= ~(pwmNo)):(R8_PWM_POLAR |= (pwmNo)) ;
   13876:	40005737          	lui	a4,0x40005
   1387a:	00174783          	lbu	a5,1(a4) # 40005001 <_eusrstack+0x1fffd001>
   1387e:	8fc5                	or	a5,a5,s1
   13880:	0ff7f793          	andi	a5,a5,255
   13884:	00f700a3          	sb	a5,1(a4)
   13888:	b5d5                	j	1376c <pwm_init+0x170>
   1388a:	0405                	addi	s0,s0,1
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:89 (discriminator 2)
        for(uint8_t i = 0; i < 8; i++)
   1388c:	05540563          	beq	s0,s5,138d6 <pwm_init+0x2da>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:91
            if((pwmNo >> i) & 1)
   13890:	4084d7b3          	sra	a5,s1,s0
   13894:	8b85                	andi	a5,a5,1
   13896:	dbf5                	beqz	a5,1388a <pwm_init+0x28e>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:93
                *((volatile uint8_t *)((&R8_PWM4_DATA) + i)) =(uint8_t)( gc_period_minus_one*duty/100);
   13898:	01640a33          	add	s4,s0,s6
   1389c:	000c5503          	lhu	a0,0(s8)
   138a0:	00003097          	auipc	ra,0x3
   138a4:	7b8080e7          	jalr	1976(ra) # 17058 <__floatsidf>
   138a8:	864a                	mv	a2,s2
   138aa:	86ce                	mv	a3,s3
   138ac:	00003097          	auipc	ra,0x3
   138b0:	ada080e7          	jalr	-1318(ra) # 16386 <__muldf3>
   138b4:	000ba603          	lw	a2,0(s7)
   138b8:	004ba683          	lw	a3,4(s7)
   138bc:	00002097          	auipc	ra,0x2
   138c0:	3e6080e7          	jalr	998(ra) # 15ca2 <__divdf3>
   138c4:	00003097          	auipc	ra,0x3
   138c8:	738080e7          	jalr	1848(ra) # 16ffc <__fixunsdfsi>
   138cc:	0ff57513          	andi	a0,a0,255
   138d0:	00aa0023          	sb	a0,0(s4)
   138d4:	bf5d                	j	1388a <pwm_init+0x28e>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:96
            }
        }
        R8_PWM_OUT_EN |= pwmNo;
   138d6:	40005737          	lui	a4,0x40005
   138da:	00074783          	lbu	a5,0(a4) # 40005000 <_eusrstack+0x1fffd000>
   138de:	8cdd                	or	s1,s1,a5
   138e0:	0ff4f493          	andi	s1,s1,255
   138e4:	00970023          	sb	s1,0(a4)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:137
            
            R32_PB_PD_DRV &= ~22;
            R32_PB_DIR |= 22;
        }
    }
}
   138e8:	50b2                	lw	ra,44(sp)
   138ea:	5422                	lw	s0,40(sp)
   138ec:	5492                	lw	s1,36(sp)
   138ee:	5902                	lw	s2,32(sp)
   138f0:	49f2                	lw	s3,28(sp)
   138f2:	4a62                	lw	s4,24(sp)
   138f4:	4ad2                	lw	s5,20(sp)
   138f6:	4b42                	lw	s6,16(sp)
   138f8:	4bb2                	lw	s7,12(sp)
   138fa:	4c22                	lw	s8,8(sp)
   138fc:	6145                	addi	sp,sp,48
   138fe:	8082                	ret
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:97
    }else if(pwmNo & 0xf00){
   13900:	6785                	lui	a5,0x1
   13902:	f0078793          	addi	a5,a5,-256 # f00 <GEC_USER_SECTOR_END+0xedb>
   13906:	8fe9                	and	a5,a5,a0
   13908:	d3e5                	beqz	a5,138e8 <pwm_init+0x2ec>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:98
        if(pwmNo&PWM_TIM0){
   1390a:	10057793          	andi	a5,a0,256
   1390e:	c3d1                	beqz	a5,13992 <pwm_init+0x396>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:99
            R32_TMR0_CNT_END = period * 60000000ll / clockFre;
   13910:	03938537          	lui	a0,0x3938
   13914:	70050513          	addi	a0,a0,1792 # 3938700 <_data_lma+0x3920df8>
   13918:	02a635b3          	mulhu	a1,a2,a0
   1391c:	8656                	mv	a2,s5
   1391e:	4681                	li	a3,0
   13920:	02a40533          	mul	a0,s0,a0
   13924:	00001097          	auipc	ra,0x1
   13928:	148080e7          	jalr	328(ra) # 14a6c <__divdi3>
   1392c:	40002b37          	lui	s6,0x40002
   13930:	00ab2623          	sw	a0,12(s6) # 4000200c <_eusrstack+0x1fffa00c>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:100
            R8_TMR0_CTRL_MOD = RB_TMR_ALL_CLEAR;
   13934:	4789                	li	a5,2
   13936:	00fb0023          	sb	a5,0(s6)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:101
            R32_TMR0_FIFO = R32_TMR0_CNT_END * duty / 100;
   1393a:	00cb2503          	lw	a0,12(s6)
   1393e:	00003097          	auipc	ra,0x3
   13942:	790080e7          	jalr	1936(ra) # 170ce <__floatunsidf>
   13946:	864a                	mv	a2,s2
   13948:	86ce                	mv	a3,s3
   1394a:	00003097          	auipc	ra,0x3
   1394e:	a3c080e7          	jalr	-1476(ra) # 16386 <__muldf3>
   13952:	00004797          	auipc	a5,0x4
   13956:	d2e78793          	addi	a5,a5,-722 # 17680 <strlen+0x29e>
   1395a:	4390                	lw	a2,0(a5)
   1395c:	43d4                	lw	a3,4(a5)
   1395e:	00002097          	auipc	ra,0x2
   13962:	344080e7          	jalr	836(ra) # 15ca2 <__divdf3>
   13966:	00003097          	auipc	ra,0x3
   1396a:	696080e7          	jalr	1686(ra) # 16ffc <__fixunsdfsi>
   1396e:	00ab2823          	sw	a0,16(s6)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:102
            R8_TMR0_CTRL_MOD = RB_TMR_COUNT_EN | RB_TMR_OUT_EN | (1 << 4) | (0B00 << 6);
   13972:	47f1                	li	a5,28
   13974:	00fb0023          	sb	a5,0(s6)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:103
            R32_PA_PD_DRV &= ~9;
   13978:	400017b7          	lui	a5,0x40001
   1397c:	0b47a703          	lw	a4,180(a5) # 400010b4 <_eusrstack+0x1fff90b4>
   13980:	9b59                	andi	a4,a4,-10
   13982:	0ae7aa23          	sw	a4,180(a5)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:104
            R32_PA_DIR |= 9;
   13986:	0a07a703          	lw	a4,160(a5)
   1398a:	00976713          	ori	a4,a4,9
   1398e:	0ae7a023          	sw	a4,160(a5)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:106
        if(pwmNo&PWM_TIM1){
   13992:	2004f793          	andi	a5,s1,512
   13996:	cfd1                	beqz	a5,13a32 <pwm_init+0x436>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:107
            R32_PB_PD_DRV &= ~(1<<10);
   13998:	400017b7          	lui	a5,0x40001
   1399c:	0d47a703          	lw	a4,212(a5) # 400010d4 <_eusrstack+0x1fff90d4>
   139a0:	bff77713          	andi	a4,a4,-1025
   139a4:	0ce7aa23          	sw	a4,212(a5)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:108
            R32_PB_DIR |= (1<<10);
   139a8:	0c07a703          	lw	a4,192(a5)
   139ac:	40076713          	ori	a4,a4,1024
   139b0:	0ce7a023          	sw	a4,192(a5)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:109
            R16_PIN_ALTERNATE |= RB_PIN_TMR1;
   139b4:	0187d703          	lhu	a4,24(a5)
   139b8:	00276713          	ori	a4,a4,2
   139bc:	00e79c23          	sh	a4,24(a5)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:111
            R8_TMR1_CTRL_MOD = RB_TMR_ALL_CLEAR;
   139c0:	40002b37          	lui	s6,0x40002
   139c4:	4789                	li	a5,2
   139c6:	40fb0023          	sb	a5,1024(s6) # 40002400 <_eusrstack+0x1fffa400>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:112
            R32_TMR1_CNT_END = period * 60000000ll / clockFre;
   139ca:	03938537          	lui	a0,0x3938
   139ce:	70050513          	addi	a0,a0,1792 # 3938700 <_data_lma+0x3920df8>
   139d2:	02a435b3          	mulhu	a1,s0,a0
   139d6:	8656                	mv	a2,s5
   139d8:	4681                	li	a3,0
   139da:	02a40533          	mul	a0,s0,a0
   139de:	00001097          	auipc	ra,0x1
   139e2:	08e080e7          	jalr	142(ra) # 14a6c <__divdi3>
   139e6:	40ab2623          	sw	a0,1036(s6)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:113
            R8_TMR1_CTRL_MOD = RB_TMR_COUNT_EN | RB_TMR_OUT_EN | (pol << 4) | (0B11 << 6);
   139ea:	004a1793          	slli	a5,s4,0x4
   139ee:	fcc7e793          	ori	a5,a5,-52
   139f2:	0ff7f793          	andi	a5,a5,255
   139f6:	40fb0023          	sb	a5,1024(s6)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:114
            R32_TMR1_FIFO =    R32_TMR1_CNT_END * duty / 100;
   139fa:	40cb2503          	lw	a0,1036(s6)
   139fe:	00003097          	auipc	ra,0x3
   13a02:	6d0080e7          	jalr	1744(ra) # 170ce <__floatunsidf>
   13a06:	864a                	mv	a2,s2
   13a08:	86ce                	mv	a3,s3
   13a0a:	00003097          	auipc	ra,0x3
   13a0e:	97c080e7          	jalr	-1668(ra) # 16386 <__muldf3>
   13a12:	00004797          	auipc	a5,0x4
   13a16:	c6e78793          	addi	a5,a5,-914 # 17680 <strlen+0x29e>
   13a1a:	4390                	lw	a2,0(a5)
   13a1c:	43d4                	lw	a3,4(a5)
   13a1e:	00002097          	auipc	ra,0x2
   13a22:	284080e7          	jalr	644(ra) # 15ca2 <__divdf3>
   13a26:	00003097          	auipc	ra,0x3
   13a2a:	5d6080e7          	jalr	1494(ra) # 16ffc <__fixunsdfsi>
   13a2e:	40ab2823          	sw	a0,1040(s6)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:116
        if(pwmNo&PWM_TIM2){
   13a32:	4004f793          	andi	a5,s1,1024
   13a36:	cfd1                	beqz	a5,13ad2 <pwm_init+0x4d6>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:117
            R32_PB_PD_DRV &= ~(1<<11);
   13a38:	400017b7          	lui	a5,0x40001
   13a3c:	0d47a703          	lw	a4,212(a5) # 400010d4 <_eusrstack+0x1fff90d4>
   13a40:	76fd                	lui	a3,0xfffff
   13a42:	7ff68693          	addi	a3,a3,2047 # fffff7ff <_eusrstack+0xdfff77ff>
   13a46:	8f75                	and	a4,a4,a3
   13a48:	0ce7aa23          	sw	a4,212(a5)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:118
            R32_PB_DIR |= (1<<11);
   13a4c:	0c07a703          	lw	a4,192(a5)
   13a50:	6685                	lui	a3,0x1
   13a52:	80068693          	addi	a3,a3,-2048 # 800 <GEC_USER_SECTOR_END+0x7db>
   13a56:	8f55                	or	a4,a4,a3
   13a58:	0ce7a023          	sw	a4,192(a5)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:119
            R16_PIN_ALTERNATE |= RB_PIN_TMR2;
   13a5c:	0187d703          	lhu	a4,24(a5)
   13a60:	00476713          	ori	a4,a4,4
   13a64:	00e79c23          	sh	a4,24(a5)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:121
            R8_TMR2_CTRL_MOD = RB_TMR_ALL_CLEAR;
   13a68:	40003a37          	lui	s4,0x40003
   13a6c:	4789                	li	a5,2
   13a6e:	80fa0023          	sb	a5,-2048(s4) # 40002800 <_eusrstack+0x1fffa800>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:122
            R32_TMR2_CNT_END = period * 60000000ll / clockFre;
   13a72:	03938537          	lui	a0,0x3938
   13a76:	70050513          	addi	a0,a0,1792 # 3938700 <_data_lma+0x3920df8>
   13a7a:	02a435b3          	mulhu	a1,s0,a0
   13a7e:	8656                	mv	a2,s5
   13a80:	4681                	li	a3,0
   13a82:	02a40533          	mul	a0,s0,a0
   13a86:	00001097          	auipc	ra,0x1
   13a8a:	fe6080e7          	jalr	-26(ra) # 14a6c <__divdi3>
   13a8e:	80aa2623          	sw	a0,-2036(s4)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:123
            R8_TMR2_CTRL_MOD = RB_TMR_COUNT_EN | RB_TMR_OUT_EN | (1 << 4) | (0B11 << 6);
   13a92:	fdc00793          	li	a5,-36
   13a96:	80fa0023          	sb	a5,-2048(s4)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:124
            R32_TMR2_FIFO =    R32_TMR2_CNT_END * duty / 100;
   13a9a:	80ca2503          	lw	a0,-2036(s4)
   13a9e:	00003097          	auipc	ra,0x3
   13aa2:	630080e7          	jalr	1584(ra) # 170ce <__floatunsidf>
   13aa6:	864a                	mv	a2,s2
   13aa8:	86ce                	mv	a3,s3
   13aaa:	00003097          	auipc	ra,0x3
   13aae:	8dc080e7          	jalr	-1828(ra) # 16386 <__muldf3>
   13ab2:	00004797          	auipc	a5,0x4
   13ab6:	bce78793          	addi	a5,a5,-1074 # 17680 <strlen+0x29e>
   13aba:	4390                	lw	a2,0(a5)
   13abc:	43d4                	lw	a3,4(a5)
   13abe:	00002097          	auipc	ra,0x2
   13ac2:	1e4080e7          	jalr	484(ra) # 15ca2 <__divdf3>
   13ac6:	00003097          	auipc	ra,0x3
   13aca:	536080e7          	jalr	1334(ra) # 16ffc <__fixunsdfsi>
   13ace:	80aa2823          	sw	a0,-2032(s4)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:127
        if(pwmNo&PWM_TIM3){            
   13ad2:	01449793          	slli	a5,s1,0x14
   13ad6:	e007d9e3          	bgez	a5,138e8 <pwm_init+0x2ec>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:128
            R8_TMR2_CTRL_MOD = RB_TMR_ALL_CLEAR;
   13ada:	400034b7          	lui	s1,0x40003
   13ade:	4789                	li	a5,2
   13ae0:	80f48023          	sb	a5,-2048(s1) # 40002800 <_eusrstack+0x1fffa800>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:129
            R32_TMR2_CNT_END = period * 60000000ll / clockFre;
   13ae4:	03938537          	lui	a0,0x3938
   13ae8:	70050513          	addi	a0,a0,1792 # 3938700 <_data_lma+0x3920df8>
   13aec:	02a435b3          	mulhu	a1,s0,a0
   13af0:	8656                	mv	a2,s5
   13af2:	4681                	li	a3,0
   13af4:	02a40533          	mul	a0,s0,a0
   13af8:	00001097          	auipc	ra,0x1
   13afc:	f74080e7          	jalr	-140(ra) # 14a6c <__divdi3>
   13b00:	80a4a623          	sw	a0,-2036(s1)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:130
            R8_TMR2_CTRL_MOD = RB_TMR_COUNT_EN | RB_TMR_OUT_EN | (1 << 4) | (0B11 << 6);
   13b04:	fdc00793          	li	a5,-36
   13b08:	80f48023          	sb	a5,-2048(s1)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:131
            R32_TMR2_FIFO =    R32_TMR3_CNT_END * duty / 100;
   13b0c:	c0c4a503          	lw	a0,-1012(s1)
   13b10:	00003097          	auipc	ra,0x3
   13b14:	5be080e7          	jalr	1470(ra) # 170ce <__floatunsidf>
   13b18:	864a                	mv	a2,s2
   13b1a:	86ce                	mv	a3,s3
   13b1c:	00003097          	auipc	ra,0x3
   13b20:	86a080e7          	jalr	-1942(ra) # 16386 <__muldf3>
   13b24:	00004797          	auipc	a5,0x4
   13b28:	b5c78793          	addi	a5,a5,-1188 # 17680 <strlen+0x29e>
   13b2c:	4390                	lw	a2,0(a5)
   13b2e:	43d4                	lw	a3,4(a5)
   13b30:	00002097          	auipc	ra,0x2
   13b34:	172080e7          	jalr	370(ra) # 15ca2 <__divdf3>
   13b38:	00003097          	auipc	ra,0x3
   13b3c:	4c4080e7          	jalr	1220(ra) # 16ffc <__fixunsdfsi>
   13b40:	80a4a823          	sw	a0,-2032(s1)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:133
            R32_PB_PD_DRV &= ~22;
   13b44:	400017b7          	lui	a5,0x40001
   13b48:	0d47a703          	lw	a4,212(a5) # 400010d4 <_eusrstack+0x1fff90d4>
   13b4c:	9b25                	andi	a4,a4,-23
   13b4e:	0ce7aa23          	sw	a4,212(a5)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:134
            R32_PB_DIR |= 22;
   13b52:	0c07a703          	lw	a4,192(a5)
   13b56:	01676713          	ori	a4,a4,22
   13b5a:	0ce7a023          	sw	a4,192(a5)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:137
}
   13b5e:	b369                	j	138e8 <pwm_init+0x2ec>

00013b60 <pwm_update>:
pwm_update():
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:147
// 参数说明：pwmNo：通道号，使用.h文件中的宏常数
//          duty：占空比：0.0-100.0对应0%-100%
// 函数返回：无
//=====================================================================
void pwm_update(uint16_t pwmNo, double duty)
{
   13b60:	7179                	addi	sp,sp,-48
   13b62:	d606                	sw	ra,44(sp)
   13b64:	d422                	sw	s0,40(sp)
   13b66:	d226                	sw	s1,36(sp)
   13b68:	d04a                	sw	s2,32(sp)
   13b6a:	ce4e                	sw	s3,28(sp)
   13b6c:	cc52                	sw	s4,24(sp)
   13b6e:	ca56                	sw	s5,20(sp)
   13b70:	c85a                	sw	s6,16(sp)
   13b72:	c65e                	sw	s7,12(sp)
   13b74:	c462                	sw	s8,8(sp)
   13b76:	8a2a                	mv	s4,a0
   13b78:	892e                	mv	s2,a1
   13b7a:	89b2                	mv	s3,a2
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:148
    if(pwmNo&0xff){
   13b7c:	0ff57793          	andi	a5,a0,255
   13b80:	c7ad                	beqz	a5,13bea <pwm_update+0x8a>
   13b82:	4401                	li	s0,0
   13b84:	40005b37          	lui	s6,0x40005
   13b88:	0b11                	addi	s6,s6,4
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:153
        for(uint8_t i = 0; i < 8; i++)
        {
            if((pwmNo >> i) & 1)
            {
                *((volatile uint8_t *)((&R8_PWM4_DATA) + i)) =(uint8_t)( gc_period_minus_one*duty/100);
   13b8a:	1fff2c17          	auipc	s8,0x1fff2
   13b8e:	af6c0c13          	addi	s8,s8,-1290 # 20005680 <gc_period_minus_one>
   13b92:	00004b97          	auipc	s7,0x4
   13b96:	aeeb8b93          	addi	s7,s7,-1298 # 17680 <strlen+0x29e>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:149
        for(uint8_t i = 0; i < 8; i++)
   13b9a:	4aa1                	li	s5,8
   13b9c:	a021                	j	13ba4 <pwm_update+0x44>
   13b9e:	0405                	addi	s0,s0,1
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:149 (discriminator 2)
   13ba0:	15540e63          	beq	s0,s5,13cfc <pwm_update+0x19c>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:151
            if((pwmNo >> i) & 1)
   13ba4:	408a57b3          	sra	a5,s4,s0
   13ba8:	8b85                	andi	a5,a5,1
   13baa:	dbf5                	beqz	a5,13b9e <pwm_update+0x3e>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:153
                *((volatile uint8_t *)((&R8_PWM4_DATA) + i)) =(uint8_t)( gc_period_minus_one*duty/100);
   13bac:	016404b3          	add	s1,s0,s6
   13bb0:	000c5503          	lhu	a0,0(s8)
   13bb4:	00003097          	auipc	ra,0x3
   13bb8:	4a4080e7          	jalr	1188(ra) # 17058 <__floatsidf>
   13bbc:	864a                	mv	a2,s2
   13bbe:	86ce                	mv	a3,s3
   13bc0:	00002097          	auipc	ra,0x2
   13bc4:	7c6080e7          	jalr	1990(ra) # 16386 <__muldf3>
   13bc8:	000ba603          	lw	a2,0(s7)
   13bcc:	004ba683          	lw	a3,4(s7)
   13bd0:	00002097          	auipc	ra,0x2
   13bd4:	0d2080e7          	jalr	210(ra) # 15ca2 <__divdf3>
   13bd8:	00003097          	auipc	ra,0x3
   13bdc:	424080e7          	jalr	1060(ra) # 16ffc <__fixunsdfsi>
   13be0:	0ff57513          	andi	a0,a0,255
   13be4:	00a48023          	sb	a0,0(s1)
   13be8:	bf5d                	j	13b9e <pwm_update+0x3e>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:156
            }
        }
    }else if(pwmNo & 0xf00){
   13bea:	6785                	lui	a5,0x1
   13bec:	f0078793          	addi	a5,a5,-256 # f00 <GEC_USER_SECTOR_END+0xedb>
   13bf0:	8fe9                	and	a5,a5,a0
   13bf2:	10078563          	beqz	a5,13cfc <pwm_update+0x19c>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:157
        if(pwmNo&PWM_TIM0) R32_TMR0_FIFO = R32_TMR0_CNT_END * duty / 100;
   13bf6:	10057793          	andi	a5,a0,256
   13bfa:	cf8d                	beqz	a5,13c34 <pwm_update+0xd4>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:157 (discriminator 1)
   13bfc:	40002437          	lui	s0,0x40002
   13c00:	4448                	lw	a0,12(s0)
   13c02:	00003097          	auipc	ra,0x3
   13c06:	4cc080e7          	jalr	1228(ra) # 170ce <__floatunsidf>
   13c0a:	864a                	mv	a2,s2
   13c0c:	86ce                	mv	a3,s3
   13c0e:	00002097          	auipc	ra,0x2
   13c12:	778080e7          	jalr	1912(ra) # 16386 <__muldf3>
   13c16:	00004797          	auipc	a5,0x4
   13c1a:	a6a78793          	addi	a5,a5,-1430 # 17680 <strlen+0x29e>
   13c1e:	4390                	lw	a2,0(a5)
   13c20:	43d4                	lw	a3,4(a5)
   13c22:	00002097          	auipc	ra,0x2
   13c26:	080080e7          	jalr	128(ra) # 15ca2 <__divdf3>
   13c2a:	00003097          	auipc	ra,0x3
   13c2e:	3d2080e7          	jalr	978(ra) # 16ffc <__fixunsdfsi>
   13c32:	c808                	sw	a0,16(s0)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:158
        if(pwmNo&PWM_TIM1) R32_TMR1_FIFO = R32_TMR1_CNT_END * duty / 100;
   13c34:	200a7793          	andi	a5,s4,512
   13c38:	cf9d                	beqz	a5,13c76 <pwm_update+0x116>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:158 (discriminator 1)
   13c3a:	40002437          	lui	s0,0x40002
   13c3e:	40c42503          	lw	a0,1036(s0) # 4000240c <_eusrstack+0x1fffa40c>
   13c42:	00003097          	auipc	ra,0x3
   13c46:	48c080e7          	jalr	1164(ra) # 170ce <__floatunsidf>
   13c4a:	864a                	mv	a2,s2
   13c4c:	86ce                	mv	a3,s3
   13c4e:	00002097          	auipc	ra,0x2
   13c52:	738080e7          	jalr	1848(ra) # 16386 <__muldf3>
   13c56:	00004797          	auipc	a5,0x4
   13c5a:	a2a78793          	addi	a5,a5,-1494 # 17680 <strlen+0x29e>
   13c5e:	4390                	lw	a2,0(a5)
   13c60:	43d4                	lw	a3,4(a5)
   13c62:	00002097          	auipc	ra,0x2
   13c66:	040080e7          	jalr	64(ra) # 15ca2 <__divdf3>
   13c6a:	00003097          	auipc	ra,0x3
   13c6e:	392080e7          	jalr	914(ra) # 16ffc <__fixunsdfsi>
   13c72:	40a42823          	sw	a0,1040(s0)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:159
        if(pwmNo&PWM_TIM2) R32_TMR2_FIFO = R32_TMR2_CNT_END * duty / 100;
   13c76:	400a7793          	andi	a5,s4,1024
   13c7a:	cf9d                	beqz	a5,13cb8 <pwm_update+0x158>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:159 (discriminator 1)
   13c7c:	40003437          	lui	s0,0x40003
   13c80:	80c42503          	lw	a0,-2036(s0) # 4000280c <_eusrstack+0x1fffa80c>
   13c84:	00003097          	auipc	ra,0x3
   13c88:	44a080e7          	jalr	1098(ra) # 170ce <__floatunsidf>
   13c8c:	864a                	mv	a2,s2
   13c8e:	86ce                	mv	a3,s3
   13c90:	00002097          	auipc	ra,0x2
   13c94:	6f6080e7          	jalr	1782(ra) # 16386 <__muldf3>
   13c98:	00004797          	auipc	a5,0x4
   13c9c:	9e878793          	addi	a5,a5,-1560 # 17680 <strlen+0x29e>
   13ca0:	4390                	lw	a2,0(a5)
   13ca2:	43d4                	lw	a3,4(a5)
   13ca4:	00002097          	auipc	ra,0x2
   13ca8:	ffe080e7          	jalr	-2(ra) # 15ca2 <__divdf3>
   13cac:	00003097          	auipc	ra,0x3
   13cb0:	350080e7          	jalr	848(ra) # 16ffc <__fixunsdfsi>
   13cb4:	80a42823          	sw	a0,-2032(s0)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:160
        if(pwmNo&PWM_TIM3) R32_TMR2_FIFO = R32_TMR3_CNT_END * duty / 100;
   13cb8:	014a1793          	slli	a5,s4,0x14
   13cbc:	0407d063          	bgez	a5,13cfc <pwm_update+0x19c>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:160 (discriminator 1)
   13cc0:	40003437          	lui	s0,0x40003
   13cc4:	c0c42503          	lw	a0,-1012(s0) # 40002c0c <_eusrstack+0x1fffac0c>
   13cc8:	00003097          	auipc	ra,0x3
   13ccc:	406080e7          	jalr	1030(ra) # 170ce <__floatunsidf>
   13cd0:	864a                	mv	a2,s2
   13cd2:	86ce                	mv	a3,s3
   13cd4:	00002097          	auipc	ra,0x2
   13cd8:	6b2080e7          	jalr	1714(ra) # 16386 <__muldf3>
   13cdc:	00004797          	auipc	a5,0x4
   13ce0:	9a478793          	addi	a5,a5,-1628 # 17680 <strlen+0x29e>
   13ce4:	4390                	lw	a2,0(a5)
   13ce6:	43d4                	lw	a3,4(a5)
   13ce8:	00002097          	auipc	ra,0x2
   13cec:	fba080e7          	jalr	-70(ra) # 15ca2 <__divdf3>
   13cf0:	00003097          	auipc	ra,0x3
   13cf4:	30c080e7          	jalr	780(ra) # 16ffc <__fixunsdfsi>
   13cf8:	80a42823          	sw	a0,-2032(s0)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/pwm.c:162
    }
}
   13cfc:	50b2                	lw	ra,44(sp)
   13cfe:	5422                	lw	s0,40(sp)
   13d00:	5492                	lw	s1,36(sp)
   13d02:	5902                	lw	s2,32(sp)
   13d04:	49f2                	lw	s3,28(sp)
   13d06:	4a62                	lw	s4,24(sp)
   13d08:	4ad2                	lw	s5,20(sp)
   13d0a:	4b42                	lw	s6,16(sp)
   13d0c:	4bb2                	lw	s7,12(sp)
   13d0e:	4c22                	lw	s8,8(sp)
   13d10:	6145                	addi	sp,sp,48
   13d12:	8082                	ret

00013d14 <IRQ_OPC_CHANGE>:
IRQ_OPC_CHANGE():
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/gec.c:25
    static uint32_t opcode = 0;
    uint32_t bios_addr=0, user_addr=0;  //函数入口地址
    uint32_t user_opc=0;
    uint32_t imm1=0,imm2=0;
    uint32_t user_pc=0;
    if(IRQ_NUM == SysTick_IRQn)     //对SysTick_Handler中断进行重定向
   13d14:	47b1                	li	a5,12
   13d16:	02f50563          	beq	a0,a5,13d40 <IRQ_OPC_CHANGE+0x2c>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/gec.c:31
    {
        user_addr = (uint32_t)SysTick_Handler;
        bios_addr = (uint32_t)component_fun[28];
        user_opc = ((uint32_t *)user)[SysTick_IRQn+1];
    }
    else if(IRQ_NUM == SWI_IRQn)    //对SysTick_Handler中断进行重定向
   13d1a:	47b9                	li	a5,14
   13d1c:	08f50763          	beq	a0,a5,13daa <IRQ_OPC_CHANGE+0x96>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/gec.c:37
    {
        user_addr = (uint32_t)SW_Handler;
        bios_addr = (uint32_t)component_fun[29];
        user_opc = ((uint32_t *)user)[SWI_IRQn+1];
    }
    else if(IRQ_NUM == UART1_IRQn)  //对SysTick_Handler中断进行重定向
   13d20:	476d                	li	a4,27
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/gec.c:44
        user_addr = (uint32_t)UART1_IRQHandler;
        bios_addr = (uint32_t)component_fun[30];
        user_opc = ((uint32_t *)user)[UART1_IRQn+1];
    }
    else                            //仅支持SysTick_Handler、SW_Handler、UART1_IRQHandler的重定向
       return 0;
   13d22:	4781                	li	a5,0
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/gec.c:37
    else if(IRQ_NUM == UART1_IRQn)  //对SysTick_Handler中断进行重定向
   13d24:	08e51163          	bne	a0,a4,13da6 <IRQ_OPC_CHANGE+0x92>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/gec.c:39
        user_addr = (uint32_t)UART1_IRQHandler;
   13d28:	ffffe817          	auipc	a6,0xffffe
   13d2c:	3a480813          	addi	a6,a6,932 # 120cc <UART1_IRQHandler>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/gec.c:40
        bios_addr = (uint32_t)component_fun[30];
   13d30:	1fff2797          	auipc	a5,0x1fff2
   13d34:	95878793          	addi	a5,a5,-1704 # 20005688 <_edata>
   13d38:	439c                	lw	a5,0(a5)
   13d3a:	5fb0                	lw	a2,120(a5)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/gec.c:41
        user_opc = ((uint32_t *)user)[UART1_IRQn+1];
   13d3c:	59b8                	lw	a4,112(a1)
   13d3e:	a821                	j	13d56 <IRQ_OPC_CHANGE+0x42>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/gec.c:27
        user_addr = (uint32_t)SysTick_Handler;
   13d40:	ffffe817          	auipc	a6,0xffffe
   13d44:	35c80813          	addi	a6,a6,860 # 1209c <SysTick_Handler>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/gec.c:28
        bios_addr = (uint32_t)component_fun[28];
   13d48:	1fff2797          	auipc	a5,0x1fff2
   13d4c:	94078793          	addi	a5,a5,-1728 # 20005688 <_edata>
   13d50:	439c                	lw	a5,0(a5)
   13d52:	5bb0                	lw	a2,112(a5)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/gec.c:29
        user_opc = ((uint32_t *)user)[SysTick_IRQn+1];
   13d54:	59d8                	lw	a4,52(a1)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/gec.c:50
    // printf("addr1:%lx\r\n", user_addr);
    // printf("addr2:%lx\r\n", bios_addr);
    // printf("opc:%lx\r\n", user_opc);

    //判断该指令是否为向前跳转，如果是向前跳转说明已经修改过了中断向量表，无需再次修改
    if((user_opc&0x80000000)) return ((uint32_t *)user)[IRQ_NUM+1];         
   13d56:	06074663          	bltz	a4,13dc2 <IRQ_OPC_CHANGE+0xae>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/gec.c:52

    imm1 = ( ((user_opc&0x80000000)>>11) | ((user_opc&0x7FE00000)>>20) | ((user_opc&0x00100000)>>9) | ((user_opc&0x000FF000)) );
   13d5a:	00975793          	srli	a5,a4,0x9
   13d5e:	6685                	lui	a3,0x1
   13d60:	80068693          	addi	a3,a3,-2048 # 800 <GEC_USER_SECTOR_END+0x7db>
   13d64:	8ff5                	and	a5,a5,a3
   13d66:	000ff6b7          	lui	a3,0xff
   13d6a:	00d775b3          	and	a1,a4,a3
   13d6e:	8fcd                	or	a5,a5,a1
   13d70:	8351                	srli	a4,a4,0x14
   13d72:	7fe77713          	andi	a4,a4,2046
   13d76:	8fd9                	or	a5,a5,a4
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/gec.c:58
    if(imm1>>20==1)         //向前跳转，补符号位
        imm1 = 0xFFE00000 | imm1;
    // printf("imm1:%lx\r\n", imm1);
    user_pc = user_addr - imm1;
    // printf("pc:%lx\r\n", user_pc);
    imm2 = bios_addr - user_pc;
   13d78:	41060633          	sub	a2,a2,a6
   13d7c:	97b2                	add	a5,a5,a2
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/gec.c:60
    // printf("imm2:%lx\r\n", imm2);
    opcode = (((imm2&0x100000)<<11) | ((imm2&0x7FE)<<20) | ((imm2&0x800)<<9) | (imm2&0xFF000)) | (0x0) | (0x6f);
   13d7e:	00b79513          	slli	a0,a5,0xb
   13d82:	80000737          	lui	a4,0x80000
   13d86:	8d79                	and	a0,a0,a4
   13d88:	00979713          	slli	a4,a5,0x9
   13d8c:	00100637          	lui	a2,0x100
   13d90:	8f71                	and	a4,a4,a2
   13d92:	8d59                	or	a0,a0,a4
   13d94:	8efd                	and	a3,a3,a5
   13d96:	8d55                	or	a0,a0,a3
   13d98:	07d2                	slli	a5,a5,0x14
   13d9a:	7fe00737          	lui	a4,0x7fe00
   13d9e:	8ff9                	and	a5,a5,a4
   13da0:	8fc9                	or	a5,a5,a0
   13da2:	06f7e793          	ori	a5,a5,111
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/gec.c:63
    // printf("opcode:%lx\r\n", opcode);
    return opcode;
}
   13da6:	853e                	mv	a0,a5
   13da8:	8082                	ret
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/gec.c:33
        user_addr = (uint32_t)SW_Handler;
   13daa:	ffffe817          	auipc	a6,0xffffe
   13dae:	2f680813          	addi	a6,a6,758 # 120a0 <SW_Handler>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/gec.c:34
        bios_addr = (uint32_t)component_fun[29];
   13db2:	1fff2797          	auipc	a5,0x1fff2
   13db6:	8d678793          	addi	a5,a5,-1834 # 20005688 <_edata>
   13dba:	439c                	lw	a5,0(a5)
   13dbc:	5bf0                	lw	a2,116(a5)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/gec.c:35
        user_opc = ((uint32_t *)user)[SWI_IRQn+1];
   13dbe:	5dd8                	lw	a4,60(a1)
   13dc0:	bf59                	j	13d56 <IRQ_OPC_CHANGE+0x42>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/gec.c:50 (discriminator 1)
    if((user_opc&0x80000000)) return ((uint32_t *)user)[IRQ_NUM+1];         
   13dc2:	0505                	addi	a0,a0,1
   13dc4:	050a                	slli	a0,a0,0x2
   13dc6:	952e                	add	a0,a0,a1
   13dc8:	411c                	lw	a5,0(a0)
   13dca:	bff1                	j	13da6 <IRQ_OPC_CHANGE+0x92>

00013dcc <Vectors_Init>:
Vectors_Init():
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/gec.c:72
//参数说明：无
//功能概要：User对BIOS中断向量表的部分继承,构件库函数指针初始化
//修改信息：WYH，20200805，规范
//======================================================================
void  Vectors_Init()
{
   13dcc:	716d                	addi	sp,sp,-272
   13dce:	10112623          	sw	ra,268(sp)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/gec.c:82
    // {
    //     flash_write_physical((MCU_SECTOR_NUM-1)*MCU_SECTORSIZE+
    //     MCU_FLASH_ADDR_START,24,(uint8_t *)"0123456789ABCDEF20200716");
    // }
    //（1）给component_fun赋值，SYSTEM_FUNCTION函数用
    component_fun=(void **)(MCU_FLASH_ADDR_START+GEC_COMPONENT_LST_START*MCU_SECTORSIZE);
   13dd2:	67c1                	lui	a5,0x10
   13dd4:	1fff2717          	auipc	a4,0x1fff2
   13dd8:	8af72a23          	sw	a5,-1868(a4) # 20005688 <_edata>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/gec.c:87
    
    uint8_t user[MCU_SECTORSIZE/16];                    //User向量表变量数组
    uint32_t opcode;
    //（2.1）读取User程序的中断向量表各中断处理程序首地址赋并给user数组
    flash_read_logic(user,GEC_USER_SECTOR_START,0,MCU_SECTORSIZE/16);
   13ddc:	10000693          	li	a3,256
   13de0:	4601                	li	a2,0
   13de2:	45c9                	li	a1,18
   13de4:	850a                	mv	a0,sp
   13de6:	fffff097          	auipc	ra,0xfffff
   13dea:	5bc080e7          	jalr	1468(ra) # 133a2 <flash_read_logic>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/gec.c:89
    // （2.2）读取User程序的中断向量表各中断处理程序首地址赋并给user数组
    flash_erase(GEC_USER_SECTOR_START);
   13dee:	4549                	li	a0,18
   13df0:	fffff097          	auipc	ra,0xfffff
   13df4:	564080e7          	jalr	1380(ra) # 13354 <flash_erase>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/gec.c:92
    //重定向 UART1_IRQHandler
    // user[112]=(uint8_t)(0x6f); user[113]=(uint8_t)(0x40); user[114]=(uint8_t)(0xaf); user[115]=(uint8_t)(0x8a);
    opcode = IRQ_OPC_CHANGE(UART1_IRQn, user);
   13df8:	858a                	mv	a1,sp
   13dfa:	456d                	li	a0,27
   13dfc:	00000097          	auipc	ra,0x0
   13e00:	f18080e7          	jalr	-232(ra) # 13d14 <IRQ_OPC_CHANGE>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/gec.c:93
    ((uint32_t *)user)[UART1_IRQn+1] = opcode;
   13e04:	d8aa                	sw	a0,112(sp)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/gec.c:97
    #if (RTThread_Start == 0)
        //重定向 SW_Handler
        // user[60]=(uint8_t)(0x6f); user[61]=(uint8_t)(0x40); user[62]=(uint8_t)(0x0f); user[63]=(uint8_t)(0xdb);
        opcode = IRQ_OPC_CHANGE(SWI_IRQn, user);
   13e06:	858a                	mv	a1,sp
   13e08:	4539                	li	a0,14
   13e0a:	00000097          	auipc	ra,0x0
   13e0e:	f0a080e7          	jalr	-246(ra) # 13d14 <IRQ_OPC_CHANGE>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/gec.c:98
        ((uint32_t *)user)[SWI_IRQn+1] = opcode;
   13e12:	de2a                	sw	a0,60(sp)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/gec.c:101
        //重定向 SysTickHandler
        // user[52]=(uint8_t)(0x6f); user[53]=(uint8_t)(0x40); user[54]=(uint8_t)(0x0f); user[55]=(uint8_t)(0x86);
        opcode = IRQ_OPC_CHANGE(SysTick_IRQn, user);
   13e14:	858a                	mv	a1,sp
   13e16:	4531                	li	a0,12
   13e18:	00000097          	auipc	ra,0x0
   13e1c:	efc080e7          	jalr	-260(ra) # 13d14 <IRQ_OPC_CHANGE>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/gec.c:102
        ((uint32_t *)user)[SysTick_IRQn+1] = opcode;
   13e20:	da2a                	sw	a0,52(sp)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/gec.c:105
    #endif
    //（2.3）将修改后的user数组写回User中断向量表
    flash_write(GEC_USER_SECTOR_START,0,MCU_SECTORSIZE/16,user);
   13e22:	868a                	mv	a3,sp
   13e24:	10000613          	li	a2,256
   13e28:	4581                	li	a1,0
   13e2a:	4549                	li	a0,18
   13e2c:	fffff097          	auipc	ra,0xfffff
   13e30:	59c080e7          	jalr	1436(ra) # 133c8 <flash_write>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/gec.c:108

    //（4）printf提示
    printf("  【User提示】：将进入User的main函数执行...\r\n\n");
   13e34:	00004517          	auipc	a0,0x4
   13e38:	85450513          	addi	a0,a0,-1964 # 17688 <strlen+0x2a6>
   13e3c:	00001097          	auipc	ra,0x1
   13e40:	bfa080e7          	jalr	-1030(ra) # 14a36 <myprintf>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/gec.c:111

    // #endif
}
   13e44:	10c12083          	lw	ra,268(sp)
   13e48:	6151                	addi	sp,sp,272
   13e4a:	8082                	ret

00013e4c <uart_send1>:
uart_send1():
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/uart.c:201
uint8_t uart_send1(uint8_t uartNo,uint8_t ch)
{
  uint32_t t;

    //判断传入串口号参数是否有误，有误直接退出
    if(uart_is_uartNo(uartNo)==0)
   13e4c:	470d                	li	a4,3
   13e4e:	10a76463          	bltu	a4,a0,13f56 <uart_send1+0x10a>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/uart.c:206
    {
        return 0;
    }
    //判断UARTx号
    switch (uartNo)
   13e52:	4705                	li	a4,1
   13e54:	06e50863          	beq	a0,a4,13ec4 <uart_send1+0x78>
   13e58:	01851713          	slli	a4,a0,0x18
   13e5c:	8761                	srai	a4,a4,0x18
   13e5e:	cb49                	beqz	a4,13ef0 <uart_send1+0xa4>
   13e60:	4709                	li	a4,2
   13e62:	02e50b63          	beq	a0,a4,13e98 <uart_send1+0x4c>
   13e66:	470d                	li	a4,3
   13e68:	0ae51f63          	bne	a0,a4,13f26 <uart_send1+0xda>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/uart.c:238
          }
            break;
        case 3:
          for (t = 0; t < 0xFBBB; t++)//查询指定次数
          {
            if(R8_UART3_LSR &RB_LSR_TX_FIFO_EMP){
   13e6c:	400047b7          	lui	a5,0x40004
   13e70:	c057c783          	lbu	a5,-1019(a5) # 40003c05 <_eusrstack+0x1fffbc05>
   13e74:	0207f793          	andi	a5,a5,32
   13e78:	ebe9                	bnez	a5,13f4a <uart_send1+0xfe>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/uart.c:236
          for (t = 0; t < 0xFBBB; t++)//查询指定次数
   13e7a:	4785                	li	a5,1
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/uart.c:238
            if(R8_UART3_LSR &RB_LSR_TX_FIFO_EMP){
   13e7c:	40004637          	lui	a2,0x40004
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/uart.c:236
          for (t = 0; t < 0xFBBB; t++)//查询指定次数
   13e80:	66c1                	lui	a3,0x10
   13e82:	bbb68693          	addi	a3,a3,-1093 # fbbb <MCU_SECTORSIZE+0xebbb>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/uart.c:238
            if(R8_UART3_LSR &RB_LSR_TX_FIFO_EMP){
   13e86:	c0564703          	lbu	a4,-1019(a2) # 40003c05 <_eusrstack+0x1fffbc05>
   13e8a:	02077713          	andi	a4,a4,32
   13e8e:	ef5d                	bnez	a4,13f4c <uart_send1+0x100>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/uart.c:236 (discriminator 2)
          for (t = 0; t < 0xFBBB; t++)//查询指定次数
   13e90:	0785                	addi	a5,a5,1
   13e92:	fed79ae3          	bne	a5,a3,13e86 <uart_send1+0x3a>
   13e96:	a841                	j	13f26 <uart_send1+0xda>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/uart.c:229
            if(R8_UART2_LSR &RB_LSR_TX_FIFO_EMP){
   13e98:	400047b7          	lui	a5,0x40004
   13e9c:	8057c783          	lbu	a5,-2043(a5) # 40003805 <_eusrstack+0x1fffb805>
   13ea0:	0207f793          	andi	a5,a5,32
   13ea4:	efc9                	bnez	a5,13f3e <uart_send1+0xf2>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/uart.c:227
          for (t = 0; t < 0xFBBB; t++)//查询指定次数
   13ea6:	4785                	li	a5,1
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/uart.c:229
            if(R8_UART2_LSR &RB_LSR_TX_FIFO_EMP){
   13ea8:	40004637          	lui	a2,0x40004
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/uart.c:227
          for (t = 0; t < 0xFBBB; t++)//查询指定次数
   13eac:	66c1                	lui	a3,0x10
   13eae:	bbb68693          	addi	a3,a3,-1093 # fbbb <MCU_SECTORSIZE+0xebbb>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/uart.c:229
            if(R8_UART2_LSR &RB_LSR_TX_FIFO_EMP){
   13eb2:	80564703          	lbu	a4,-2043(a2) # 40003805 <_eusrstack+0x1fffb805>
   13eb6:	02077713          	andi	a4,a4,32
   13eba:	e359                	bnez	a4,13f40 <uart_send1+0xf4>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/uart.c:227 (discriminator 2)
          for (t = 0; t < 0xFBBB; t++)//查询指定次数
   13ebc:	0785                	addi	a5,a5,1
   13ebe:	fed79ae3          	bne	a5,a3,13eb2 <uart_send1+0x66>
   13ec2:	a095                	j	13f26 <uart_send1+0xda>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/uart.c:220
            if(R8_UART1_LSR &RB_LSR_TX_FIFO_EMP){
   13ec4:	400037b7          	lui	a5,0x40003
   13ec8:	4057c783          	lbu	a5,1029(a5) # 40003405 <_eusrstack+0x1fffb405>
   13ecc:	0207f793          	andi	a5,a5,32
   13ed0:	e3ad                	bnez	a5,13f32 <uart_send1+0xe6>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/uart.c:218
          for (t = 0; t < 0xFBBB; t++)//查询指定次数
   13ed2:	4785                	li	a5,1
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/uart.c:220
            if(R8_UART1_LSR &RB_LSR_TX_FIFO_EMP){
   13ed4:	40003637          	lui	a2,0x40003
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/uart.c:218
          for (t = 0; t < 0xFBBB; t++)//查询指定次数
   13ed8:	66c1                	lui	a3,0x10
   13eda:	bbb68693          	addi	a3,a3,-1093 # fbbb <MCU_SECTORSIZE+0xebbb>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/uart.c:220
            if(R8_UART1_LSR &RB_LSR_TX_FIFO_EMP){
   13ede:	40564703          	lbu	a4,1029(a2) # 40003405 <_eusrstack+0x1fffb405>
   13ee2:	02077713          	andi	a4,a4,32
   13ee6:	e739                	bnez	a4,13f34 <uart_send1+0xe8>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/uart.c:218 (discriminator 2)
          for (t = 0; t < 0xFBBB; t++)//查询指定次数
   13ee8:	0785                	addi	a5,a5,1
   13eea:	fed79ae3          	bne	a5,a3,13ede <uart_send1+0x92>
   13eee:	a825                	j	13f26 <uart_send1+0xda>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/uart.c:211
            if(R8_UART0_LSR &RB_LSR_TX_FIFO_EMP){
   13ef0:	400037b7          	lui	a5,0x40003
   13ef4:	0057c783          	lbu	a5,5(a5) # 40003005 <_eusrstack+0x1fffb005>
   13ef8:	0207f793          	andi	a5,a5,32
   13efc:	e385                	bnez	a5,13f1c <uart_send1+0xd0>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/uart.c:209
          for (t = 0; t < 0xFBBB; t++)//查询指定次数
   13efe:	4785                	li	a5,1
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/uart.c:211
            if(R8_UART0_LSR &RB_LSR_TX_FIFO_EMP){
   13f00:	40003637          	lui	a2,0x40003
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/uart.c:209
          for (t = 0; t < 0xFBBB; t++)//查询指定次数
   13f04:	66c1                	lui	a3,0x10
   13f06:	bbb68693          	addi	a3,a3,-1093 # fbbb <MCU_SECTORSIZE+0xebbb>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/uart.c:211
            if(R8_UART0_LSR &RB_LSR_TX_FIFO_EMP){
   13f0a:	00564703          	lbu	a4,5(a2) # 40003005 <_eusrstack+0x1fffb005>
   13f0e:	02077713          	andi	a4,a4,32
   13f12:	e711                	bnez	a4,13f1e <uart_send1+0xd2>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/uart.c:209 (discriminator 2)
          for (t = 0; t < 0xFBBB; t++)//查询指定次数
   13f14:	0785                	addi	a5,a5,1
   13f16:	fed79ae3          	bne	a5,a3,13f0a <uart_send1+0xbe>
   13f1a:	a031                	j	13f26 <uart_send1+0xda>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/uart.c:209
   13f1c:	4781                	li	a5,0
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/uart.c:212
              R8_UART0_THR = ch;
   13f1e:	40003737          	lui	a4,0x40003
   13f22:	00b70423          	sb	a1,8(a4) # 40003008 <_eusrstack+0x1fffb008>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/uart.c:203
        return 0;
   13f26:	6541                	lui	a0,0x10
   13f28:	bbb50513          	addi	a0,a0,-1093 # fbbb <MCU_SECTORSIZE+0xebbb>
   13f2c:	00a7b533          	sltu	a0,a5,a0
   13f30:	8082                	ret
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/uart.c:218
          for (t = 0; t < 0xFBBB; t++)//查询指定次数
   13f32:	4781                	li	a5,0
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/uart.c:221
              R8_UART1_THR = ch;
   13f34:	40003737          	lui	a4,0x40003
   13f38:	40b70423          	sb	a1,1032(a4) # 40003408 <_eusrstack+0x1fffb408>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/uart.c:222
              break;
   13f3c:	b7ed                	j	13f26 <uart_send1+0xda>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/uart.c:227
          for (t = 0; t < 0xFBBB; t++)//查询指定次数
   13f3e:	4781                	li	a5,0
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/uart.c:230
              R8_UART2_THR = ch;
   13f40:	40004737          	lui	a4,0x40004
   13f44:	80b70423          	sb	a1,-2040(a4) # 40003808 <_eusrstack+0x1fffb808>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/uart.c:231
              break;
   13f48:	bff9                	j	13f26 <uart_send1+0xda>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/uart.c:236
          for (t = 0; t < 0xFBBB; t++)//查询指定次数
   13f4a:	4781                	li	a5,0
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/uart.c:239
              R8_UART3_THR = ch;
   13f4c:	40004737          	lui	a4,0x40004
   13f50:	c0b70423          	sb	a1,-1016(a4) # 40003c08 <_eusrstack+0x1fffbc08>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/uart.c:240
              break;
   13f54:	bfc9                	j	13f26 <uart_send1+0xda>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/uart.c:203
        return 0;
   13f56:	4501                	li	a0,0
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/uart.c:252

    if (t >= 0xFBBB)
        return 0; //发送超时，发送失败
    else
        return 1; //成功发送
}
   13f58:	8082                	ret

00013f5a <printk_putc>:
printk_putc():
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:28
//功能概要：通过串口打出一个字符
//参数说明：data:数据：通过串口发送的一字节数据
//函数返回：无
//======================================================================
static void printk_putc(int c, int *count, PRINTK_INFO *info)
{
   13f5a:	1141                	addi	sp,sp,-16
   13f5c:	c606                	sw	ra,12(sp)
   13f5e:	c422                	sw	s0,8(sp)
   13f60:	842e                	mv	s0,a1
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:29
	switch (info->dest) {
   13f62:	421c                	lw	a5,0(a2)
   13f64:	4705                	li	a4,1
   13f66:	00e78c63          	beq	a5,a4,13f7e <printk_putc+0x24>
   13f6a:	4709                	li	a4,2
   13f6c:	00e78e63          	beq	a5,a4,13f88 <printk_putc+0x2e>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:40
		++(info->loc);
		break;
	default:
		break;
	}
	*count += 1;
   13f70:	401c                	lw	a5,0(s0)
   13f72:	0785                	addi	a5,a5,1
   13f74:	c01c                	sw	a5,0(s0)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:41
}
   13f76:	40b2                	lw	ra,12(sp)
   13f78:	4422                	lw	s0,8(sp)
   13f7a:	0141                	addi	sp,sp,16
   13f7c:	8082                	ret
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:31
		info->func((char) c);
   13f7e:	425c                	lw	a5,4(a2)
   13f80:	0562                	slli	a0,a0,0x18
   13f82:	8561                	srai	a0,a0,0x18
   13f84:	9782                	jalr	a5
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:32
		break;
   13f86:	b7ed                	j	13f70 <printk_putc+0x16>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:34
		*(info->loc) = (unsigned char) c;
   13f88:	461c                	lw	a5,8(a2)
   13f8a:	00a78023          	sb	a0,0(a5)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:35
		++(info->loc);
   13f8e:	461c                	lw	a5,8(a2)
   13f90:	0785                	addi	a5,a5,1
   13f92:	c61c                	sw	a5,8(a2)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:36
		break;
   13f94:	bff1                	j	13f70 <printk_putc+0x16>

00013f96 <printk_mknumstr>:
printk_mknumstr():
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:131
	int nlen;
	char *nstrp;

	nlen = 0;
	nstrp = numstr;
	*nstrp++ = '\0';
   13f96:	00150793          	addi	a5,a0,1
   13f9a:	00050023          	sb	zero,0(a0)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:133

	if (neg) {
   13f9e:	ce1d                	beqz	a2,13fdc <printk_mknumstr+0x46>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:134
		a = *(int *) nump;
   13fa0:	4198                	lw	a4,0(a1)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:144
		}
		while (a != 0) {
			b = (int) a / (int) radix;
			c = (int) a - ((int) b * (int) radix);
			if (c < 0) {
				c = ~c + 1 + '0';
   13fa2:	03000813          	li	a6,48
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:135
		if (a == 0) {
   13fa6:	e315                	bnez	a4,13fca <printk_mknumstr+0x34>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:136
			*nstrp = '0';
   13fa8:	03000793          	li	a5,48
   13fac:	00f500a3          	sb	a5,1(a0)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:137
			++nlen;
   13fb0:	4605                	li	a2,1
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:173
			*nstrp++ = (char) uc;
			++nlen;
		}
	}
	done: return nlen;
}
   13fb2:	8532                	mv	a0,a2
   13fb4:	8082                	ret
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:144
				c = ~c + 1 + '0';
   13fb6:	40e80633          	sub	a2,a6,a4
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:149
			*nstrp++ = (char) c;
   13fba:	0785                	addi	a5,a5,1
   13fbc:	fec78fa3          	sb	a2,-1(a5)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:150
			++nlen;
   13fc0:	fff78613          	addi	a2,a5,-1
   13fc4:	8e09                	sub	a2,a2,a0
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:148
			a = b;
   13fc6:	872e                	mv	a4,a1
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:140
		while (a != 0) {
   13fc8:	d5ed                	beqz	a1,13fb2 <printk_mknumstr+0x1c>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:141
			b = (int) a / (int) radix;
   13fca:	02d745b3          	div	a1,a4,a3
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:142
			c = (int) a - ((int) b * (int) radix);
   13fce:	02d76733          	rem	a4,a4,a3
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:146
				c = c + '0';
   13fd2:	03070613          	addi	a2,a4,48
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:143
			if (c < 0) {
   13fd6:	fe0752e3          	bgez	a4,13fba <printk_mknumstr+0x24>
   13fda:	bff1                	j	13fb6 <printk_mknumstr+0x20>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:153
		ua = *(unsigned int *) nump;
   13fdc:	4198                	lw	a4,0(a1)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:160
			ub = (unsigned int) ua / (unsigned int) radix;
   13fde:	8336                	mv	t1,a3
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:162
			if (uc < 10) {
   13fe0:	48a5                	li	a7,9
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:154
		if (ua == 0) {
   13fe2:	e305                	bnez	a4,14002 <printk_mknumstr+0x6c>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:155
			*nstrp = '0';
   13fe4:	03000793          	li	a5,48
   13fe8:	00f500a3          	sb	a5,1(a0)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:156
			++nlen;
   13fec:	4605                	li	a2,1
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:157
			goto done;
   13fee:	b7d1                	j	13fb2 <printk_mknumstr+0x1c>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:168
			*nstrp++ = (char) uc;
   13ff0:	0785                	addi	a5,a5,1
   13ff2:	feb78fa3          	sb	a1,-1(a5)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:169
			++nlen;
   13ff6:	fff78613          	addi	a2,a5,-1
   13ffa:	8e09                	sub	a2,a2,a0
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:159
		while (ua != 0) {
   13ffc:	fa676be3          	bltu	a4,t1,13fb2 <printk_mknumstr+0x1c>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:167
			ua = ub;
   14000:	8742                	mv	a4,a6
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:160
			ub = (unsigned int) ua / (unsigned int) radix;
   14002:	02d75833          	divu	a6,a4,a3
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:161
			uc = (unsigned int) ua - ((unsigned int) ub * (unsigned int) radix);
   14006:	02d77633          	remu	a2,a4,a3
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:165
				uc = uc - 10 + 'A';
   1400a:	03760593          	addi	a1,a2,55
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:162
			if (uc < 10) {
   1400e:	fec8e1e3          	bltu	a7,a2,13ff0 <printk_mknumstr+0x5a>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:163
				uc = uc + '0';
   14012:	03060593          	addi	a1,a2,48
   14016:	bfe9                	j	13ff0 <printk_mknumstr+0x5a>

00014018 <printk_pad_space>:
printk_pad_space():
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:186
	}
}

/********************************************************************/
static void printk_pad_space(int curlen, int field_width, int *count,
		PRINTK_INFO *info) {
   14018:	1101                	addi	sp,sp,-32
   1401a:	ce06                	sw	ra,28(sp)
   1401c:	cc22                	sw	s0,24(sp)
   1401e:	ca26                	sw	s1,20(sp)
   14020:	c84a                	sw	s2,16(sp)
   14022:	c64e                	sw	s3,12(sp)
   14024:	842a                	mv	s0,a0
   14026:	84ae                	mv	s1,a1
   14028:	89b2                	mv	s3,a2
   1402a:	8936                	mv	s2,a3
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:189
	int i;

	for (i = curlen; i < field_width; i++) {
   1402c:	00b55d63          	bge	a0,a1,14046 <printk_pad_space+0x2e>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:190 (discriminator 3)
		printk_putc(' ', count, info);
   14030:	864a                	mv	a2,s2
   14032:	85ce                	mv	a1,s3
   14034:	02000513          	li	a0,32
   14038:	00000097          	auipc	ra,0x0
   1403c:	f22080e7          	jalr	-222(ra) # 13f5a <printk_putc>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:189 (discriminator 3)
	for (i = curlen; i < field_width; i++) {
   14040:	0405                	addi	s0,s0,1
   14042:	fe8497e3          	bne	s1,s0,14030 <printk_pad_space+0x18>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:192
	}
}
   14046:	40f2                	lw	ra,28(sp)
   14048:	4462                	lw	s0,24(sp)
   1404a:	44d2                	lw	s1,20(sp)
   1404c:	4942                	lw	s2,16(sp)
   1404e:	49b2                	lw	s3,12(sp)
   14050:	6105                	addi	sp,sp,32
   14052:	8082                	ret

00014054 <out_char>:
out_char():
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:18
void out_char(char data) {
   14054:	1141                	addi	sp,sp,-16
   14056:	c606                	sw	ra,12(sp)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:19
	uart_send1(UART_printf, data);
   14058:	0ff57593          	andi	a1,a0,255
   1405c:	4505                	li	a0,1
   1405e:	00000097          	auipc	ra,0x0
   14062:	dee080e7          	jalr	-530(ra) # 13e4c <uart_send1>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:20
}
   14066:	40b2                	lw	ra,12(sp)
   14068:	0141                	addi	sp,sp,16
   1406a:	8082                	ret

0001406c <printk_mkfloatstr>:
printk_mkfloatstr():
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:50
{
   1406c:	c8010113          	addi	sp,sp,-896
   14070:	36112e23          	sw	ra,892(sp)
   14074:	36812c23          	sw	s0,888(sp)
   14078:	36912a23          	sw	s1,884(sp)
   1407c:	37212823          	sw	s2,880(sp)
   14080:	37312623          	sw	s3,876(sp)
   14084:	37412423          	sw	s4,872(sp)
   14088:	37512223          	sw	s5,868(sp)
   1408c:	37612023          	sw	s6,864(sp)
   14090:	35712e23          	sw	s7,860(sp)
   14094:	35812c23          	sw	s8,856(sp)
   14098:	35912a23          	sw	s9,852(sp)
   1409c:	35a12823          	sw	s10,848(sp)
   140a0:	35b12623          	sw	s11,844(sp)
   140a4:	842a                	mv	s0,a0
   140a6:	8b2e                	mv	s6,a1
   140a8:	8c32                	mv	s8,a2
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:52
	uint32_t i=0,j=0,k=0,a[100]={0},b[100]={0};
   140aa:	19000613          	li	a2,400
   140ae:	4581                	li	a1,0
   140b0:	1b08                	addi	a0,sp,432
   140b2:	fffff097          	auipc	ra,0xfffff
   140b6:	00e080e7          	jalr	14(ra) # 130c0 <memset>
   140ba:	19000613          	li	a2,400
   140be:	4581                	li	a1,0
   140c0:	1008                	addi	a0,sp,32
   140c2:	fffff097          	auipc	ra,0xfffff
   140c6:	ffe080e7          	jalr	-2(ra) # 130c0 <memset>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:59
	p=(uint64_t)*f;//整数部分
   140ca:	4044                	lw	s1,4(s0)
   140cc:	4000                	lw	s0,0(s0)
   140ce:	8522                	mv	a0,s0
   140d0:	85a6                	mv	a1,s1
   140d2:	00003097          	auipc	ra,0x3
   140d6:	068080e7          	jalr	104(ra) # 1713a <__fixunsdfdi>
   140da:	8caa                	mv	s9,a0
   140dc:	8bae                	mv	s7,a1
   140de:	8aaa                	mv	s5,a0
   140e0:	8a2e                	mv	s4,a1
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:60
	tempf=(*f-p);
   140e2:	00003097          	auipc	ra,0x3
   140e6:	0f6080e7          	jalr	246(ra) # 171d8 <__floatundidf>
   140ea:	862a                	mv	a2,a0
   140ec:	86ae                	mv	a3,a1
   140ee:	8522                	mv	a0,s0
   140f0:	85a6                	mv	a1,s1
   140f2:	00002097          	auipc	ra,0x2
   140f6:	75c080e7          	jalr	1884(ra) # 1684e <__subdf3>
   140fa:	842a                	mv	s0,a0
   140fc:	84ae                	mv	s1,a1
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:61
	while(precision_width--)    tempf*=10;
   140fe:	020c0663          	beqz	s8,1412a <printk_mkfloatstr+0xbe>
   14102:	fffc0d13          	addi	s10,s8,-1
   14106:	00003797          	auipc	a5,0x3
   1410a:	33278793          	addi	a5,a5,818 # 17438 <strlen+0x56>
   1410e:	0007a903          	lw	s2,0(a5)
   14112:	0047a983          	lw	s3,4(a5)
   14116:	5dfd                	li	s11,-1
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:61 (discriminator 2)
   14118:	864a                	mv	a2,s2
   1411a:	86ce                	mv	a3,s3
   1411c:	00002097          	auipc	ra,0x2
   14120:	26a080e7          	jalr	618(ra) # 16386 <__muldf3>
   14124:	1d7d                	addi	s10,s10,-1
   14126:	ffbd19e3          	bne	s10,s11,14118 <printk_mkfloatstr+0xac>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:62
    q=tempf;
   1412a:	00003097          	auipc	ra,0x3
   1412e:	010080e7          	jalr	16(ra) # 1713a <__fixunsdfdi>
   14132:	ce2a                	sw	a0,28(sp)
   14134:	8dae                	mv	s11,a1
   14136:	8d2a                	mv	s10,a0
   14138:	89ae                	mv	s3,a1
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:66
	while(tempf<0.1&&tempf!=0)    //【20201119】-2/3   原为while(m<1)
   1413a:	00003797          	auipc	a5,0x3
   1413e:	64678793          	addi	a5,a5,1606 # 17780 <strlen+0x39e>
   14142:	4390                	lw	a2,0(a5)
   14144:	43d4                	lw	a3,4(a5)
   14146:	8522                	mv	a0,s0
   14148:	85a6                	mv	a1,s1
   1414a:	00002097          	auipc	ra,0x2
   1414e:	186080e7          	jalr	390(ra) # 162d0 <__ledf2>
   14152:	0e055e63          	bgez	a0,1424e <printk_mkfloatstr+0x1e2>
   14156:	4601                	li	a2,0
   14158:	4681                	li	a3,0
   1415a:	8522                	mv	a0,s0
   1415c:	85a6                	mv	a1,s1
   1415e:	00002097          	auipc	ra,0x2
   14162:	108080e7          	jalr	264(ra) # 16266 <__eqdf2>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:52
	uint32_t i=0,j=0,k=0,a[100]={0},b[100]={0};
   14166:	4901                	li	s2,0
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:66
	while(tempf<0.1&&tempf!=0)    //【20201119】-2/3   原为while(m<1)
   14168:	c56d                	beqz	a0,14252 <printk_mkfloatstr+0x1e6>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:68
		tempf=tempf*10;
   1416a:	00003797          	auipc	a5,0x3
   1416e:	2ce78793          	addi	a5,a5,718 # 17438 <strlen+0x56>
   14172:	0047a803          	lw	a6,4(a5)
   14176:	439c                	lw	a5,0(a5)
   14178:	c83e                	sw	a5,16(sp)
   1417a:	ca42                	sw	a6,20(sp)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:66
	while(tempf<0.1&&tempf!=0)    //【20201119】-2/3   原为while(m<1)
   1417c:	00003797          	auipc	a5,0x3
   14180:	60478793          	addi	a5,a5,1540 # 17780 <strlen+0x39e>
   14184:	0047a803          	lw	a6,4(a5)
   14188:	439c                	lw	a5,0(a5)
   1418a:	c43e                	sw	a5,8(sp)
   1418c:	c642                	sw	a6,12(sp)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:68
		tempf=tempf*10;
   1418e:	4642                	lw	a2,16(sp)
   14190:	46d2                	lw	a3,20(sp)
   14192:	8522                	mv	a0,s0
   14194:	85a6                	mv	a1,s1
   14196:	00002097          	auipc	ra,0x2
   1419a:	1f0080e7          	jalr	496(ra) # 16386 <__muldf3>
   1419e:	842a                	mv	s0,a0
   141a0:	84ae                	mv	s1,a1
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:69
		k++;			
   141a2:	0905                	addi	s2,s2,1
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:66
	while(tempf<0.1&&tempf!=0)    //【20201119】-2/3   原为while(m<1)
   141a4:	4622                	lw	a2,8(sp)
   141a6:	46b2                	lw	a3,12(sp)
   141a8:	00002097          	auipc	ra,0x2
   141ac:	128080e7          	jalr	296(ra) # 162d0 <__ledf2>
   141b0:	00055b63          	bgez	a0,141c6 <printk_mkfloatstr+0x15a>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:66 (discriminator 1)
   141b4:	4601                	li	a2,0
   141b6:	4681                	li	a3,0
   141b8:	8522                	mv	a0,s0
   141ba:	85a6                	mv	a1,s1
   141bc:	00002097          	auipc	ra,0x2
   141c0:	0aa080e7          	jalr	170(ra) # 16266 <__eqdf2>
   141c4:	f569                	bnez	a0,1418e <printk_mkfloatstr+0x122>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:72
	if(p==0)//整数部分为0
   141c6:	019bebb3          	or	s7,s7,s9
   141ca:	080b9663          	bnez	s7,14256 <printk_mkfloatstr+0x1ea>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:73
		c[i++]='0';
   141ce:	03000793          	li	a5,48
   141d2:	00fb0023          	sb	a5,0(s6) # 40005000 <_eusrstack+0x1fffd000>
   141d6:	4485                	li	s1,1
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:87
	c[i++]='.';   //小数点
   141d8:	00148413          	addi	s0,s1,1
   141dc:	009b07b3          	add	a5,s6,s1
   141e0:	02e00713          	li	a4,46
   141e4:	00e78023          	sb	a4,0(a5)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:88
	if(q==0)     //小数部分为0
   141e8:	4772                	lw	a4,28(sp)
   141ea:	00ededb3          	or	s11,s11,a4
   141ee:	0c0d9a63          	bnez	s11,142c2 <printk_mkfloatstr+0x256>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:89
		while(zeroNum--) c[i++]='0';     //【20201119】-3/3   原为 c[i++]='0';
   141f2:	000c0d63          	beqz	s8,1420c <printk_mkfloatstr+0x1a0>
   141f6:	018b0733          	add	a4,s6,s8
   141fa:	94ba                	add	s1,s1,a4
   141fc:	03000713          	li	a4,48
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:89 (discriminator 2)
   14200:	00e780a3          	sb	a4,1(a5)
   14204:	0785                	addi	a5,a5,1
   14206:	fef49de3          	bne	s1,a5,14200 <printk_mkfloatstr+0x194>
   1420a:	9462                	add	s0,s0,s8
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:109
	c[i]='\0';
   1420c:	9b22                	add	s6,s6,s0
   1420e:	000b0023          	sb	zero,0(s6)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:111
}
   14212:	8522                	mv	a0,s0
   14214:	37c12083          	lw	ra,892(sp)
   14218:	37812403          	lw	s0,888(sp)
   1421c:	37412483          	lw	s1,884(sp)
   14220:	37012903          	lw	s2,880(sp)
   14224:	36c12983          	lw	s3,876(sp)
   14228:	36812a03          	lw	s4,872(sp)
   1422c:	36412a83          	lw	s5,868(sp)
   14230:	36012b03          	lw	s6,864(sp)
   14234:	35c12b83          	lw	s7,860(sp)
   14238:	35812c03          	lw	s8,856(sp)
   1423c:	35412c83          	lw	s9,852(sp)
   14240:	35012d03          	lw	s10,848(sp)
   14244:	34c12d83          	lw	s11,844(sp)
   14248:	38010113          	addi	sp,sp,896
   1424c:	8082                	ret
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:52
	uint32_t i=0,j=0,k=0,a[100]={0},b[100]={0};
   1424e:	4901                	li	s2,0
   14250:	bf9d                	j	141c6 <printk_mkfloatstr+0x15a>
   14252:	4901                	li	s2,0
   14254:	bf8d                	j	141c6 <printk_mkfloatstr+0x15a>
   14256:	1b010c93          	addi	s9,sp,432
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:72
	if(p==0)//整数部分为0
   1425a:	8466                	mv	s0,s9
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:52
	uint32_t i=0,j=0,k=0,a[100]={0},b[100]={0};
   1425c:	4b81                	li	s7,0
   1425e:	a021                	j	14266 <printk_mkfloatstr+0x1fa>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:79
			p/=10;
   14260:	8aaa                	mv	s5,a0
   14262:	8a2e                	mv	s4,a1
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:78
			a[j++]=p%10;
   14264:	8ba6                	mv	s7,s1
   14266:	001b8493          	addi	s1,s7,1
   1426a:	4629                	li	a2,10
   1426c:	4681                	li	a3,0
   1426e:	8556                	mv	a0,s5
   14270:	85d2                	mv	a1,s4
   14272:	00001097          	auipc	ra,0x1
   14276:	f6a080e7          	jalr	-150(ra) # 151dc <__umoddi3>
   1427a:	c008                	sw	a0,0(s0)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:79
			p/=10;
   1427c:	4629                	li	a2,10
   1427e:	4681                	li	a3,0
   14280:	8556                	mv	a0,s5
   14282:	85d2                	mv	a1,s4
   14284:	00001097          	auipc	ra,0x1
   14288:	bc0080e7          	jalr	-1088(ra) # 14e44 <__udivdi3>
   1428c:	0411                	addi	s0,s0,4
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:76
		while(p!=0)//倒序的数字
   1428e:	fc0a19e3          	bnez	s4,14260 <printk_mkfloatstr+0x1f4>
   14292:	000a1563          	bnez	s4,1429c <printk_mkfloatstr+0x230>
   14296:	47a5                	li	a5,9
   14298:	fd57e4e3          	bltu	a5,s5,14260 <printk_mkfloatstr+0x1f4>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:81
		while(j>0)//将倒序数字转为正序，并转换为对应的字符形式
   1429c:	dc95                	beqz	s1,141d8 <printk_mkfloatstr+0x16c>
   1429e:	0b8a                	slli	s7,s7,0x2
   142a0:	1b1c                	addi	a5,sp,432
   142a2:	9bbe                	add	s7,s7,a5
   142a4:	875a                	mv	a4,s6
   142a6:	a011                	j	142aa <printk_mkfloatstr+0x23e>
   142a8:	8bbe                	mv	s7,a5
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:83
			c[i++]=a[j-1]+'0';
   142aa:	000ba783          	lw	a5,0(s7)
   142ae:	03078793          	addi	a5,a5,48
   142b2:	00f70023          	sb	a5,0(a4)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:84
			j--;
   142b6:	ffcb8793          	addi	a5,s7,-4
   142ba:	0705                	addi	a4,a4,1
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:81
		while(j>0)//将倒序数字转为正序，并转换为对应的字符形式
   142bc:	ff9b96e3          	bne	s7,s9,142a8 <printk_mkfloatstr+0x23c>
   142c0:	bf21                	j	141d8 <printk_mkfloatstr+0x16c>
   142c2:	02010a13          	addi	s4,sp,32
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:88
	if(q==0)     //小数部分为0
   142c6:	8ad2                	mv	s5,s4
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:92
		j=0;
   142c8:	4481                	li	s1,0
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:93
		while(q!=0)//倒序的数字
   142ca:	4ba5                	li	s7,9
   142cc:	a019                	j	142d2 <printk_mkfloatstr+0x266>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:96
			q/=10;
   142ce:	8d2a                	mv	s10,a0
   142d0:	89ae                	mv	s3,a1
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:95
			b[j++]=q%10;
   142d2:	0485                	addi	s1,s1,1
   142d4:	4629                	li	a2,10
   142d6:	4681                	li	a3,0
   142d8:	856a                	mv	a0,s10
   142da:	85ce                	mv	a1,s3
   142dc:	00001097          	auipc	ra,0x1
   142e0:	f00080e7          	jalr	-256(ra) # 151dc <__umoddi3>
   142e4:	00aaa023          	sw	a0,0(s5)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:96
			q/=10;
   142e8:	4629                	li	a2,10
   142ea:	4681                	li	a3,0
   142ec:	856a                	mv	a0,s10
   142ee:	85ce                	mv	a1,s3
   142f0:	00001097          	auipc	ra,0x1
   142f4:	b54080e7          	jalr	-1196(ra) # 14e44 <__udivdi3>
   142f8:	0a91                	addi	s5,s5,4
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:93
		while(q!=0)//倒序的数字
   142fa:	fc099ae3          	bnez	s3,142ce <printk_mkfloatstr+0x262>
   142fe:	00099463          	bnez	s3,14306 <printk_mkfloatstr+0x29a>
   14302:	fdabe6e3          	bltu	s7,s10,142ce <printk_mkfloatstr+0x262>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:98
		while(k!=0)
   14306:	00090f63          	beqz	s2,14324 <printk_mkfloatstr+0x2b8>
   1430a:	00249793          	slli	a5,s1,0x2
   1430e:	1018                	addi	a4,sp,32
   14310:	97ba                	add	a5,a5,a4
   14312:	94ca                	add	s1,s1,s2
   14314:	00249713          	slli	a4,s1,0x2
   14318:	9752                	add	a4,a4,s4
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:100
			b[j++]=0;
   1431a:	0007a023          	sw	zero,0(a5)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:101
			k--;
   1431e:	0791                	addi	a5,a5,4
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:98
		while(k!=0)
   14320:	fee79de3          	bne	a5,a4,1431a <printk_mkfloatstr+0x2ae>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:103
		while(j>0)//将倒序数字转为正序，并转换为对应的字符形式
   14324:	ee0484e3          	beqz	s1,1420c <printk_mkfloatstr+0x1a0>
   14328:	00249793          	slli	a5,s1,0x2
   1432c:	0698                	addi	a4,sp,832
   1432e:	97ba                	add	a5,a5,a4
   14330:	cdc78793          	addi	a5,a5,-804
   14334:	008b06b3          	add	a3,s6,s0
   14338:	a011                	j	1433c <printk_mkfloatstr+0x2d0>
   1433a:	87ba                	mv	a5,a4
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:105
			c[i++]=b[j-1]+'0';
   1433c:	4398                	lw	a4,0(a5)
   1433e:	03070713          	addi	a4,a4,48
   14342:	00e68023          	sb	a4,0(a3)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:106
			j--;
   14346:	ffc78713          	addi	a4,a5,-4
   1434a:	0685                	addi	a3,a3,1
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:103
		while(j>0)//将倒序数字转为正序，并转换为对应的字符形式
   1434c:	fefa17e3          	bne	s4,a5,1433a <printk_mkfloatstr+0x2ce>
   14350:	9426                	add	s0,s0,s1
   14352:	bd6d                	j	1420c <printk_mkfloatstr+0x1a0>

00014354 <printk>:
printk():
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:202
//       fmt:输出格式信息
//       ap:va_list指针指向格式信息输出
//函数返回：无
//======================================================================
int printk(PRINTK_INFO *info, const char *fmt, char * ap)
{
   14354:	7175                	addi	sp,sp,-144
   14356:	c706                	sw	ra,140(sp)
   14358:	c522                	sw	s0,136(sp)
   1435a:	c326                	sw	s1,132(sp)
   1435c:	c14a                	sw	s2,128(sp)
   1435e:	dece                	sw	s3,124(sp)
   14360:	dcd2                	sw	s4,120(sp)
   14362:	dad6                	sw	s5,116(sp)
   14364:	d8da                	sw	s6,112(sp)
   14366:	d6de                	sw	s7,108(sp)
   14368:	d4e2                	sw	s8,104(sp)
   1436a:	d2e6                	sw	s9,100(sp)
   1436c:	d0ea                	sw	s10,96(sp)
   1436e:	ceee                	sw	s11,92(sp)
   14370:	8a2a                	mv	s4,a0
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:226

	}un1;*/
	char *p;
	int c;
	//char temp1;
	char vstr[33]={'0'};
   14372:	d602                	sw	zero,44(sp)
   14374:	d802                	sw	zero,48(sp)
   14376:	da02                	sw	zero,52(sp)
   14378:	dc02                	sw	zero,56(sp)
   1437a:	de02                	sw	zero,60(sp)
   1437c:	c082                	sw	zero,64(sp)
   1437e:	c282                	sw	zero,68(sp)
   14380:	c482                	sw	zero,72(sp)
   14382:	04010623          	sb	zero,76(sp)
   14386:	03000793          	li	a5,48
   1438a:	02f10623          	sb	a5,44(sp)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:247
	int *ivalp;
	char *sval;
	int cval;
	unsigned int uval;

	count = 0;
   1438e:	d402                	sw	zero,40(sp)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:251
	length_modifier=0;
	precision_used=TRUE;
	//从格式字符串第一个字符开始格式化输出数据
	for (p = (char *) fmt; (c = *p) != 0; p++)
   14390:	00058503          	lb	a0,0(a1)
   14394:	68050163          	beqz	a0,14a16 <printk+0x6c2>
   14398:	8b2e                	mv	s6,a1
   1439a:	8bb2                	mv	s7,a2
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:249
	precision_used=TRUE;
   1439c:	4d05                	li	s10,1
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:248
	length_modifier=0;
   1439e:	4c81                	li	s9,0
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:279
		//此时字符为%  查看百分号后的第一个格式字符，对输出格式字符并做出相应输出判断
		//检查相应的修改标志
		flags_used = 0;
		done = FALSE;
		while (!done) {
			switch (/* c = */*++p) {
   143a0:	00003417          	auipc	s0,0x3
   143a4:	31840413          	addi	s0,s0,792 # 176b8 <strlen+0x2d6>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:387
			--p;
			break;
		}

		//p为格式字符串的首地址
		switch (c = *++p) {
   143a8:	00003c17          	auipc	s8,0x3
   143ac:	354c0c13          	addi	s8,s8,852 # 176fc <strlen+0x31a>
   143b0:	a035                	j	143dc <printk+0x88>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:263
				printk_putc(0x0D /* CR */, &count, info);
   143b2:	8652                	mv	a2,s4
   143b4:	102c                	addi	a1,sp,40
   143b6:	4535                	li	a0,13
   143b8:	00000097          	auipc	ra,0x0
   143bc:	ba2080e7          	jalr	-1118(ra) # 13f5a <printk_putc>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:264
				printk_putc(0x0A /* LF */, &count, info);
   143c0:	8652                	mv	a2,s4
   143c2:	102c                	addi	a1,sp,40
   143c4:	4529                	li	a0,10
   143c6:	00000097          	auipc	ra,0x0
   143ca:	b94080e7          	jalr	-1132(ra) # 13f5a <printk_putc>
   143ce:	8ada                	mv	s5,s6
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:251 (discriminator 2)
	for (p = (char *) fmt; (c = *p) != 0; p++)
   143d0:	001a8b13          	addi	s6,s5,1
   143d4:	001a8503          	lb	a0,1(s5)
   143d8:	62050f63          	beqz	a0,14a16 <printk+0x6c2>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:254
		if (c != '%')
   143dc:	02500793          	li	a5,37
   143e0:	00f50d63          	beq	a0,a5,143fa <printk+0xa6>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:258
			if (c != '\n') {
   143e4:	47a9                	li	a5,10
   143e6:	fcf506e3          	beq	a0,a5,143b2 <printk+0x5e>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:259
				printk_putc(c, &count, info);
   143ea:	8652                	mv	a2,s4
   143ec:	102c                	addi	a1,sp,40
   143ee:	00000097          	auipc	ra,0x0
   143f2:	b6c080e7          	jalr	-1172(ra) # 13f5a <printk_putc>
   143f6:	8ada                	mv	s5,s6
   143f8:	bfe1                	j	143d0 <printk+0x7c>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:276
		flags_used = 0;
   143fa:	4481                	li	s1,0
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:279
			switch (/* c = */*++p) {
   143fc:	4641                	li	a2,16
   143fe:	a021                	j	14406 <printk+0xb2>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:281
				flags_used |= FLAGS_MINUS;
   14400:	0014e493          	ori	s1,s1,1
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:282
				break;
   14404:	8b36                	mv	s6,a3
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:279
			switch (/* c = */*++p) {
   14406:	001b0693          	addi	a3,s6,1
   1440a:	001b4783          	lbu	a5,1(s6)
   1440e:	1781                	addi	a5,a5,-32
   14410:	0ff7f713          	andi	a4,a5,255
   14414:	08e66c63          	bltu	a2,a4,144ac <printk+0x158>
   14418:	00271793          	slli	a5,a4,0x2
   1441c:	97a2                	add	a5,a5,s0
   1441e:	439c                	lw	a5,0(a5)
   14420:	97a2                	add	a5,a5,s0
   14422:	8782                	jr	a5
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:284
				flags_used |= FLAGS_PLUS;
   14424:	0024e493          	ori	s1,s1,2
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:285
				break;
   14428:	bff1                	j	14404 <printk+0xb0>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:287
				flags_used |= FLAGS_SPACE;
   1442a:	0044e493          	ori	s1,s1,4
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:288
				break;
   1442e:	bfd9                	j	14404 <printk+0xb0>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:290
				flags_used |= FLAGS_ZERO;
   14430:	0084e493          	ori	s1,s1,8
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:291
				break;
   14434:	bfc1                	j	14404 <printk+0xb0>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:293
				flags_used |= FLAGS_POUND;
   14436:	0104e493          	ori	s1,s1,16
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:294
				break;
   1443a:	b7e9                	j	14404 <printk+0xb0>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:319
				field_width = (field_width * 10) + (c - '0');
   1443c:	00291793          	slli	a5,s2,0x2
   14440:	993e                	add	s2,s2,a5
   14442:	0906                	slli	s2,s2,0x1
   14444:	993a                	add	s2,s2,a4
   14446:	8b36                	mv	s6,a3
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:308
			switch (c = *++p) {
   14448:	001b0693          	addi	a3,s6,1
   1444c:	001b0703          	lb	a4,1(s6)
   14450:	fd070713          	addi	a4,a4,-48
   14454:	fee674e3          	bgeu	a2,a4,1443c <printk+0xe8>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:329
		if (/* (c = *++p) */*++p == '.') {
   14458:	001b0703          	lb	a4,1(s6)
   1445c:	02e00793          	li	a5,46
   14460:	04f70963          	beq	a4,a5,144b2 <printk+0x15e>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:366
			precision_width = 0;
   14464:	4981                	li	s3,0
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:365
			precision_used = FALSE;
   14466:	4d01                	li	s10,0
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:370
		switch (/* c = */*++p) {
   14468:	001b0693          	addi	a3,s6,1
   1446c:	001b0783          	lb	a5,1(s6)
   14470:	06800713          	li	a4,104
   14474:	06e78a63          	beq	a5,a4,144e8 <printk+0x194>
   14478:	06c00713          	li	a4,108
   1447c:	04e78e63          	beq	a5,a4,144d8 <printk+0x184>
   14480:	04c00713          	li	a4,76
   14484:	04e78e63          	beq	a5,a4,144e0 <printk+0x18c>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:387
		switch (c = *++p) {
   14488:	001b0a93          	addi	s5,s6,1
   1448c:	001b0503          	lb	a0,1(s6)
   14490:	fa850793          	addi	a5,a0,-88
   14494:	0ff7f693          	andi	a3,a5,255
   14498:	02000713          	li	a4,32
   1449c:	4cd76763          	bltu	a4,a3,1496a <printk+0x616>
   144a0:	00269793          	slli	a5,a3,0x2
   144a4:	97e2                	add	a5,a5,s8
   144a6:	439c                	lw	a5,0(a5)
   144a8:	97e2                	add	a5,a5,s8
   144aa:	8782                	jr	a5
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:305
		field_width = 0;
   144ac:	4901                	li	s2,0
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:308
			switch (c = *++p) {
   144ae:	4625                	li	a2,9
   144b0:	bf61                	j	14448 <printk+0xf4>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:329
		if (/* (c = *++p) */*++p == '.') {
   144b2:	8b36                	mv	s6,a3
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:335
			precision_width = 0;
   144b4:	4981                	li	s3,0
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:338
				switch ( c = *++p) {
   144b6:	4625                	li	a2,9
   144b8:	a039                	j	144c6 <printk+0x172>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:350
				precision_width = (precision_width * 10) +	(c - '0');
   144ba:	00299793          	slli	a5,s3,0x2
   144be:	99be                	add	s3,s3,a5
   144c0:	0986                	slli	s3,s3,0x1
   144c2:	99ba                	add	s3,s3,a4
   144c4:	8b36                	mv	s6,a3
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:338
				switch ( c = *++p) {
   144c6:	001b0693          	addi	a3,s6,1
   144ca:	001b0703          	lb	a4,1(s6)
   144ce:	fd070713          	addi	a4,a4,-48
   144d2:	fee674e3          	bgeu	a2,a4,144ba <printk+0x166>
   144d6:	bf49                	j	14468 <printk+0x114>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:375
			 length_modifier |= LENMOD_l;
   144d8:	001cec93          	ori	s9,s9,1
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:370
		switch (/* c = */*++p) {
   144dc:	8b36                	mv	s6,a3
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:376
			break;
   144de:	b76d                	j	14488 <printk+0x134>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:378
			 length_modifier |= LENMOD_L;
   144e0:	002cec93          	ori	s9,s9,2
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:370
		switch (/* c = */*++p) {
   144e4:	8b36                	mv	s6,a3
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:379
			break;
   144e6:	b74d                	j	14488 <printk+0x134>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:370
		switch (/* c = */*++p) {
   144e8:	8b36                	mv	s6,a3
   144ea:	bf79                	j	14488 <printk+0x134>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:391
		case 'd':
		case 'i':
			 //此时ap为指向可变参数列表的第一个参数
			ival = (int) va_arg1(ap, int);  //返回当前参数，并将ap指向下一个参数
   144ec:	004b8793          	addi	a5,s7,4
   144f0:	c63e                	sw	a5,12(sp)
   144f2:	000ba783          	lw	a5,0(s7)
   144f6:	d23e                	sw	a5,36(sp)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:392
			vlen = printk_mknumstr(vstr, &ival, TRUE, 10);//将整型转换成字符型保存在vstr中，返回字符数vlen
   144f8:	46a9                	li	a3,10
   144fa:	4605                	li	a2,1
   144fc:	104c                	addi	a1,sp,36
   144fe:	1068                	addi	a0,sp,44
   14500:	00000097          	auipc	ra,0x0
   14504:	a96080e7          	jalr	-1386(ra) # 13f96 <printk_mknumstr>
   14508:	8b2a                	mv	s6,a0
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:393
			vstrp = &vstr[vlen];  //指向转换后的最后一个字符
   1450a:	107c                	addi	a5,sp,44
   1450c:	00a789b3          	add	s3,a5,a0
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:396

			//若参数小于0，添加'-'号，并将字符长度加1
			if (ival < 0) {
   14510:	5792                	lw	a5,36(sp)
   14512:	0007ca63          	bltz	a5,14526 <printk+0x1d2>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:402
				schar = '-';
				++vlen;
			}
			//若参数不小于0，添加‘+’号或者‘ ’或者为0，并将字符长度加1
			else {
				if (IS_FLAG_PLUS(flags_used)) {
   14516:	0024f793          	andi	a5,s1,2
   1451a:	cf8d                	beqz	a5,14554 <printk+0x200>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:404
					schar = '+';
					++vlen;
   1451c:	00150b13          	addi	s6,a0,1
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:403
					schar = '+';
   14520:	02b00d93          	li	s11,43
   14524:	a029                	j	1452e <printk+0x1da>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:398
				++vlen;
   14526:	00150b13          	addi	s6,a0,1
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:397
				schar = '-';
   1452a:	02d00d93          	li	s11,45
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:419
			dschar = FALSE;

			/*
			 * do the ZERO pad.
			 */
			if (IS_FLAG_ZERO(flags_used)) {
   1452e:	0084f793          	andi	a5,s1,8
   14532:	eb95                	bnez	a5,14566 <printk+0x212>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:426
					printk_putc(schar, &count, info);  //输出符号
				dschar = TRUE;
				printk_pad_zero(vlen, field_width, &count, info);
				vlen = field_width;
			} else {
				if (!IS_FLAG_MINUS(flags_used)) {
   14534:	0014f793          	andi	a5,s1,1
   14538:	4a078e63          	beqz	a5,149f4 <printk+0x6a0>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:391
			ival = (int) va_arg1(ap, int);  //返回当前参数，并将ap指向下一个参数
   1453c:	4bb2                	lw	s7,12(sp)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:437
				}
			}

			/* the string was built in reverse order, now display in */
			/* correct order */
			if (!dschar && schar) {
   1453e:	280d8d63          	beqz	s11,147d8 <printk+0x484>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:438
				printk_putc(schar, &count, info);
   14542:	8652                	mv	a2,s4
   14544:	102c                	addi	a1,sp,40
   14546:	856e                	mv	a0,s11
   14548:	00000097          	auipc	ra,0x0
   1454c:	a12080e7          	jalr	-1518(ra) # 13f5a <printk_putc>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:391
			ival = (int) va_arg1(ap, int);  //返回当前参数，并将ap指向下一个参数
   14550:	4bb2                	lw	s7,12(sp)
   14552:	a459                	j	147d8 <printk+0x484>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:406
					if (IS_FLAG_SPACE(flags_used)) {
   14554:	0044f793          	andi	a5,s1,4
   14558:	46078663          	beqz	a5,149c4 <printk+0x670>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:408
						++vlen;
   1455c:	00150b13          	addi	s6,a0,1
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:407
						schar = ' ';
   14560:	02000d93          	li	s11,32
   14564:	b7e9                	j	1452e <printk+0x1da>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:421
					printk_putc(schar, &count, info);  //输出符号
   14566:	8652                	mv	a2,s4
   14568:	102c                	addi	a1,sp,40
   1456a:	856e                	mv	a0,s11
   1456c:	00000097          	auipc	ra,0x0
   14570:	9ee080e7          	jalr	-1554(ra) # 13f5a <printk_putc>
printk_pad_zero():
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:179
	for (i = curlen; i < field_width; i++) {
   14574:	332b5963          	bge	s6,s2,148a6 <printk+0x552>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:180
		printk_putc('0', count, info);
   14578:	8652                	mv	a2,s4
   1457a:	102c                	addi	a1,sp,40
   1457c:	03000513          	li	a0,48
   14580:	00000097          	auipc	ra,0x0
   14584:	9da080e7          	jalr	-1574(ra) # 13f5a <printk_putc>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:179
	for (i = curlen; i < field_width; i++) {
   14588:	0b05                	addi	s6,s6,1
   1458a:	ff2b17e3          	bne	s6,s2,14578 <printk+0x224>
   1458e:	8b4a                	mv	s6,s2
printk():
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:391
			ival = (int) va_arg1(ap, int);  //返回当前参数，并将ap指向下一个参数
   14590:	4bb2                	lw	s7,12(sp)
   14592:	a4e9                	j	1485c <printk+0x508>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:452
			//实际传入变参数 函数后 浮点数变为:0x6000000040091EB8 实际是将其转化为double型数据
			//但是顺序反了，我们要做的是将后四字节提前，然后把0x60移到紧接着前四个字节后的位置。
			
			//【20200816】  XSX，解决浮点数不优化问题
			ap=ap+4;
			fval= (double)va_arg1(ap,double);
   14594:	00cb8b13          	addi	s6,s7,12
   14598:	004bad83          	lw	s11,4(s7)
   1459c:	008bab83          	lw	s7,8(s7)
   145a0:	cc6e                	sw	s11,24(sp)
   145a2:	ce5e                	sw	s7,28(sp)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:456
			
			//【20200816】  XSX，解决负数的浮点数输出问题
			//若参数小于0，添加'-'号，并将字符长度加1
			if (fval < 0) {
   145a4:	4601                	li	a2,0
   145a6:	4681                	li	a3,0
   145a8:	856e                	mv	a0,s11
   145aa:	85de                	mv	a1,s7
   145ac:	00002097          	auipc	ra,0x2
   145b0:	d24080e7          	jalr	-732(ra) # 162d0 <__ledf2>
   145b4:	00054e63          	bltz	a0,145d0 <printk+0x27c>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:463
				fval = -fval;				//负数取它的正数
				++vlen;
			}
			//若参数不小于0，添加‘+’号或者‘ ’或者为0，并将字符长度加1
			else {
				if (IS_FLAG_PLUS(flags_used)) {
   145b8:	0024f793          	andi	a5,s1,2
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:464
					schar = '+';
   145bc:	02b00b93          	li	s7,43
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:463
				if (IS_FLAG_PLUS(flags_used)) {
   145c0:	e385                	bnez	a5,145e0 <printk+0x28c>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:467
					++vlen;
				} else {
					if (IS_FLAG_SPACE(flags_used)) {
   145c2:	0044fb93          	andi	s7,s1,4
   145c6:	000b8d63          	beqz	s7,145e0 <printk+0x28c>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:468
						schar = ' ';
   145ca:	02000b93          	li	s7,32
   145ce:	a809                	j	145e0 <printk+0x28c>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:458
				fval = -fval;				//负数取它的正数
   145d0:	cc6e                	sw	s11,24(sp)
   145d2:	800007b7          	lui	a5,0x80000
   145d6:	0177c7b3          	xor	a5,a5,s7
   145da:	ce3e                	sw	a5,28(sp)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:457
				schar = '-';
   145dc:	02d00b93          	li	s7,45
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:478
				}
			}
			dschar = FALSE;
			
			//确定是否使用小数点精度数值
			if(precision_used)
   145e0:	060d1c63          	bnez	s10,14658 <printk+0x304>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:485
				vlen = printk_mkfloatstr(&fval,vstr,precision_width);//将整型转换成字符型保存在vstr中，返回字符数vlen
				vstrp = &vstr[0];  //指向转换后的第一个字符
			}
			else
			{
				if(length_modifier==0)   //浮点型精度到小数点后8位
   145e4:	080c9363          	bnez	s9,1466a <printk+0x316>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:487
				{
					vlen = printk_mkfloatstr(&fval,vstr,6);//将整型转换成字符型保存在vstr中，返回字符数vlen
   145e8:	4619                	li	a2,6
   145ea:	106c                	addi	a1,sp,44
   145ec:	0828                	addi	a0,sp,24
   145ee:	00000097          	auipc	ra,0x0
   145f2:	a7e080e7          	jalr	-1410(ra) # 1406c <printk_mkfloatstr>
   145f6:	89aa                	mv	s3,a0
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:503
			

			/*
			 * do the ZERO pad.
			 */
			if (IS_FLAG_ZERO(flags_used)) {
   145f8:	0084f793          	andi	a5,s1,8
   145fc:	cbc1                	beqz	a5,1468c <printk+0x338>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:504
				if (schar)
   145fe:	060b9f63          	bnez	s7,1467c <printk+0x328>
printk_pad_zero():
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:179
	for (i = curlen; i < field_width; i++) {
   14602:	0129dd63          	bge	s3,s2,1461c <printk+0x2c8>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:180
		printk_putc('0', count, info);
   14606:	8652                	mv	a2,s4
   14608:	102c                	addi	a1,sp,40
   1460a:	03000513          	li	a0,48
   1460e:	00000097          	auipc	ra,0x0
   14612:	94c080e7          	jalr	-1716(ra) # 13f5a <printk_putc>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:179
	for (i = curlen; i < field_width; i++) {
   14616:	0985                	addi	s3,s3,1
   14618:	ff2997e3          	bne	s3,s2,14606 <printk+0x2b2>
printk():
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:524
			/* the string was built in reverse order, now display in */
			/* correct order */
			if (!dschar && schar) {
				printk_putc(schar, &count, info);
			}
			while (*vstrp)
   1461c:	02c10503          	lb	a0,44(sp)
   14620:	89ca                	mv	s3,s2
   14622:	cd09                	beqz	a0,1463c <printk+0x2e8>
   14624:	02c10b93          	addi	s7,sp,44
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:525
				printk_putc(*vstrp++, &count, info);
   14628:	0b85                	addi	s7,s7,1
   1462a:	8652                	mv	a2,s4
   1462c:	102c                	addi	a1,sp,40
   1462e:	00000097          	auipc	ra,0x0
   14632:	92c080e7          	jalr	-1748(ra) # 13f5a <printk_putc>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:524
			while (*vstrp)
   14636:	000b8503          	lb	a0,0(s7)
   1463a:	f57d                	bnez	a0,14628 <printk+0x2d4>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:526
			if (IS_FLAG_MINUS(flags_used)) {
   1463c:	8885                	andi	s1,s1,1
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:452
			fval= (double)va_arg1(ap,double);
   1463e:	8bda                	mv	s7,s6
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:526
			if (IS_FLAG_MINUS(flags_used)) {
   14640:	d80488e3          	beqz	s1,143d0 <printk+0x7c>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:527
				printk_pad_space(vlen, field_width, &count, info);
   14644:	86d2                	mv	a3,s4
   14646:	1030                	addi	a2,sp,40
   14648:	85ca                	mv	a1,s2
   1464a:	854e                	mv	a0,s3
   1464c:	00000097          	auipc	ra,0x0
   14650:	9cc080e7          	jalr	-1588(ra) # 14018 <printk_pad_space>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:452
			fval= (double)va_arg1(ap,double);
   14654:	8bda                	mv	s7,s6
   14656:	bbad                	j	143d0 <printk+0x7c>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:480
				vlen = printk_mkfloatstr(&fval,vstr,precision_width);//将整型转换成字符型保存在vstr中，返回字符数vlen
   14658:	864e                	mv	a2,s3
   1465a:	106c                	addi	a1,sp,44
   1465c:	0828                	addi	a0,sp,24
   1465e:	00000097          	auipc	ra,0x0
   14662:	a0e080e7          	jalr	-1522(ra) # 1406c <printk_mkfloatstr>
   14666:	89aa                	mv	s3,a0
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:481
				vstrp = &vstr[0];  //指向转换后的第一个字符
   14668:	bf41                	j	145f8 <printk+0x2a4>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:492
					vlen = printk_mkfloatstr(&fval,vstr,6);//将整型转换成字符型保存在vstr中，返回字符数vlen
   1466a:	4619                	li	a2,6
   1466c:	106c                	addi	a1,sp,44
   1466e:	0828                	addi	a0,sp,24
   14670:	00000097          	auipc	ra,0x0
   14674:	9fc080e7          	jalr	-1540(ra) # 1406c <printk_mkfloatstr>
   14678:	89aa                	mv	s3,a0
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:493
					vstrp = &vstr[0];  //指向转换后的第一个字符
   1467a:	bfbd                	j	145f8 <printk+0x2a4>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:505
					printk_putc(schar, &count, info);  //输出符号
   1467c:	8652                	mv	a2,s4
   1467e:	102c                	addi	a1,sp,40
   14680:	855e                	mv	a0,s7
   14682:	00000097          	auipc	ra,0x0
   14686:	8d8080e7          	jalr	-1832(ra) # 13f5a <printk_putc>
   1468a:	bfa5                	j	14602 <printk+0x2ae>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:510
				if (!IS_FLAG_MINUS(flags_used)) {
   1468c:	0014f793          	andi	a5,s1,1
   14690:	c799                	beqz	a5,1469e <printk+0x34a>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:521
			if (!dschar && schar) {
   14692:	020b9d63          	bnez	s7,146cc <printk+0x378>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:524
			while (*vstrp)
   14696:	02c10503          	lb	a0,44(sp)
   1469a:	f549                	bnez	a0,14624 <printk+0x2d0>
   1469c:	b765                	j	14644 <printk+0x2f0>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:511
					printk_pad_space(vlen, field_width, &count, info);  //输出空格
   1469e:	86d2                	mv	a3,s4
   146a0:	1030                	addi	a2,sp,40
   146a2:	85ca                	mv	a1,s2
   146a4:	854e                	mv	a0,s3
   146a6:	00000097          	auipc	ra,0x0
   146aa:	972080e7          	jalr	-1678(ra) # 14018 <printk_pad_space>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:513
					if (schar)
   146ae:	000b9763          	bnez	s7,146bc <printk+0x368>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:524
			while (*vstrp)
   146b2:	02c10503          	lb	a0,44(sp)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:452
			fval= (double)va_arg1(ap,double);
   146b6:	8bda                	mv	s7,s6
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:524
			while (*vstrp)
   146b8:	f535                	bnez	a0,14624 <printk+0x2d0>
   146ba:	bb19                	j	143d0 <printk+0x7c>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:514
						printk_putc(schar, &count, info);
   146bc:	8652                	mv	a2,s4
   146be:	102c                	addi	a1,sp,40
   146c0:	855e                	mv	a0,s7
   146c2:	00000097          	auipc	ra,0x0
   146c6:	898080e7          	jalr	-1896(ra) # 13f5a <printk_putc>
   146ca:	b7e5                	j	146b2 <printk+0x35e>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:522
				printk_putc(schar, &count, info);
   146cc:	8652                	mv	a2,s4
   146ce:	102c                	addi	a1,sp,40
   146d0:	855e                	mv	a0,s7
   146d2:	00000097          	auipc	ra,0x0
   146d6:	888080e7          	jalr	-1912(ra) # 13f5a <printk_putc>
   146da:	bf75                	j	14696 <printk+0x342>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:533
			}
            break;
        //以下是16进制整形输出
		case 'x':
		case 'X':
			uval = (unsigned int) va_arg1(ap, unsigned int);
   146dc:	004b8d93          	addi	s11,s7,4
   146e0:	000ba783          	lw	a5,0(s7)
   146e4:	ca3e                	sw	a5,20(sp)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:534
			vlen = printk_mknumstr(vstr, &uval, FALSE, 16);
   146e6:	46c1                	li	a3,16
   146e8:	4601                	li	a2,0
   146ea:	084c                	addi	a1,sp,20
   146ec:	1068                	addi	a0,sp,44
   146ee:	00000097          	auipc	ra,0x0
   146f2:	8a8080e7          	jalr	-1880(ra) # 13f96 <printk_mknumstr>
   146f6:	8b2a                	mv	s6,a0
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:535
			vstrp = &vstr[vlen];
   146f8:	107c                	addi	a5,sp,44
   146fa:	00a789b3          	add	s3,a5,a0
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:538

			dschar = FALSE;
			if (IS_FLAG_ZERO(flags_used)) {
   146fe:	0084f793          	andi	a5,s1,8
   14702:	c3a5                	beqz	a5,14762 <printk+0x40e>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:539
				if (IS_FLAG_POUND(flags_used)) {
   14704:	0104fb93          	andi	s7,s1,16
   14708:	020b9863          	bnez	s7,14738 <printk+0x3e4>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:537
			dschar = FALSE;
   1470c:	c65e                	sw	s7,12(sp)
printk_pad_zero():
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:179
	for (i = curlen; i < field_width; i++) {
   1470e:	29255b63          	bge	a0,s2,149a4 <printk+0x650>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:180
		printk_putc('0', count, info);
   14712:	8652                	mv	a2,s4
   14714:	102c                	addi	a1,sp,40
   14716:	03000513          	li	a0,48
   1471a:	00000097          	auipc	ra,0x0
   1471e:	840080e7          	jalr	-1984(ra) # 13f5a <printk_putc>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:179
	for (i = curlen; i < field_width; i++) {
   14722:	0b05                	addi	s6,s6,1
   14724:	ff2b47e3          	blt	s6,s2,14712 <printk+0x3be>
printk():
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:561
						dschar = TRUE;
					}
				}
			}

			if ((IS_FLAG_POUND(flags_used)) && !dschar) {
   14728:	180b8563          	beqz	s7,148b2 <printk+0x55e>
   1472c:	8b4a                	mv	s6,s2
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:533 (discriminator 1)
			uval = (unsigned int) va_arg1(ap, unsigned int);
   1472e:	8bee                	mv	s7,s11
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:561 (discriminator 1)
			if ((IS_FLAG_POUND(flags_used)) && !dschar) {
   14730:	47b2                	lw	a5,12(sp)
   14732:	12079563          	bnez	a5,1485c <printk+0x508>
   14736:	a4a1                	j	1497e <printk+0x62a>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:540
					printk_putc('0', &count, info);
   14738:	8652                	mv	a2,s4
   1473a:	102c                	addi	a1,sp,40
   1473c:	03000513          	li	a0,48
   14740:	00000097          	auipc	ra,0x0
   14744:	81a080e7          	jalr	-2022(ra) # 13f5a <printk_putc>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:541
					printk_putc('x', &count, info);
   14748:	8652                	mv	a2,s4
   1474a:	102c                	addi	a1,sp,40
   1474c:	07800513          	li	a0,120
   14750:	00000097          	auipc	ra,0x0
   14754:	80a080e7          	jalr	-2038(ra) # 13f5a <printk_putc>
printk_pad_zero():
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:179
	for (i = curlen; i < field_width; i++) {
   14758:	152b5a63          	bge	s6,s2,148ac <printk+0x558>
printk():
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:543
					dschar = TRUE;
   1475c:	4785                	li	a5,1
   1475e:	c63e                	sw	a5,12(sp)
   14760:	bf4d                	j	14712 <printk+0x3be>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:548
				if (!IS_FLAG_MINUS(flags_used)) {
   14762:	0014f793          	andi	a5,s1,1
   14766:	20079963          	bnez	a5,14978 <printk+0x624>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:549
					if (IS_FLAG_POUND(flags_used)) {
   1476a:	0104f793          	andi	a5,s1,16
   1476e:	22078e63          	beqz	a5,149aa <printk+0x656>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:550
						vlen += 2;
   14772:	00250b13          	addi	s6,a0,2
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:552
					printk_pad_space(vlen, field_width, &count, info);
   14776:	86d2                	mv	a3,s4
   14778:	1030                	addi	a2,sp,40
   1477a:	85ca                	mv	a1,s2
   1477c:	855a                	mv	a0,s6
   1477e:	00000097          	auipc	ra,0x0
   14782:	89a080e7          	jalr	-1894(ra) # 14018 <printk_pad_space>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:554
						printk_putc('0', &count, info);
   14786:	8652                	mv	a2,s4
   14788:	102c                	addi	a1,sp,40
   1478a:	03000513          	li	a0,48
   1478e:	fffff097          	auipc	ra,0xfffff
   14792:	7cc080e7          	jalr	1996(ra) # 13f5a <printk_putc>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:555
						printk_putc('x', &count, info);
   14796:	8652                	mv	a2,s4
   14798:	102c                	addi	a1,sp,40
   1479a:	07800513          	li	a0,120
   1479e:	fffff097          	auipc	ra,0xfffff
   147a2:	7bc080e7          	jalr	1980(ra) # 13f5a <printk_putc>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:561
			if ((IS_FLAG_POUND(flags_used)) && !dschar) {
   147a6:	ac09                	j	149b8 <printk+0x664>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:569
				vlen += 2;
			}
			goto cont_xd;
		//无符号以八进制表示的整数输出
		case 'o':
			uval = (unsigned int) va_arg1(ap, unsigned int);
   147a8:	004b8993          	addi	s3,s7,4
   147ac:	000ba783          	lw	a5,0(s7)
   147b0:	ca3e                	sw	a5,20(sp)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:570
			vlen = printk_mknumstr(vstr, &uval, FALSE, 8);
   147b2:	46a1                	li	a3,8
   147b4:	4601                	li	a2,0
   147b6:	084c                	addi	a1,sp,20
   147b8:	1068                	addi	a0,sp,44
   147ba:	fffff097          	auipc	ra,0xfffff
   147be:	7dc080e7          	jalr	2012(ra) # 13f96 <printk_mknumstr>
   147c2:	8b2a                	mv	s6,a0
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:569
			uval = (unsigned int) va_arg1(ap, unsigned int);
   147c4:	8bce                	mv	s7,s3
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:586
			goto cont_u;
		case 'u':
			uval = (unsigned int) va_arg1(ap, unsigned int);
			vlen = printk_mknumstr(vstr, &uval, FALSE, 10);

			cont_u: vstrp = &vstr[vlen];
   147c6:	107c                	addi	a5,sp,44
   147c8:	016789b3          	add	s3,a5,s6
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:588

			if (IS_FLAG_ZERO(flags_used)) {
   147cc:	0084f793          	andi	a5,s1,8
   147d0:	eba5                	bnez	a5,14840 <printk+0x4ec>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:592
				printk_pad_zero(vlen, field_width, &count, info);
				vlen = field_width;
			} else {
				if (!IS_FLAG_MINUS(flags_used)) {
   147d2:	0014f793          	andi	a5,s1,1
   147d6:	cfc5                	beqz	a5,1488e <printk+0x53a>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:597
					printk_pad_space(vlen, field_width, &count, info);
				}
			}

			cont_xd: while (*vstrp)
   147d8:	00098503          	lb	a0,0(s3)
   147dc:	e159                	bnez	a0,14862 <printk+0x50e>
   147de:	a879                	j	1487c <printk+0x528>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:574
			uval = (unsigned int) va_arg1(ap, unsigned int);
   147e0:	004b8993          	addi	s3,s7,4
   147e4:	000ba783          	lw	a5,0(s7)
   147e8:	ca3e                	sw	a5,20(sp)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:575
			vlen = printk_mknumstr(vstr, &uval, FALSE, 2);
   147ea:	4689                	li	a3,2
   147ec:	4601                	li	a2,0
   147ee:	084c                	addi	a1,sp,20
   147f0:	1068                	addi	a0,sp,44
   147f2:	fffff097          	auipc	ra,0xfffff
   147f6:	7a4080e7          	jalr	1956(ra) # 13f96 <printk_mknumstr>
   147fa:	8b2a                	mv	s6,a0
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:574
			uval = (unsigned int) va_arg1(ap, unsigned int);
   147fc:	8bce                	mv	s7,s3
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:576
			goto cont_u;
   147fe:	b7e1                	j	147c6 <printk+0x472>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:579
			uval = (unsigned int) va_arg1(ap, void *);
   14800:	004b8993          	addi	s3,s7,4
   14804:	000ba783          	lw	a5,0(s7)
   14808:	ca3e                	sw	a5,20(sp)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:580
			vlen = printk_mknumstr(vstr, &uval, FALSE, 16);
   1480a:	46c1                	li	a3,16
   1480c:	4601                	li	a2,0
   1480e:	084c                	addi	a1,sp,20
   14810:	1068                	addi	a0,sp,44
   14812:	fffff097          	auipc	ra,0xfffff
   14816:	784080e7          	jalr	1924(ra) # 13f96 <printk_mknumstr>
   1481a:	8b2a                	mv	s6,a0
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:579
			uval = (unsigned int) va_arg1(ap, void *);
   1481c:	8bce                	mv	s7,s3
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:581
			goto cont_u;
   1481e:	b765                	j	147c6 <printk+0x472>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:583
			uval = (unsigned int) va_arg1(ap, unsigned int);
   14820:	004b8993          	addi	s3,s7,4
   14824:	000ba783          	lw	a5,0(s7)
   14828:	ca3e                	sw	a5,20(sp)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:584
			vlen = printk_mknumstr(vstr, &uval, FALSE, 10);
   1482a:	46a9                	li	a3,10
   1482c:	4601                	li	a2,0
   1482e:	084c                	addi	a1,sp,20
   14830:	1068                	addi	a0,sp,44
   14832:	fffff097          	auipc	ra,0xfffff
   14836:	764080e7          	jalr	1892(ra) # 13f96 <printk_mknumstr>
   1483a:	8b2a                	mv	s6,a0
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:583
			uval = (unsigned int) va_arg1(ap, unsigned int);
   1483c:	8bce                	mv	s7,s3
   1483e:	b761                	j	147c6 <printk+0x472>
printk_pad_zero():
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:179
	for (i = curlen; i < field_width; i++) {
   14840:	072b5c63          	bge	s6,s2,148b8 <printk+0x564>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:180
		printk_putc('0', count, info);
   14844:	8652                	mv	a2,s4
   14846:	102c                	addi	a1,sp,40
   14848:	03000513          	li	a0,48
   1484c:	fffff097          	auipc	ra,0xfffff
   14850:	70e080e7          	jalr	1806(ra) # 13f5a <printk_putc>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:179
	for (i = curlen; i < field_width; i++) {
   14854:	0b05                	addi	s6,s6,1
   14856:	ff2b17e3          	bne	s6,s2,14844 <printk+0x4f0>
   1485a:	8b4a                	mv	s6,s2
printk():
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:597 (discriminator 1)
			cont_xd: while (*vstrp)
   1485c:	00098503          	lb	a0,0(s3)
   14860:	c919                	beqz	a0,14876 <printk+0x522>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:598
				printk_putc(*vstrp--, &count, info);
   14862:	19fd                	addi	s3,s3,-1
   14864:	8652                	mv	a2,s4
   14866:	102c                	addi	a1,sp,40
   14868:	fffff097          	auipc	ra,0xfffff
   1486c:	6f2080e7          	jalr	1778(ra) # 13f5a <printk_putc>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:597
			cont_xd: while (*vstrp)
   14870:	00098503          	lb	a0,0(s3)
   14874:	f57d                	bnez	a0,14862 <printk+0x50e>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:600

			if (IS_FLAG_MINUS(flags_used)) {
   14876:	8885                	andi	s1,s1,1
   14878:	b4048ce3          	beqz	s1,143d0 <printk+0x7c>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:601
				printk_pad_space(vlen, field_width, &count, info);
   1487c:	86d2                	mv	a3,s4
   1487e:	1030                	addi	a2,sp,40
   14880:	85ca                	mv	a1,s2
   14882:	855a                	mv	a0,s6
   14884:	fffff097          	auipc	ra,0xfffff
   14888:	794080e7          	jalr	1940(ra) # 14018 <printk_pad_space>
   1488c:	b691                	j	143d0 <printk+0x7c>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:593
					printk_pad_space(vlen, field_width, &count, info);
   1488e:	86d2                	mv	a3,s4
   14890:	1030                	addi	a2,sp,40
   14892:	85ca                	mv	a1,s2
   14894:	855a                	mv	a0,s6
   14896:	fffff097          	auipc	ra,0xfffff
   1489a:	782080e7          	jalr	1922(ra) # 14018 <printk_pad_space>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:597
			cont_xd: while (*vstrp)
   1489e:	00098503          	lb	a0,0(s3)
   148a2:	f161                	bnez	a0,14862 <printk+0x50e>
   148a4:	b635                	j	143d0 <printk+0x7c>
printk_pad_zero():
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:179
	for (i = curlen; i < field_width; i++) {
   148a6:	8b4a                	mv	s6,s2
printk():
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:391
			ival = (int) va_arg1(ap, int);  //返回当前参数，并将ap指向下一个参数
   148a8:	4bb2                	lw	s7,12(sp)
   148aa:	bf4d                	j	1485c <printk+0x508>
printk_pad_zero():
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:179
	for (i = curlen; i < field_width; i++) {
   148ac:	8b4a                	mv	s6,s2
printk():
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:533
			uval = (unsigned int) va_arg1(ap, unsigned int);
   148ae:	8bee                	mv	s7,s11
   148b0:	b775                	j	1485c <printk+0x508>
   148b2:	8b4a                	mv	s6,s2
   148b4:	8bee                	mv	s7,s11
   148b6:	b75d                	j	1485c <printk+0x508>
printk_pad_zero():
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:179
	for (i = curlen; i < field_width; i++) {
   148b8:	8b4a                	mv	s6,s2
   148ba:	b74d                	j	1485c <printk+0x508>
printk():
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:607
			}

			break;
        //字符型输出
		case 'c':
			cval = (char) va_arg1(ap, unsigned int);
   148bc:	004b8493          	addi	s1,s7,4
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:608
			printk_putc(cval, &count, info);
   148c0:	8652                	mv	a2,s4
   148c2:	102c                	addi	a1,sp,40
   148c4:	000b8503          	lb	a0,0(s7)
   148c8:	fffff097          	auipc	ra,0xfffff
   148cc:	692080e7          	jalr	1682(ra) # 13f5a <printk_putc>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:607
			cval = (char) va_arg1(ap, unsigned int);
   148d0:	8ba6                	mv	s7,s1
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:609
			break;
   148d2:	bcfd                	j	143d0 <printk+0x7c>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:611
		case 's':
			sval = (char *) va_arg1(ap, char *);
   148d4:	004b8d93          	addi	s11,s7,4
   148d8:	000bab03          	lw	s6,0(s7)
   148dc:	8bee                	mv	s7,s11
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:612
			if (sval) {
   148de:	ae0b09e3          	beqz	s6,143d0 <printk+0x7c>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:613
				vlen = strlen(sval);
   148e2:	855a                	mv	a0,s6
   148e4:	00003097          	auipc	ra,0x3
   148e8:	afe080e7          	jalr	-1282(ra) # 173e2 <strlen>
   148ec:	c62a                	sw	a0,12(sp)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:614
				if (!IS_FLAG_MINUS(flags_used)) {
   148ee:	8885                	andi	s1,s1,1
   148f0:	cc85                	beqz	s1,14928 <printk+0x5d4>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:617
					printk_pad_space(vlen, field_width, &count, info);
				}
				if(precision_width!=0)
   148f2:	04099363          	bnez	s3,14938 <printk+0x5e4>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:628
							printk_putc(*sval++, &count, info);					
					}
				}
				else    //precision_width=0情况
				{
					while (*sval)
   148f6:	000b0503          	lb	a0,0(s6)
   148fa:	c919                	beqz	a0,14910 <printk+0x5bc>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:629
					   printk_putc(*sval++, &count, info);
   148fc:	0b05                	addi	s6,s6,1
   148fe:	8652                	mv	a2,s4
   14900:	102c                	addi	a1,sp,40
   14902:	fffff097          	auipc	ra,0xfffff
   14906:	658080e7          	jalr	1624(ra) # 13f5a <printk_putc>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:628
					while (*sval)
   1490a:	000b0503          	lb	a0,0(s6)
   1490e:	f57d                	bnez	a0,148fc <printk+0x5a8>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:611
			sval = (char *) va_arg1(ap, char *);
   14910:	8bee                	mv	s7,s11
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:631
				}
				if (IS_FLAG_MINUS(flags_used)) {
   14912:	aa048fe3          	beqz	s1,143d0 <printk+0x7c>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:632
					printk_pad_space(vlen, field_width, &count, info);
   14916:	86d2                	mv	a3,s4
   14918:	1030                	addi	a2,sp,40
   1491a:	85ca                	mv	a1,s2
   1491c:	4532                	lw	a0,12(sp)
   1491e:	fffff097          	auipc	ra,0xfffff
   14922:	6fa080e7          	jalr	1786(ra) # 14018 <printk_pad_space>
   14926:	b46d                	j	143d0 <printk+0x7c>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:615
					printk_pad_space(vlen, field_width, &count, info);
   14928:	86d2                	mv	a3,s4
   1492a:	1030                	addi	a2,sp,40
   1492c:	85ca                	mv	a1,s2
   1492e:	fffff097          	auipc	ra,0xfffff
   14932:	6ea080e7          	jalr	1770(ra) # 14018 <printk_pad_space>
   14936:	bf75                	j	148f2 <printk+0x59e>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:620
					while (precision_width>=1&&*sval)
   14938:	fd305ce3          	blez	s3,14910 <printk+0x5bc>
   1493c:	000b0503          	lb	a0,0(s6)
   14940:	d961                	beqz	a0,14910 <printk+0x5bc>
   14942:	99da                	add	s3,s3,s6
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:623
							printk_putc(*sval++, &count, info);					
   14944:	0b05                	addi	s6,s6,1
   14946:	8652                	mv	a2,s4
   14948:	102c                	addi	a1,sp,40
   1494a:	fffff097          	auipc	ra,0xfffff
   1494e:	610080e7          	jalr	1552(ra) # 13f5a <printk_putc>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:620
					while (precision_width>=1&&*sval)
   14952:	fb3b0fe3          	beq	s6,s3,14910 <printk+0x5bc>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:620 (discriminator 1)
   14956:	000b0503          	lb	a0,0(s6)
   1495a:	f56d                	bnez	a0,14944 <printk+0x5f0>
   1495c:	bf55                	j	14910 <printk+0x5bc>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:637
				}
			}
			break;
		case 'n':
			ivalp = (int *) va_arg1(ap, int *);
   1495e:	000ba783          	lw	a5,0(s7)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:638
			*ivalp = count;
   14962:	5722                	lw	a4,40(sp)
   14964:	c398                	sw	a4,0(a5)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:637
			ivalp = (int *) va_arg1(ap, int *);
   14966:	0b91                	addi	s7,s7,4
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:639
			break;
   14968:	b4a5                	j	143d0 <printk+0x7c>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:642

		default:
			printk_putc(c, &count, info);
   1496a:	8652                	mv	a2,s4
   1496c:	102c                	addi	a1,sp,40
   1496e:	fffff097          	auipc	ra,0xfffff
   14972:	5ec080e7          	jalr	1516(ra) # 13f5a <printk_putc>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:643
			break;
   14976:	bca9                	j	143d0 <printk+0x7c>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:561
			if ((IS_FLAG_POUND(flags_used)) && !dschar) {
   14978:	0104f793          	andi	a5,s1,16
   1497c:	c7b5                	beqz	a5,149e8 <printk+0x694>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:562
				printk_putc('0', &count, info);
   1497e:	8652                	mv	a2,s4
   14980:	102c                	addi	a1,sp,40
   14982:	03000513          	li	a0,48
   14986:	fffff097          	auipc	ra,0xfffff
   1498a:	5d4080e7          	jalr	1492(ra) # 13f5a <printk_putc>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:563
				printk_putc('x', &count, info);
   1498e:	8652                	mv	a2,s4
   14990:	102c                	addi	a1,sp,40
   14992:	07800513          	li	a0,120
   14996:	fffff097          	auipc	ra,0xfffff
   1499a:	5c4080e7          	jalr	1476(ra) # 13f5a <printk_putc>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:564
				vlen += 2;
   1499e:	0b09                	addi	s6,s6,2
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:533
			uval = (unsigned int) va_arg1(ap, unsigned int);
   149a0:	8bee                	mv	s7,s11
   149a2:	bd6d                	j	1485c <printk+0x508>
printk_pad_zero():
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:179
	for (i = curlen; i < field_width; i++) {
   149a4:	8b4a                	mv	s6,s2
printk():
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:533
			uval = (unsigned int) va_arg1(ap, unsigned int);
   149a6:	8bee                	mv	s7,s11
   149a8:	bd55                	j	1485c <printk+0x508>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:552
					printk_pad_space(vlen, field_width, &count, info);
   149aa:	86d2                	mv	a3,s4
   149ac:	1030                	addi	a2,sp,40
   149ae:	85ca                	mv	a1,s2
   149b0:	fffff097          	auipc	ra,0xfffff
   149b4:	668080e7          	jalr	1640(ra) # 14018 <printk_pad_space>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:597
			cont_xd: while (*vstrp)
   149b8:	00098503          	lb	a0,0(s3)
   149bc:	8bee                	mv	s7,s11
   149be:	ea0512e3          	bnez	a0,14862 <printk+0x50e>
   149c2:	b439                	j	143d0 <printk+0x7c>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:419
			if (IS_FLAG_ZERO(flags_used)) {
   149c4:	0084fd93          	andi	s11,s1,8
   149c8:	ba0d96e3          	bnez	s11,14574 <printk+0x220>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:426
				if (!IS_FLAG_MINUS(flags_used)) {
   149cc:	0014f793          	andi	a5,s1,1
   149d0:	b60796e3          	bnez	a5,1453c <printk+0x1e8>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:427
					printk_pad_space(vlen, field_width, &count, info);  //输出空格
   149d4:	86d2                	mv	a3,s4
   149d6:	1030                	addi	a2,sp,40
   149d8:	85ca                	mv	a1,s2
   149da:	855a                	mv	a0,s6
   149dc:	fffff097          	auipc	ra,0xfffff
   149e0:	63c080e7          	jalr	1596(ra) # 14018 <printk_pad_space>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:391
			ival = (int) va_arg1(ap, int);  //返回当前参数，并将ap指向下一个参数
   149e4:	4bb2                	lw	s7,12(sp)
   149e6:	bd65                	j	1489e <printk+0x54a>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:597
			cont_xd: while (*vstrp)
   149e8:	00098503          	lb	a0,0(s3)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:533
			uval = (unsigned int) va_arg1(ap, unsigned int);
   149ec:	8bee                	mv	s7,s11
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:597
			cont_xd: while (*vstrp)
   149ee:	e6051ae3          	bnez	a0,14862 <printk+0x50e>
   149f2:	b569                	j	1487c <printk+0x528>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:427
					printk_pad_space(vlen, field_width, &count, info);  //输出空格
   149f4:	86d2                	mv	a3,s4
   149f6:	1030                	addi	a2,sp,40
   149f8:	85ca                	mv	a1,s2
   149fa:	855a                	mv	a0,s6
   149fc:	fffff097          	auipc	ra,0xfffff
   14a00:	61c080e7          	jalr	1564(ra) # 14018 <printk_pad_space>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:430
						printk_putc(schar, &count, info);
   14a04:	8652                	mv	a2,s4
   14a06:	102c                	addi	a1,sp,40
   14a08:	856e                	mv	a0,s11
   14a0a:	fffff097          	auipc	ra,0xfffff
   14a0e:	550080e7          	jalr	1360(ra) # 13f5a <printk_putc>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:391
			ival = (int) va_arg1(ap, int);  //返回当前参数，并将ap指向下一个参数
   14a12:	4bb2                	lw	s7,12(sp)
   14a14:	b569                	j	1489e <printk+0x54a>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:646
		}
	}
	return count;
   14a16:	5522                	lw	a0,40(sp)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:647
}
   14a18:	40ba                	lw	ra,140(sp)
   14a1a:	442a                	lw	s0,136(sp)
   14a1c:	449a                	lw	s1,132(sp)
   14a1e:	490a                	lw	s2,128(sp)
   14a20:	59f6                	lw	s3,124(sp)
   14a22:	5a66                	lw	s4,120(sp)
   14a24:	5ad6                	lw	s5,116(sp)
   14a26:	5b46                	lw	s6,112(sp)
   14a28:	5bb6                	lw	s7,108(sp)
   14a2a:	5c26                	lw	s8,104(sp)
   14a2c:	5c96                	lw	s9,100(sp)
   14a2e:	5d06                	lw	s10,96(sp)
   14a30:	4df6                	lw	s11,92(sp)
   14a32:	6149                	addi	sp,sp,144
   14a34:	8082                	ret

00014a36 <myprintf>:
myprintf():
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:656
//参数说明：const char *:打印参数字符串：对输入的字符串进行解析并按格式输出
//       例如： printf("c=%c\n",c); 将c按char型进行输出
//函数返回：字符串长度
//======================================================================
int myprintf(const char *fmt, ...)
{
   14a36:	7139                	addi	sp,sp,-64
   14a38:	ce06                	sw	ra,28(sp)
   14a3a:	d22e                	sw	a1,36(sp)
   14a3c:	d432                	sw	a2,40(sp)
   14a3e:	d636                	sw	a3,44(sp)
   14a40:	d83a                	sw	a4,48(sp)
   14a42:	da3e                	sw	a5,52(sp)
   14a44:	dc42                	sw	a6,56(sp)
   14a46:	de46                	sw	a7,60(sp)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:662
	//char * ap;
  va_list ap;
	char c;
	int rvalue;
	PRINTK_INFO info;
	info.dest = DEST_CONSOLE;  //宏定义为1
   14a48:	4785                	li	a5,1
   14a4a:	c03e                	sw	a5,0(sp)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:663
	info.func = &out_char;     //调用的串口输出函数
   14a4c:	fffff797          	auipc	a5,0xfffff
   14a50:	60878793          	addi	a5,a5,1544 # 14054 <out_char>
   14a54:	c23e                	sw	a5,4(sp)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:664
	va_start(ap, fmt);  //对ap 进行初始化，让它指向可变参数表里面的第一个参数
   14a56:	1050                	addi	a2,sp,36
   14a58:	c632                	sw	a2,12(sp)
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:665
	rvalue = printk(&info, fmt, ap);
   14a5a:	85aa                	mv	a1,a0
   14a5c:	850a                	mv	a0,sp
   14a5e:	00000097          	auipc	ra,0x0
   14a62:	8f6080e7          	jalr	-1802(ra) # 14354 <printk>
C:\Users\16233\Desktop\PWM-LS\PWM-CH573-20241127\Debug/srcc/printf.c:670
    
	va_end(ap);

	return rvalue;
}
   14a66:	40f2                	lw	ra,28(sp)
   14a68:	6121                	addi	sp,sp,64
   14a6a:	8082                	ret

00014a6c <__divdi3>:
__divdi3():
   14a6c:	4801                	li	a6,0
   14a6e:	0e05c663          	bltz	a1,14b5a <__divdi3+0xee>
   14a72:	0006db63          	bgez	a3,14a88 <__divdi3+0x1c>
   14a76:	40c00633          	neg	a2,a2
   14a7a:	00c037b3          	snez	a5,a2
   14a7e:	40d006b3          	neg	a3,a3
   14a82:	fff84813          	not	a6,a6
   14a86:	8e9d                	sub	a3,a3,a5
   14a88:	87b6                	mv	a5,a3
   14a8a:	8332                	mv	t1,a2
   14a8c:	8eaa                	mv	t4,a0
   14a8e:	88ae                	mv	a7,a1
   14a90:	18069163          	bnez	a3,14c12 <__divdi3+0x1a6>
   14a94:	0cc5fc63          	bgeu	a1,a2,14b6c <__divdi3+0x100>
   14a98:	6741                	lui	a4,0x10
   14a9a:	1ee66163          	bltu	a2,a4,14c7c <__divdi3+0x210>
   14a9e:	010007b7          	lui	a5,0x1000
   14aa2:	36f66563          	bltu	a2,a5,14e0c <__divdi3+0x3a0>
   14aa6:	01865693          	srli	a3,a2,0x18
   14aaa:	47e1                	li	a5,24
   14aac:	00003717          	auipc	a4,0x3
   14ab0:	d5c70713          	addi	a4,a4,-676 # 17808 <__clz_tab>
   14ab4:	9736                	add	a4,a4,a3
   14ab6:	00074703          	lbu	a4,0(a4)
   14aba:	97ba                	add	a5,a5,a4
   14abc:	02000713          	li	a4,32
   14ac0:	8f1d                	sub	a4,a4,a5
   14ac2:	cb19                	beqz	a4,14ad8 <__divdi3+0x6c>
   14ac4:	00e595b3          	sll	a1,a1,a4
   14ac8:	00f557b3          	srl	a5,a0,a5
   14acc:	00e61333          	sll	t1,a2,a4
   14ad0:	00b7e8b3          	or	a7,a5,a1
   14ad4:	00e51eb3          	sll	t4,a0,a4
   14ad8:	01035613          	srli	a2,t1,0x10
   14adc:	02c8d7b3          	divu	a5,a7,a2
   14ae0:	01031693          	slli	a3,t1,0x10
   14ae4:	82c1                	srli	a3,a3,0x10
   14ae6:	010ed713          	srli	a4,t4,0x10
   14aea:	02c8f5b3          	remu	a1,a7,a2
   14aee:	02f68533          	mul	a0,a3,a5
   14af2:	05c2                	slli	a1,a1,0x10
   14af4:	00e5e8b3          	or	a7,a1,a4
   14af8:	00a8fa63          	bgeu	a7,a0,14b0c <__divdi3+0xa0>
   14afc:	989a                	add	a7,a7,t1
   14afe:	fff78713          	addi	a4,a5,-1 # ffffff <_data_lma+0xfe86f7>
   14b02:	0068e463          	bltu	a7,t1,14b0a <__divdi3+0x9e>
   14b06:	32a8e963          	bltu	a7,a0,14e38 <__divdi3+0x3cc>
   14b0a:	87ba                	mv	a5,a4
   14b0c:	40a888b3          	sub	a7,a7,a0
   14b10:	02c8d5b3          	divu	a1,a7,a2
   14b14:	0ec2                	slli	t4,t4,0x10
   14b16:	010ede93          	srli	t4,t4,0x10
   14b1a:	02c8f8b3          	remu	a7,a7,a2
   14b1e:	02b686b3          	mul	a3,a3,a1
   14b22:	08c2                	slli	a7,a7,0x10
   14b24:	01d8e8b3          	or	a7,a7,t4
   14b28:	00d8fb63          	bgeu	a7,a3,14b3e <__divdi3+0xd2>
   14b2c:	989a                	add	a7,a7,t1
   14b2e:	fff58713          	addi	a4,a1,-1
   14b32:	0068e563          	bltu	a7,t1,14b3c <__divdi3+0xd0>
   14b36:	15f9                	addi	a1,a1,-2
   14b38:	00d8e363          	bltu	a7,a3,14b3e <__divdi3+0xd2>
   14b3c:	85ba                	mv	a1,a4
   14b3e:	01079513          	slli	a0,a5,0x10
   14b42:	8d4d                	or	a0,a0,a1
   14b44:	4581                	li	a1,0
   14b46:	00080963          	beqz	a6,14b58 <__divdi3+0xec>
   14b4a:	40a00533          	neg	a0,a0
   14b4e:	00a037b3          	snez	a5,a0
   14b52:	40b005b3          	neg	a1,a1
   14b56:	8d9d                	sub	a1,a1,a5
   14b58:	8082                	ret
   14b5a:	40a00533          	neg	a0,a0
   14b5e:	00a037b3          	snez	a5,a0
   14b62:	40b005b3          	neg	a1,a1
   14b66:	8d9d                	sub	a1,a1,a5
   14b68:	587d                	li	a6,-1
   14b6a:	b721                	j	14a72 <__divdi3+0x6>
   14b6c:	e601                	bnez	a2,14b74 <__divdi3+0x108>
   14b6e:	4305                	li	t1,1
   14b70:	02d35333          	divu	t1,t1,a3
   14b74:	6741                	lui	a4,0x10
   14b76:	0ee36a63          	bltu	t1,a4,14c6a <__divdi3+0x1fe>
   14b7a:	010007b7          	lui	a5,0x1000
   14b7e:	28f36b63          	bltu	t1,a5,14e14 <__divdi3+0x3a8>
   14b82:	01835693          	srli	a3,t1,0x18
   14b86:	47e1                	li	a5,24
   14b88:	00003717          	auipc	a4,0x3
   14b8c:	c8070713          	addi	a4,a4,-896 # 17808 <__clz_tab>
   14b90:	9736                	add	a4,a4,a3
   14b92:	00074703          	lbu	a4,0(a4)
   14b96:	97ba                	add	a5,a5,a4
   14b98:	02000713          	li	a4,32
   14b9c:	8f1d                	sub	a4,a4,a5
   14b9e:	eb65                	bnez	a4,14c8e <__divdi3+0x222>
   14ba0:	01031893          	slli	a7,t1,0x10
   14ba4:	406586b3          	sub	a3,a1,t1
   14ba8:	01035f13          	srli	t5,t1,0x10
   14bac:	0108d893          	srli	a7,a7,0x10
   14bb0:	4585                	li	a1,1
   14bb2:	010ed713          	srli	a4,t4,0x10
   14bb6:	03e6d7b3          	divu	a5,a3,t5
   14bba:	03e6f6b3          	remu	a3,a3,t5
   14bbe:	03178633          	mul	a2,a5,a7
   14bc2:	06c2                	slli	a3,a3,0x10
   14bc4:	8f55                	or	a4,a4,a3
   14bc6:	00c77a63          	bgeu	a4,a2,14bda <__divdi3+0x16e>
   14bca:	971a                	add	a4,a4,t1
   14bcc:	fff78693          	addi	a3,a5,-1 # ffffff <_data_lma+0xfe86f7>
   14bd0:	00676463          	bltu	a4,t1,14bd8 <__divdi3+0x16c>
   14bd4:	26c76563          	bltu	a4,a2,14e3e <__divdi3+0x3d2>
   14bd8:	87b6                	mv	a5,a3
   14bda:	8f11                	sub	a4,a4,a2
   14bdc:	03e756b3          	divu	a3,a4,t5
   14be0:	0ec2                	slli	t4,t4,0x10
   14be2:	010ede93          	srli	t4,t4,0x10
   14be6:	03e77733          	remu	a4,a4,t5
   14bea:	031688b3          	mul	a7,a3,a7
   14bee:	0742                	slli	a4,a4,0x10
   14bf0:	01d76733          	or	a4,a4,t4
   14bf4:	01177b63          	bgeu	a4,a7,14c0a <__divdi3+0x19e>
   14bf8:	971a                	add	a4,a4,t1
   14bfa:	fff68613          	addi	a2,a3,-1
   14bfe:	00676563          	bltu	a4,t1,14c08 <__divdi3+0x19c>
   14c02:	16f9                	addi	a3,a3,-2
   14c04:	01176363          	bltu	a4,a7,14c0a <__divdi3+0x19e>
   14c08:	86b2                	mv	a3,a2
   14c0a:	01079513          	slli	a0,a5,0x10
   14c0e:	8d55                	or	a0,a0,a3
   14c10:	bf1d                	j	14b46 <__divdi3+0xda>
   14c12:	04d5e163          	bltu	a1,a3,14c54 <__divdi3+0x1e8>
   14c16:	67c1                	lui	a5,0x10
   14c18:	04f6e163          	bltu	a3,a5,14c5a <__divdi3+0x1ee>
   14c1c:	010007b7          	lui	a5,0x1000
   14c20:	1ef6e263          	bltu	a3,a5,14e04 <__divdi3+0x398>
   14c24:	0186d893          	srli	a7,a3,0x18
   14c28:	4761                	li	a4,24
   14c2a:	00003797          	auipc	a5,0x3
   14c2e:	bde78793          	addi	a5,a5,-1058 # 17808 <__clz_tab>
   14c32:	97c6                	add	a5,a5,a7
   14c34:	0007c303          	lbu	t1,0(a5)
   14c38:	02000793          	li	a5,32
   14c3c:	933a                	add	t1,t1,a4
   14c3e:	406787b3          	sub	a5,a5,t1
   14c42:	ebe9                	bnez	a5,14d14 <__divdi3+0x2a8>
   14c44:	1cb6ec63          	bltu	a3,a1,14e1c <__divdi3+0x3b0>
   14c48:	00c53533          	sltu	a0,a0,a2
   14c4c:	00154513          	xori	a0,a0,1
   14c50:	4581                	li	a1,0
   14c52:	bdd5                	j	14b46 <__divdi3+0xda>
   14c54:	4581                	li	a1,0
   14c56:	4501                	li	a0,0
   14c58:	b5fd                	j	14b46 <__divdi3+0xda>
   14c5a:	0ff00793          	li	a5,255
   14c5e:	1cd7f263          	bgeu	a5,a3,14e22 <__divdi3+0x3b6>
   14c62:	0086d893          	srli	a7,a3,0x8
   14c66:	4721                	li	a4,8
   14c68:	b7c9                	j	14c2a <__divdi3+0x1be>
   14c6a:	0ff00713          	li	a4,255
   14c6e:	869a                	mv	a3,t1
   14c70:	f0677ce3          	bgeu	a4,t1,14b88 <__divdi3+0x11c>
   14c74:	00835693          	srli	a3,t1,0x8
   14c78:	47a1                	li	a5,8
   14c7a:	b739                	j	14b88 <__divdi3+0x11c>
   14c7c:	0ff00713          	li	a4,255
   14c80:	86b2                	mv	a3,a2
   14c82:	e2c775e3          	bgeu	a4,a2,14aac <__divdi3+0x40>
   14c86:	00865693          	srli	a3,a2,0x8
   14c8a:	47a1                	li	a5,8
   14c8c:	b505                	j	14aac <__divdi3+0x40>
   14c8e:	00e31333          	sll	t1,t1,a4
   14c92:	00f5d633          	srl	a2,a1,a5
   14c96:	01035f13          	srli	t5,t1,0x10
   14c9a:	03e65e33          	divu	t3,a2,t5
   14c9e:	00e596b3          	sll	a3,a1,a4
   14ca2:	00f557b3          	srl	a5,a0,a5
   14ca6:	8edd                	or	a3,a3,a5
   14ca8:	01031893          	slli	a7,t1,0x10
   14cac:	0108d893          	srli	a7,a7,0x10
   14cb0:	00e51eb3          	sll	t4,a0,a4
   14cb4:	0106d593          	srli	a1,a3,0x10
   14cb8:	03e677b3          	remu	a5,a2,t5
   14cbc:	03c88733          	mul	a4,a7,t3
   14cc0:	07c2                	slli	a5,a5,0x10
   14cc2:	8fcd                	or	a5,a5,a1
   14cc4:	00e7fb63          	bgeu	a5,a4,14cda <__divdi3+0x26e>
   14cc8:	979a                	add	a5,a5,t1
   14cca:	fffe0613          	addi	a2,t3,-1
   14cce:	1667e363          	bltu	a5,t1,14e34 <__divdi3+0x3c8>
   14cd2:	16e7f163          	bgeu	a5,a4,14e34 <__divdi3+0x3c8>
   14cd6:	1e79                	addi	t3,t3,-2
   14cd8:	979a                	add	a5,a5,t1
   14cda:	8f99                	sub	a5,a5,a4
   14cdc:	03e7d633          	divu	a2,a5,t5
   14ce0:	01069713          	slli	a4,a3,0x10
   14ce4:	8341                	srli	a4,a4,0x10
   14ce6:	03e7f7b3          	remu	a5,a5,t5
   14cea:	02c88533          	mul	a0,a7,a2
   14cee:	01079693          	slli	a3,a5,0x10
   14cf2:	8ed9                	or	a3,a3,a4
   14cf4:	00a6fb63          	bgeu	a3,a0,14d0a <__divdi3+0x29e>
   14cf8:	969a                	add	a3,a3,t1
   14cfa:	fff60793          	addi	a5,a2,-1
   14cfe:	1266e763          	bltu	a3,t1,14e2c <__divdi3+0x3c0>
   14d02:	12a6f563          	bgeu	a3,a0,14e2c <__divdi3+0x3c0>
   14d06:	1679                	addi	a2,a2,-2
   14d08:	969a                	add	a3,a3,t1
   14d0a:	010e1593          	slli	a1,t3,0x10
   14d0e:	8e89                	sub	a3,a3,a0
   14d10:	8dd1                	or	a1,a1,a2
   14d12:	b545                	j	14bb2 <__divdi3+0x146>
   14d14:	00665733          	srl	a4,a2,t1
   14d18:	00f696b3          	sll	a3,a3,a5
   14d1c:	8ed9                	or	a3,a3,a4
   14d1e:	0065d8b3          	srl	a7,a1,t1
   14d22:	0106df13          	srli	t5,a3,0x10
   14d26:	03e8deb3          	divu	t4,a7,t5
   14d2a:	01069e13          	slli	t3,a3,0x10
   14d2e:	00655333          	srl	t1,a0,t1
   14d32:	010e5e13          	srli	t3,t3,0x10
   14d36:	00f595b3          	sll	a1,a1,a5
   14d3a:	00b365b3          	or	a1,t1,a1
   14d3e:	0105d713          	srli	a4,a1,0x10
   14d42:	00f61633          	sll	a2,a2,a5
   14d46:	03e8f8b3          	remu	a7,a7,t5
   14d4a:	03de0333          	mul	t1,t3,t4
   14d4e:	08c2                	slli	a7,a7,0x10
   14d50:	00e8e733          	or	a4,a7,a4
   14d54:	00677b63          	bgeu	a4,t1,14d6a <__divdi3+0x2fe>
   14d58:	9736                	add	a4,a4,a3
   14d5a:	fffe8893          	addi	a7,t4,-1
   14d5e:	0cd76963          	bltu	a4,a3,14e30 <__divdi3+0x3c4>
   14d62:	0c677763          	bgeu	a4,t1,14e30 <__divdi3+0x3c4>
   14d66:	1ef9                	addi	t4,t4,-2
   14d68:	9736                	add	a4,a4,a3
   14d6a:	40670733          	sub	a4,a4,t1
   14d6e:	03e75333          	divu	t1,a4,t5
   14d72:	05c2                	slli	a1,a1,0x10
   14d74:	81c1                	srli	a1,a1,0x10
   14d76:	03e77733          	remu	a4,a4,t5
   14d7a:	026e08b3          	mul	a7,t3,t1
   14d7e:	0742                	slli	a4,a4,0x10
   14d80:	8dd9                	or	a1,a1,a4
   14d82:	0115fb63          	bgeu	a1,a7,14d98 <__divdi3+0x32c>
   14d86:	95b6                	add	a1,a1,a3
   14d88:	fff30713          	addi	a4,t1,-1 # fff <GEC_USER_SECTOR_END+0xfda>
   14d8c:	08d5ee63          	bltu	a1,a3,14e28 <__divdi3+0x3bc>
   14d90:	0915fc63          	bgeu	a1,a7,14e28 <__divdi3+0x3bc>
   14d94:	1379                	addi	t1,t1,-2
   14d96:	95b6                	add	a1,a1,a3
   14d98:	0ec2                	slli	t4,t4,0x10
   14d9a:	6f41                	lui	t5,0x10
   14d9c:	006eeeb3          	or	t4,t4,t1
   14da0:	ffff0713          	addi	a4,t5,-1 # ffff <MCU_SECTORSIZE+0xefff>
   14da4:	00eef6b3          	and	a3,t4,a4
   14da8:	010ed313          	srli	t1,t4,0x10
   14dac:	8f71                	and	a4,a4,a2
   14dae:	8241                	srli	a2,a2,0x10
   14db0:	02e68e33          	mul	t3,a3,a4
   14db4:	411585b3          	sub	a1,a1,a7
   14db8:	02c686b3          	mul	a3,a3,a2
   14dbc:	010e5893          	srli	a7,t3,0x10
   14dc0:	02e30733          	mul	a4,t1,a4
   14dc4:	96ba                	add	a3,a3,a4
   14dc6:	96c6                	add	a3,a3,a7
   14dc8:	02c30633          	mul	a2,t1,a2
   14dcc:	00e6f363          	bgeu	a3,a4,14dd2 <__divdi3+0x366>
   14dd0:	967a                	add	a2,a2,t5
   14dd2:	0106d313          	srli	t1,a3,0x10
   14dd6:	961a                	add	a2,a2,t1
   14dd8:	02c5e263          	bltu	a1,a2,14dfc <__divdi3+0x390>
   14ddc:	00c58563          	beq	a1,a2,14de6 <__divdi3+0x37a>
   14de0:	8576                	mv	a0,t4
   14de2:	4581                	li	a1,0
   14de4:	b38d                	j	14b46 <__divdi3+0xda>
   14de6:	6741                	lui	a4,0x10
   14de8:	177d                	addi	a4,a4,-1
   14dea:	8ef9                	and	a3,a3,a4
   14dec:	06c2                	slli	a3,a3,0x10
   14dee:	00ee7e33          	and	t3,t3,a4
   14df2:	00f517b3          	sll	a5,a0,a5
   14df6:	96f2                	add	a3,a3,t3
   14df8:	fed7f4e3          	bgeu	a5,a3,14de0 <__divdi3+0x374>
   14dfc:	fffe8513          	addi	a0,t4,-1
   14e00:	4581                	li	a1,0
   14e02:	b391                	j	14b46 <__divdi3+0xda>
   14e04:	0106d893          	srli	a7,a3,0x10
   14e08:	4741                	li	a4,16
   14e0a:	b505                	j	14c2a <__divdi3+0x1be>
   14e0c:	01065693          	srli	a3,a2,0x10
   14e10:	47c1                	li	a5,16
   14e12:	b969                	j	14aac <__divdi3+0x40>
   14e14:	01035693          	srli	a3,t1,0x10
   14e18:	47c1                	li	a5,16
   14e1a:	b3bd                	j	14b88 <__divdi3+0x11c>
   14e1c:	4581                	li	a1,0
   14e1e:	4505                	li	a0,1
   14e20:	b31d                	j	14b46 <__divdi3+0xda>
   14e22:	88b6                	mv	a7,a3
   14e24:	4701                	li	a4,0
   14e26:	b511                	j	14c2a <__divdi3+0x1be>
   14e28:	833a                	mv	t1,a4
   14e2a:	b7bd                	j	14d98 <__divdi3+0x32c>
   14e2c:	863e                	mv	a2,a5
   14e2e:	bdf1                	j	14d0a <__divdi3+0x29e>
   14e30:	8ec6                	mv	t4,a7
   14e32:	bf25                	j	14d6a <__divdi3+0x2fe>
   14e34:	8e32                	mv	t3,a2
   14e36:	b555                	j	14cda <__divdi3+0x26e>
   14e38:	17f9                	addi	a5,a5,-2
   14e3a:	989a                	add	a7,a7,t1
   14e3c:	b9c1                	j	14b0c <__divdi3+0xa0>
   14e3e:	17f9                	addi	a5,a5,-2
   14e40:	971a                	add	a4,a4,t1
   14e42:	bb61                	j	14bda <__divdi3+0x16e>

00014e44 <__udivdi3>:
__udivdi3():
   14e44:	87b6                	mv	a5,a3
   14e46:	88b2                	mv	a7,a2
   14e48:	832a                	mv	t1,a0
   14e4a:	882e                	mv	a6,a1
   14e4c:	14069d63          	bnez	a3,14fa6 <__udivdi3+0x162>
   14e50:	0ac5f963          	bgeu	a1,a2,14f02 <__udivdi3+0xbe>
   14e54:	6741                	lui	a4,0x10
   14e56:	1ae66e63          	bltu	a2,a4,15012 <__udivdi3+0x1ce>
   14e5a:	010007b7          	lui	a5,0x1000
   14e5e:	34f66363          	bltu	a2,a5,151a4 <__udivdi3+0x360>
   14e62:	01865693          	srli	a3,a2,0x18
   14e66:	47e1                	li	a5,24
   14e68:	00003717          	auipc	a4,0x3
   14e6c:	9a070713          	addi	a4,a4,-1632 # 17808 <__clz_tab>
   14e70:	9736                	add	a4,a4,a3
   14e72:	00074703          	lbu	a4,0(a4)
   14e76:	97ba                	add	a5,a5,a4
   14e78:	02000713          	li	a4,32
   14e7c:	8f1d                	sub	a4,a4,a5
   14e7e:	cb19                	beqz	a4,14e94 <__udivdi3+0x50>
   14e80:	00e59833          	sll	a6,a1,a4
   14e84:	00f557b3          	srl	a5,a0,a5
   14e88:	00e618b3          	sll	a7,a2,a4
   14e8c:	0107e833          	or	a6,a5,a6
   14e90:	00e51333          	sll	t1,a0,a4
   14e94:	0108d613          	srli	a2,a7,0x10
   14e98:	02c85533          	divu	a0,a6,a2
   14e9c:	01089693          	slli	a3,a7,0x10
   14ea0:	82c1                	srli	a3,a3,0x10
   14ea2:	01035793          	srli	a5,t1,0x10
   14ea6:	02c87733          	remu	a4,a6,a2
   14eaa:	02a685b3          	mul	a1,a3,a0
   14eae:	0742                	slli	a4,a4,0x10
   14eb0:	00f76833          	or	a6,a4,a5
   14eb4:	00b87a63          	bgeu	a6,a1,14ec8 <__udivdi3+0x84>
   14eb8:	9846                	add	a6,a6,a7
   14eba:	fff50793          	addi	a5,a0,-1
   14ebe:	01186463          	bltu	a6,a7,14ec6 <__udivdi3+0x82>
   14ec2:	30b86763          	bltu	a6,a1,151d0 <__udivdi3+0x38c>
   14ec6:	853e                	mv	a0,a5
   14ec8:	40b80833          	sub	a6,a6,a1
   14ecc:	02c85733          	divu	a4,a6,a2
   14ed0:	0342                	slli	t1,t1,0x10
   14ed2:	01035313          	srli	t1,t1,0x10
   14ed6:	02c87833          	remu	a6,a6,a2
   14eda:	02e686b3          	mul	a3,a3,a4
   14ede:	0842                	slli	a6,a6,0x10
   14ee0:	00686833          	or	a6,a6,t1
   14ee4:	00d87b63          	bgeu	a6,a3,14efa <__udivdi3+0xb6>
   14ee8:	9846                	add	a6,a6,a7
   14eea:	fff70793          	addi	a5,a4,-1
   14eee:	01186563          	bltu	a6,a7,14ef8 <__udivdi3+0xb4>
   14ef2:	1779                	addi	a4,a4,-2
   14ef4:	00d86363          	bltu	a6,a3,14efa <__udivdi3+0xb6>
   14ef8:	873e                	mv	a4,a5
   14efa:	0542                	slli	a0,a0,0x10
   14efc:	8d59                	or	a0,a0,a4
   14efe:	4581                	li	a1,0
   14f00:	8082                	ret
   14f02:	e601                	bnez	a2,14f0a <__udivdi3+0xc6>
   14f04:	4705                	li	a4,1
   14f06:	02c758b3          	divu	a7,a4,a2
   14f0a:	6741                	lui	a4,0x10
   14f0c:	0ee8ea63          	bltu	a7,a4,15000 <__udivdi3+0x1bc>
   14f10:	010007b7          	lui	a5,0x1000
   14f14:	28f8ec63          	bltu	a7,a5,151ac <__udivdi3+0x368>
   14f18:	0188d693          	srli	a3,a7,0x18
   14f1c:	47e1                	li	a5,24
   14f1e:	00003717          	auipc	a4,0x3
   14f22:	8ea70713          	addi	a4,a4,-1814 # 17808 <__clz_tab>
   14f26:	9736                	add	a4,a4,a3
   14f28:	00074683          	lbu	a3,0(a4)
   14f2c:	96be                	add	a3,a3,a5
   14f2e:	02000793          	li	a5,32
   14f32:	8f95                	sub	a5,a5,a3
   14f34:	ebe5                	bnez	a5,15024 <__udivdi3+0x1e0>
   14f36:	01089e93          	slli	t4,a7,0x10
   14f3a:	41158733          	sub	a4,a1,a7
   14f3e:	0108df13          	srli	t5,a7,0x10
   14f42:	010ede93          	srli	t4,t4,0x10
   14f46:	4585                	li	a1,1
   14f48:	01035793          	srli	a5,t1,0x10
   14f4c:	03e75533          	divu	a0,a4,t5
   14f50:	03e77733          	remu	a4,a4,t5
   14f54:	03d506b3          	mul	a3,a0,t4
   14f58:	0742                	slli	a4,a4,0x10
   14f5a:	8fd9                	or	a5,a5,a4
   14f5c:	00d7fa63          	bgeu	a5,a3,14f70 <__udivdi3+0x12c>
   14f60:	97c6                	add	a5,a5,a7
   14f62:	fff50713          	addi	a4,a0,-1
   14f66:	0117e463          	bltu	a5,a7,14f6e <__udivdi3+0x12a>
   14f6a:	26d7e663          	bltu	a5,a3,151d6 <__udivdi3+0x392>
   14f6e:	853a                	mv	a0,a4
   14f70:	8f95                	sub	a5,a5,a3
   14f72:	03e7d733          	divu	a4,a5,t5
   14f76:	0342                	slli	t1,t1,0x10
   14f78:	01035313          	srli	t1,t1,0x10
   14f7c:	03e7f7b3          	remu	a5,a5,t5
   14f80:	03d70eb3          	mul	t4,a4,t4
   14f84:	07c2                	slli	a5,a5,0x10
   14f86:	0067e7b3          	or	a5,a5,t1
   14f8a:	01d7fb63          	bgeu	a5,t4,14fa0 <__udivdi3+0x15c>
   14f8e:	97c6                	add	a5,a5,a7
   14f90:	fff70693          	addi	a3,a4,-1
   14f94:	0117e563          	bltu	a5,a7,14f9e <__udivdi3+0x15a>
   14f98:	1779                	addi	a4,a4,-2
   14f9a:	01d7e363          	bltu	a5,t4,14fa0 <__udivdi3+0x15c>
   14f9e:	8736                	mv	a4,a3
   14fa0:	0542                	slli	a0,a0,0x10
   14fa2:	8d59                	or	a0,a0,a4
   14fa4:	8082                	ret
   14fa6:	04d5e263          	bltu	a1,a3,14fea <__udivdi3+0x1a6>
   14faa:	67c1                	lui	a5,0x10
   14fac:	04f6e263          	bltu	a3,a5,14ff0 <__udivdi3+0x1ac>
   14fb0:	010007b7          	lui	a5,0x1000
   14fb4:	1ef6e463          	bltu	a3,a5,1519c <__udivdi3+0x358>
   14fb8:	0186d713          	srli	a4,a3,0x18
   14fbc:	4861                	li	a6,24
   14fbe:	00003797          	auipc	a5,0x3
   14fc2:	84a78793          	addi	a5,a5,-1974 # 17808 <__clz_tab>
   14fc6:	97ba                	add	a5,a5,a4
   14fc8:	0007c703          	lbu	a4,0(a5)
   14fcc:	02000e13          	li	t3,32
   14fd0:	9742                	add	a4,a4,a6
   14fd2:	40ee0e33          	sub	t3,t3,a4
   14fd6:	0c0e1a63          	bnez	t3,150aa <__udivdi3+0x266>
   14fda:	1cb6ed63          	bltu	a3,a1,151b4 <__udivdi3+0x370>
   14fde:	00c53533          	sltu	a0,a0,a2
   14fe2:	00154513          	xori	a0,a0,1
   14fe6:	4581                	li	a1,0
   14fe8:	8082                	ret
   14fea:	4581                	li	a1,0
   14fec:	4501                	li	a0,0
   14fee:	8082                	ret
   14ff0:	0ff00793          	li	a5,255
   14ff4:	1cd7f363          	bgeu	a5,a3,151ba <__udivdi3+0x376>
   14ff8:	0086d713          	srli	a4,a3,0x8
   14ffc:	4821                	li	a6,8
   14ffe:	b7c1                	j	14fbe <__udivdi3+0x17a>
   15000:	0ff00713          	li	a4,255
   15004:	86c6                	mv	a3,a7
   15006:	f1177ce3          	bgeu	a4,a7,14f1e <__udivdi3+0xda>
   1500a:	0088d693          	srli	a3,a7,0x8
   1500e:	47a1                	li	a5,8
   15010:	b739                	j	14f1e <__udivdi3+0xda>
   15012:	0ff00713          	li	a4,255
   15016:	86b2                	mv	a3,a2
   15018:	e4c778e3          	bgeu	a4,a2,14e68 <__udivdi3+0x24>
   1501c:	00865693          	srli	a3,a2,0x8
   15020:	47a1                	li	a5,8
   15022:	b599                	j	14e68 <__udivdi3+0x24>
   15024:	00f898b3          	sll	a7,a7,a5
   15028:	00d5d633          	srl	a2,a1,a3
   1502c:	0108df13          	srli	t5,a7,0x10
   15030:	03e65e33          	divu	t3,a2,t5
   15034:	00f59733          	sll	a4,a1,a5
   15038:	00d556b3          	srl	a3,a0,a3
   1503c:	8f55                	or	a4,a4,a3
   1503e:	01089e93          	slli	t4,a7,0x10
   15042:	010ede93          	srli	t4,t4,0x10
   15046:	00f51333          	sll	t1,a0,a5
   1504a:	01075593          	srli	a1,a4,0x10
   1504e:	03e676b3          	remu	a3,a2,t5
   15052:	03ce87b3          	mul	a5,t4,t3
   15056:	06c2                	slli	a3,a3,0x10
   15058:	8ecd                	or	a3,a3,a1
   1505a:	00f6fb63          	bgeu	a3,a5,15070 <__udivdi3+0x22c>
   1505e:	96c6                	add	a3,a3,a7
   15060:	fffe0613          	addi	a2,t3,-1
   15064:	1716e463          	bltu	a3,a7,151cc <__udivdi3+0x388>
   15068:	16f6f263          	bgeu	a3,a5,151cc <__udivdi3+0x388>
   1506c:	1e79                	addi	t3,t3,-2
   1506e:	96c6                	add	a3,a3,a7
   15070:	8e9d                	sub	a3,a3,a5
   15072:	03e6d633          	divu	a2,a3,t5
   15076:	01071793          	slli	a5,a4,0x10
   1507a:	83c1                	srli	a5,a5,0x10
   1507c:	03e6f6b3          	remu	a3,a3,t5
   15080:	02ce8533          	mul	a0,t4,a2
   15084:	01069713          	slli	a4,a3,0x10
   15088:	8f5d                	or	a4,a4,a5
   1508a:	00a77b63          	bgeu	a4,a0,150a0 <__udivdi3+0x25c>
   1508e:	9746                	add	a4,a4,a7
   15090:	fff60793          	addi	a5,a2,-1
   15094:	13176863          	bltu	a4,a7,151c4 <__udivdi3+0x380>
   15098:	12a77663          	bgeu	a4,a0,151c4 <__udivdi3+0x380>
   1509c:	1679                	addi	a2,a2,-2
   1509e:	9746                	add	a4,a4,a7
   150a0:	010e1593          	slli	a1,t3,0x10
   150a4:	8f09                	sub	a4,a4,a0
   150a6:	8dd1                	or	a1,a1,a2
   150a8:	b545                	j	14f48 <__udivdi3+0x104>
   150aa:	00e657b3          	srl	a5,a2,a4
   150ae:	01c696b3          	sll	a3,a3,t3
   150b2:	8edd                	or	a3,a3,a5
   150b4:	00e5d333          	srl	t1,a1,a4
   150b8:	0106df13          	srli	t5,a3,0x10
   150bc:	03e357b3          	divu	a5,t1,t5
   150c0:	01069e93          	slli	t4,a3,0x10
   150c4:	010ede93          	srli	t4,t4,0x10
   150c8:	01c59833          	sll	a6,a1,t3
   150cc:	00e55733          	srl	a4,a0,a4
   150d0:	01076833          	or	a6,a4,a6
   150d4:	01085893          	srli	a7,a6,0x10
   150d8:	01c61633          	sll	a2,a2,t3
   150dc:	03e37333          	remu	t1,t1,t5
   150e0:	02fe85b3          	mul	a1,t4,a5
   150e4:	0342                	slli	t1,t1,0x10
   150e6:	011368b3          	or	a7,t1,a7
   150ea:	00b8fb63          	bgeu	a7,a1,15100 <__udivdi3+0x2bc>
   150ee:	98b6                	add	a7,a7,a3
   150f0:	fff78713          	addi	a4,a5,-1
   150f4:	0cd8ea63          	bltu	a7,a3,151c8 <__udivdi3+0x384>
   150f8:	0cb8f863          	bgeu	a7,a1,151c8 <__udivdi3+0x384>
   150fc:	17f9                	addi	a5,a5,-2
   150fe:	98b6                	add	a7,a7,a3
   15100:	40b888b3          	sub	a7,a7,a1
   15104:	03e8d733          	divu	a4,a7,t5
   15108:	0842                	slli	a6,a6,0x10
   1510a:	01085813          	srli	a6,a6,0x10
   1510e:	03e8f8b3          	remu	a7,a7,t5
   15112:	02ee8333          	mul	t1,t4,a4
   15116:	08c2                	slli	a7,a7,0x10
   15118:	0108e5b3          	or	a1,a7,a6
   1511c:	0065fb63          	bgeu	a1,t1,15132 <__udivdi3+0x2ee>
   15120:	95b6                	add	a1,a1,a3
   15122:	fff70813          	addi	a6,a4,-1
   15126:	08d5ed63          	bltu	a1,a3,151c0 <__udivdi3+0x37c>
   1512a:	0865fb63          	bgeu	a1,t1,151c0 <__udivdi3+0x37c>
   1512e:	1779                	addi	a4,a4,-2
   15130:	95b6                	add	a1,a1,a3
   15132:	07c2                	slli	a5,a5,0x10
   15134:	6f41                	lui	t5,0x10
   15136:	8fd9                	or	a5,a5,a4
   15138:	ffff0713          	addi	a4,t5,-1 # ffff <MCU_SECTORSIZE+0xefff>
   1513c:	00e7f6b3          	and	a3,a5,a4
   15140:	0107d893          	srli	a7,a5,0x10
   15144:	8f71                	and	a4,a4,a2
   15146:	8241                	srli	a2,a2,0x10
   15148:	02e68eb3          	mul	t4,a3,a4
   1514c:	406585b3          	sub	a1,a1,t1
   15150:	02c686b3          	mul	a3,a3,a2
   15154:	010ed813          	srli	a6,t4,0x10
   15158:	02e88733          	mul	a4,a7,a4
   1515c:	96ba                	add	a3,a3,a4
   1515e:	96c2                	add	a3,a3,a6
   15160:	02c88633          	mul	a2,a7,a2
   15164:	00e6f363          	bgeu	a3,a4,1516a <__udivdi3+0x326>
   15168:	967a                	add	a2,a2,t5
   1516a:	0106d893          	srli	a7,a3,0x10
   1516e:	9646                	add	a2,a2,a7
   15170:	02c5e263          	bltu	a1,a2,15194 <__udivdi3+0x350>
   15174:	00c58563          	beq	a1,a2,1517e <__udivdi3+0x33a>
   15178:	853e                	mv	a0,a5
   1517a:	4581                	li	a1,0
   1517c:	8082                	ret
   1517e:	6741                	lui	a4,0x10
   15180:	177d                	addi	a4,a4,-1
   15182:	8ef9                	and	a3,a3,a4
   15184:	06c2                	slli	a3,a3,0x10
   15186:	00eefeb3          	and	t4,t4,a4
   1518a:	01c51533          	sll	a0,a0,t3
   1518e:	96f6                	add	a3,a3,t4
   15190:	fed574e3          	bgeu	a0,a3,15178 <__udivdi3+0x334>
   15194:	fff78513          	addi	a0,a5,-1
   15198:	4581                	li	a1,0
   1519a:	8082                	ret
   1519c:	0106d713          	srli	a4,a3,0x10
   151a0:	4841                	li	a6,16
   151a2:	bd31                	j	14fbe <__udivdi3+0x17a>
   151a4:	01065693          	srli	a3,a2,0x10
   151a8:	47c1                	li	a5,16
   151aa:	b97d                	j	14e68 <__udivdi3+0x24>
   151ac:	0108d693          	srli	a3,a7,0x10
   151b0:	47c1                	li	a5,16
   151b2:	b3b5                	j	14f1e <__udivdi3+0xda>
   151b4:	4581                	li	a1,0
   151b6:	4505                	li	a0,1
   151b8:	8082                	ret
   151ba:	8736                	mv	a4,a3
   151bc:	4801                	li	a6,0
   151be:	b501                	j	14fbe <__udivdi3+0x17a>
   151c0:	8742                	mv	a4,a6
   151c2:	bf85                	j	15132 <__udivdi3+0x2ee>
   151c4:	863e                	mv	a2,a5
   151c6:	bde9                	j	150a0 <__udivdi3+0x25c>
   151c8:	87ba                	mv	a5,a4
   151ca:	bf1d                	j	15100 <__udivdi3+0x2bc>
   151cc:	8e32                	mv	t3,a2
   151ce:	b54d                	j	15070 <__udivdi3+0x22c>
   151d0:	1579                	addi	a0,a0,-2
   151d2:	9846                	add	a6,a6,a7
   151d4:	b9d5                	j	14ec8 <__udivdi3+0x84>
   151d6:	1579                	addi	a0,a0,-2
   151d8:	97c6                	add	a5,a5,a7
   151da:	bb59                	j	14f70 <__udivdi3+0x12c>

000151dc <__umoddi3>:
__umoddi3():
   151dc:	87b6                	mv	a5,a3
   151de:	8832                	mv	a6,a2
   151e0:	832a                	mv	t1,a0
   151e2:	872e                	mv	a4,a1
   151e4:	8e2e                	mv	t3,a1
   151e6:	14069363          	bnez	a3,1532c <__umoddi3+0x150>
   151ea:	0ac5f163          	bgeu	a1,a2,1528c <__umoddi3+0xb0>
   151ee:	6741                	lui	a4,0x10
   151f0:	1ae67863          	bgeu	a2,a4,153a0 <__umoddi3+0x1c4>
   151f4:	0ff00713          	li	a4,255
   151f8:	86b2                	mv	a3,a2
   151fa:	00c77563          	bgeu	a4,a2,15204 <__umoddi3+0x28>
   151fe:	00865693          	srli	a3,a2,0x8
   15202:	47a1                	li	a5,8
   15204:	00002717          	auipc	a4,0x2
   15208:	60470713          	addi	a4,a4,1540 # 17808 <__clz_tab>
   1520c:	9736                	add	a4,a4,a3
   1520e:	00074703          	lbu	a4,0(a4)
   15212:	02000893          	li	a7,32
   15216:	97ba                	add	a5,a5,a4
   15218:	40f888b3          	sub	a7,a7,a5
   1521c:	00088c63          	beqz	a7,15234 <__umoddi3+0x58>
   15220:	011595b3          	sll	a1,a1,a7
   15224:	00f557b3          	srl	a5,a0,a5
   15228:	01161833          	sll	a6,a2,a7
   1522c:	00b7ee33          	or	t3,a5,a1
   15230:	01151333          	sll	t1,a0,a7
   15234:	01085613          	srli	a2,a6,0x10
   15238:	02ce57b3          	divu	a5,t3,a2
   1523c:	01081513          	slli	a0,a6,0x10
   15240:	8141                	srli	a0,a0,0x10
   15242:	01035693          	srli	a3,t1,0x10
   15246:	02ce7e33          	remu	t3,t3,a2
   1524a:	02f507b3          	mul	a5,a0,a5
   1524e:	0e42                	slli	t3,t3,0x10
   15250:	00de6733          	or	a4,t3,a3
   15254:	00f77863          	bgeu	a4,a5,15264 <__umoddi3+0x88>
   15258:	9742                	add	a4,a4,a6
   1525a:	01076563          	bltu	a4,a6,15264 <__umoddi3+0x88>
   1525e:	00f77363          	bgeu	a4,a5,15264 <__umoddi3+0x88>
   15262:	9742                	add	a4,a4,a6
   15264:	8f1d                	sub	a4,a4,a5
   15266:	02c756b3          	divu	a3,a4,a2
   1526a:	01031793          	slli	a5,t1,0x10
   1526e:	83c1                	srli	a5,a5,0x10
   15270:	02c77733          	remu	a4,a4,a2
   15274:	02d50533          	mul	a0,a0,a3
   15278:	0742                	slli	a4,a4,0x10
   1527a:	8fd9                	or	a5,a5,a4
   1527c:	08a7ec63          	bltu	a5,a0,15314 <__umoddi3+0x138>
   15280:	40a78533          	sub	a0,a5,a0
   15284:	01155533          	srl	a0,a0,a7
   15288:	4581                	li	a1,0
   1528a:	8082                	ret
   1528c:	e601                	bnez	a2,15294 <__umoddi3+0xb8>
   1528e:	4705                	li	a4,1
   15290:	02c75833          	divu	a6,a4,a2
   15294:	6741                	lui	a4,0x10
   15296:	0ee86c63          	bltu	a6,a4,1538e <__umoddi3+0x1b2>
   1529a:	010007b7          	lui	a5,0x1000
   1529e:	2af86563          	bltu	a6,a5,15548 <__umoddi3+0x36c>
   152a2:	01885693          	srli	a3,a6,0x18
   152a6:	47e1                	li	a5,24
   152a8:	00002717          	auipc	a4,0x2
   152ac:	56070713          	addi	a4,a4,1376 # 17808 <__clz_tab>
   152b0:	9736                	add	a4,a4,a3
   152b2:	00074703          	lbu	a4,0(a4)
   152b6:	02000893          	li	a7,32
   152ba:	97ba                	add	a5,a5,a4
   152bc:	40f888b3          	sub	a7,a7,a5
   152c0:	1e089a63          	bnez	a7,154b4 <__umoddi3+0x2d8>
   152c4:	01081e13          	slli	t3,a6,0x10
   152c8:	410585b3          	sub	a1,a1,a6
   152cc:	01085613          	srli	a2,a6,0x10
   152d0:	010e5e13          	srli	t3,t3,0x10
   152d4:	01035713          	srli	a4,t1,0x10
   152d8:	02c5d6b3          	divu	a3,a1,a2
   152dc:	02c5f5b3          	remu	a1,a1,a2
   152e0:	03c686b3          	mul	a3,a3,t3
   152e4:	05c2                	slli	a1,a1,0x10
   152e6:	8f4d                	or	a4,a4,a1
   152e8:	00d77763          	bgeu	a4,a3,152f6 <__umoddi3+0x11a>
   152ec:	9742                	add	a4,a4,a6
   152ee:	01076463          	bltu	a4,a6,152f6 <__umoddi3+0x11a>
   152f2:	26d76a63          	bltu	a4,a3,15566 <__umoddi3+0x38a>
   152f6:	8f15                	sub	a4,a4,a3
   152f8:	02c75533          	divu	a0,a4,a2
   152fc:	0342                	slli	t1,t1,0x10
   152fe:	01035313          	srli	t1,t1,0x10
   15302:	02c77733          	remu	a4,a4,a2
   15306:	03c50533          	mul	a0,a0,t3
   1530a:	0742                	slli	a4,a4,0x10
   1530c:	006767b3          	or	a5,a4,t1
   15310:	00a7f863          	bgeu	a5,a0,15320 <__umoddi3+0x144>
   15314:	97c2                	add	a5,a5,a6
   15316:	0107e563          	bltu	a5,a6,15320 <__umoddi3+0x144>
   1531a:	00a7f363          	bgeu	a5,a0,15320 <__umoddi3+0x144>
   1531e:	97c2                	add	a5,a5,a6
   15320:	40a78533          	sub	a0,a5,a0
   15324:	01155533          	srl	a0,a0,a7
   15328:	4581                	li	a1,0
   1532a:	8082                	ret
   1532c:	882a                	mv	a6,a0
   1532e:	f4d5eee3          	bltu	a1,a3,1528a <__umoddi3+0xae>
   15332:	67c1                	lui	a5,0x10
   15334:	04f6e563          	bltu	a3,a5,1537e <__umoddi3+0x1a2>
   15338:	010007b7          	lui	a5,0x1000
   1533c:	20f6e263          	bltu	a3,a5,15540 <__umoddi3+0x364>
   15340:	0186d313          	srli	t1,a3,0x18
   15344:	48e1                	li	a7,24
   15346:	00002797          	auipc	a5,0x2
   1534a:	4c278793          	addi	a5,a5,1218 # 17808 <__clz_tab>
   1534e:	979a                	add	a5,a5,t1
   15350:	0007ce03          	lbu	t3,0(a5)
   15354:	02000313          	li	t1,32
   15358:	9e46                	add	t3,t3,a7
   1535a:	41c30333          	sub	t1,t1,t3
   1535e:	04031963          	bnez	t1,153b0 <__umoddi3+0x1d4>
   15362:	00b6e463          	bltu	a3,a1,1536a <__umoddi3+0x18e>
   15366:	00c56963          	bltu	a0,a2,15378 <__umoddi3+0x19c>
   1536a:	40c50833          	sub	a6,a0,a2
   1536e:	8d95                	sub	a1,a1,a3
   15370:	01053733          	sltu	a4,a0,a6
   15374:	40e58733          	sub	a4,a1,a4
   15378:	8542                	mv	a0,a6
   1537a:	85ba                	mv	a1,a4
   1537c:	8082                	ret
   1537e:	0ff00793          	li	a5,255
   15382:	1cd7fb63          	bgeu	a5,a3,15558 <__umoddi3+0x37c>
   15386:	0086d313          	srli	t1,a3,0x8
   1538a:	48a1                	li	a7,8
   1538c:	bf6d                	j	15346 <__umoddi3+0x16a>
   1538e:	0ff00713          	li	a4,255
   15392:	86c2                	mv	a3,a6
   15394:	f1077ae3          	bgeu	a4,a6,152a8 <__umoddi3+0xcc>
   15398:	00885693          	srli	a3,a6,0x8
   1539c:	47a1                	li	a5,8
   1539e:	b729                	j	152a8 <__umoddi3+0xcc>
   153a0:	010007b7          	lui	a5,0x1000
   153a4:	1af66663          	bltu	a2,a5,15550 <__umoddi3+0x374>
   153a8:	01865693          	srli	a3,a2,0x18
   153ac:	47e1                	li	a5,24
   153ae:	bd99                	j	15204 <__umoddi3+0x28>
   153b0:	01c657b3          	srl	a5,a2,t3
   153b4:	006696b3          	sll	a3,a3,t1
   153b8:	8edd                	or	a3,a3,a5
   153ba:	01c5d8b3          	srl	a7,a1,t3
   153be:	0106d713          	srli	a4,a3,0x10
   153c2:	02e8deb3          	divu	t4,a7,a4
   153c6:	01069f13          	slli	t5,a3,0x10
   153ca:	01c557b3          	srl	a5,a0,t3
   153ce:	010f5f13          	srli	t5,t5,0x10
   153d2:	006595b3          	sll	a1,a1,t1
   153d6:	8ddd                	or	a1,a1,a5
   153d8:	0105d813          	srli	a6,a1,0x10
   153dc:	00661633          	sll	a2,a2,t1
   153e0:	00651533          	sll	a0,a0,t1
   153e4:	02e8f8b3          	remu	a7,a7,a4
   153e8:	03df07b3          	mul	a5,t5,t4
   153ec:	08c2                	slli	a7,a7,0x10
   153ee:	0108e833          	or	a6,a7,a6
   153f2:	00f87b63          	bgeu	a6,a5,15408 <__umoddi3+0x22c>
   153f6:	9836                	add	a6,a6,a3
   153f8:	fffe8893          	addi	a7,t4,-1
   153fc:	16d86363          	bltu	a6,a3,15562 <__umoddi3+0x386>
   15400:	16f87163          	bgeu	a6,a5,15562 <__umoddi3+0x386>
   15404:	1ef9                	addi	t4,t4,-2
   15406:	9836                	add	a6,a6,a3
   15408:	40f80833          	sub	a6,a6,a5
   1540c:	02e857b3          	divu	a5,a6,a4
   15410:	05c2                	slli	a1,a1,0x10
   15412:	81c1                	srli	a1,a1,0x10
   15414:	02e87833          	remu	a6,a6,a4
   15418:	02ff0f33          	mul	t5,t5,a5
   1541c:	01081713          	slli	a4,a6,0x10
   15420:	8f4d                	or	a4,a4,a1
   15422:	01e77b63          	bgeu	a4,t5,15438 <__umoddi3+0x25c>
   15426:	9736                	add	a4,a4,a3
   15428:	fff78593          	addi	a1,a5,-1 # ffffff <_data_lma+0xfe86f7>
   1542c:	12d76963          	bltu	a4,a3,1555e <__umoddi3+0x382>
   15430:	13e77763          	bgeu	a4,t5,1555e <__umoddi3+0x382>
   15434:	17f9                	addi	a5,a5,-2
   15436:	9736                	add	a4,a4,a3
   15438:	0ec2                	slli	t4,t4,0x10
   1543a:	62c1                	lui	t0,0x10
   1543c:	00feeeb3          	or	t4,t4,a5
   15440:	fff28813          	addi	a6,t0,-1 # ffff <MCU_SECTORSIZE+0xefff>
   15444:	010ef8b3          	and	a7,t4,a6
   15448:	01065593          	srli	a1,a2,0x10
   1544c:	010ede93          	srli	t4,t4,0x10
   15450:	01067833          	and	a6,a2,a6
   15454:	03088fb3          	mul	t6,a7,a6
   15458:	41e70733          	sub	a4,a4,t5
   1545c:	030e8833          	mul	a6,t4,a6
   15460:	010fd793          	srli	a5,t6,0x10
   15464:	02b888b3          	mul	a7,a7,a1
   15468:	98c2                	add	a7,a7,a6
   1546a:	97c6                	add	a5,a5,a7
   1546c:	02be8eb3          	mul	t4,t4,a1
   15470:	0107f363          	bgeu	a5,a6,15476 <__umoddi3+0x29a>
   15474:	9e96                	add	t4,t4,t0
   15476:	6841                	lui	a6,0x10
   15478:	187d                	addi	a6,a6,-1
   1547a:	0107d593          	srli	a1,a5,0x10
   1547e:	0107f7b3          	and	a5,a5,a6
   15482:	07c2                	slli	a5,a5,0x10
   15484:	010fffb3          	and	t6,t6,a6
   15488:	95f6                	add	a1,a1,t4
   1548a:	97fe                	add	a5,a5,t6
   1548c:	0ab76263          	bltu	a4,a1,15530 <__umoddi3+0x354>
   15490:	08b70e63          	beq	a4,a1,1552c <__umoddi3+0x350>
   15494:	40f507b3          	sub	a5,a0,a5
   15498:	00f53533          	sltu	a0,a0,a5
   1549c:	40b705b3          	sub	a1,a4,a1
   154a0:	8d89                	sub	a1,a1,a0
   154a2:	01c59e33          	sll	t3,a1,t3
   154a6:	0067d533          	srl	a0,a5,t1
   154aa:	00ae6533          	or	a0,t3,a0
   154ae:	0065d5b3          	srl	a1,a1,t1
   154b2:	8082                	ret
   154b4:	01181833          	sll	a6,a6,a7
   154b8:	00f5d733          	srl	a4,a1,a5
   154bc:	01085613          	srli	a2,a6,0x10
   154c0:	02c756b3          	divu	a3,a4,a2
   154c4:	01081e13          	slli	t3,a6,0x10
   154c8:	00f557b3          	srl	a5,a0,a5
   154cc:	010e5e13          	srli	t3,t3,0x10
   154d0:	011595b3          	sll	a1,a1,a7
   154d4:	8ddd                	or	a1,a1,a5
   154d6:	0105de93          	srli	t4,a1,0x10
   154da:	01151333          	sll	t1,a0,a7
   154de:	02c77733          	remu	a4,a4,a2
   154e2:	02de07b3          	mul	a5,t3,a3
   154e6:	01071693          	slli	a3,a4,0x10
   154ea:	01d6e6b3          	or	a3,a3,t4
   154ee:	00f6f863          	bgeu	a3,a5,154fe <__umoddi3+0x322>
   154f2:	96c2                	add	a3,a3,a6
   154f4:	0106e563          	bltu	a3,a6,154fe <__umoddi3+0x322>
   154f8:	00f6f363          	bgeu	a3,a5,154fe <__umoddi3+0x322>
   154fc:	96c2                	add	a3,a3,a6
   154fe:	8e9d                	sub	a3,a3,a5
   15500:	02c6d733          	divu	a4,a3,a2
   15504:	01059793          	slli	a5,a1,0x10
   15508:	83c1                	srli	a5,a5,0x10
   1550a:	02c6f6b3          	remu	a3,a3,a2
   1550e:	02ee0733          	mul	a4,t3,a4
   15512:	01069593          	slli	a1,a3,0x10
   15516:	8ddd                	or	a1,a1,a5
   15518:	00e5f863          	bgeu	a1,a4,15528 <__umoddi3+0x34c>
   1551c:	95c2                	add	a1,a1,a6
   1551e:	0105e563          	bltu	a1,a6,15528 <__umoddi3+0x34c>
   15522:	00e5f363          	bgeu	a1,a4,15528 <__umoddi3+0x34c>
   15526:	95c2                	add	a1,a1,a6
   15528:	8d99                	sub	a1,a1,a4
   1552a:	b36d                	j	152d4 <__umoddi3+0xf8>
   1552c:	f6f574e3          	bgeu	a0,a5,15494 <__umoddi3+0x2b8>
   15530:	40c78633          	sub	a2,a5,a2
   15534:	00c7b7b3          	sltu	a5,a5,a2
   15538:	97b6                	add	a5,a5,a3
   1553a:	8d9d                	sub	a1,a1,a5
   1553c:	87b2                	mv	a5,a2
   1553e:	bf99                	j	15494 <__umoddi3+0x2b8>
   15540:	0106d313          	srli	t1,a3,0x10
   15544:	48c1                	li	a7,16
   15546:	b501                	j	15346 <__umoddi3+0x16a>
   15548:	01085693          	srli	a3,a6,0x10
   1554c:	47c1                	li	a5,16
   1554e:	bba9                	j	152a8 <__umoddi3+0xcc>
   15550:	01065693          	srli	a3,a2,0x10
   15554:	47c1                	li	a5,16
   15556:	b17d                	j	15204 <__umoddi3+0x28>
   15558:	8336                	mv	t1,a3
   1555a:	4881                	li	a7,0
   1555c:	b3ed                	j	15346 <__umoddi3+0x16a>
   1555e:	87ae                	mv	a5,a1
   15560:	bde1                	j	15438 <__umoddi3+0x25c>
   15562:	8ec6                	mv	t4,a7
   15564:	b555                	j	15408 <__umoddi3+0x22c>
   15566:	9742                	add	a4,a4,a6
   15568:	b379                	j	152f6 <__umoddi3+0x11a>

0001556a <__adddf3>:
__adddf3():
   1556a:	00100837          	lui	a6,0x100
   1556e:	1101                	addi	sp,sp,-32
   15570:	187d                	addi	a6,a6,-1
   15572:	00b87733          	and	a4,a6,a1
   15576:	ca26                	sw	s1,20(sp)
   15578:	00d87833          	and	a6,a6,a3
   1557c:	0145d493          	srli	s1,a1,0x14
   15580:	0146d313          	srli	t1,a3,0x14
   15584:	00371e13          	slli	t3,a4,0x3
   15588:	c64e                	sw	s3,12(sp)
   1558a:	01d55713          	srli	a4,a0,0x1d
   1558e:	080e                	slli	a6,a6,0x3
   15590:	01d65793          	srli	a5,a2,0x1d
   15594:	7ff4f493          	andi	s1,s1,2047
   15598:	7ff37313          	andi	t1,t1,2047
   1559c:	ce06                	sw	ra,28(sp)
   1559e:	cc22                	sw	s0,24(sp)
   155a0:	c84a                	sw	s2,16(sp)
   155a2:	01f5d993          	srli	s3,a1,0x1f
   155a6:	01f6de93          	srli	t4,a3,0x1f
   155aa:	01c76733          	or	a4,a4,t3
   155ae:	00351f13          	slli	t5,a0,0x3
   155b2:	0107e833          	or	a6,a5,a6
   155b6:	00361f93          	slli	t6,a2,0x3
   155ba:	40648e33          	sub	t3,s1,t1
   155be:	19d98263          	beq	s3,t4,15742 <__adddf3+0x1d8>
   155c2:	13c05863          	blez	t3,156f2 <__adddf3+0x188>
   155c6:	1c030663          	beqz	t1,15792 <__adddf3+0x228>
   155ca:	008006b7          	lui	a3,0x800
   155ce:	7ff00793          	li	a5,2047
   155d2:	00d86833          	or	a6,a6,a3
   155d6:	38f48363          	beq	s1,a5,1595c <__adddf3+0x3f2>
   155da:	03800793          	li	a5,56
   155de:	35c7c463          	blt	a5,t3,15926 <__adddf3+0x3bc>
   155e2:	47fd                	li	a5,31
   155e4:	49c7c163          	blt	a5,t3,15a66 <__adddf3+0x4fc>
   155e8:	02000513          	li	a0,32
   155ec:	41c50533          	sub	a0,a0,t3
   155f0:	01cfd7b3          	srl	a5,t6,t3
   155f4:	00a816b3          	sll	a3,a6,a0
   155f8:	00af9933          	sll	s2,t6,a0
   155fc:	8edd                	or	a3,a3,a5
   155fe:	01203933          	snez	s2,s2
   15602:	01c857b3          	srl	a5,a6,t3
   15606:	0126e933          	or	s2,a3,s2
   1560a:	8f1d                	sub	a4,a4,a5
   1560c:	412f0933          	sub	s2,t5,s2
   15610:	012f37b3          	sltu	a5,t5,s2
   15614:	40f70633          	sub	a2,a4,a5
   15618:	00861793          	slli	a5,a2,0x8
   1561c:	2407d663          	bgez	a5,15868 <__adddf3+0x2fe>
   15620:	00800737          	lui	a4,0x800
   15624:	177d                	addi	a4,a4,-1
   15626:	00e67433          	and	s0,a2,a4
   1562a:	2c040e63          	beqz	s0,15906 <__adddf3+0x39c>
   1562e:	8522                	mv	a0,s0
   15630:	00002097          	auipc	ra,0x2
   15634:	d3c080e7          	jalr	-708(ra) # 1736c <__clzsi2>
   15638:	ff850713          	addi	a4,a0,-8
   1563c:	02000793          	li	a5,32
   15640:	8f99                	sub	a5,a5,a4
   15642:	00f957b3          	srl	a5,s2,a5
   15646:	00e41633          	sll	a2,s0,a4
   1564a:	8fd1                	or	a5,a5,a2
   1564c:	00e91933          	sll	s2,s2,a4
   15650:	2a974163          	blt	a4,s1,158f2 <__adddf3+0x388>
   15654:	40970533          	sub	a0,a4,s1
   15658:	00150613          	addi	a2,a0,1
   1565c:	477d                	li	a4,31
   1565e:	38c74f63          	blt	a4,a2,159fc <__adddf3+0x492>
   15662:	02000713          	li	a4,32
   15666:	8f11                	sub	a4,a4,a2
   15668:	00c956b3          	srl	a3,s2,a2
   1566c:	00e91933          	sll	s2,s2,a4
   15670:	00e79733          	sll	a4,a5,a4
   15674:	8f55                	or	a4,a4,a3
   15676:	01203933          	snez	s2,s2
   1567a:	01276933          	or	s2,a4,s2
   1567e:	00c7d633          	srl	a2,a5,a2
   15682:	4481                	li	s1,0
   15684:	00797793          	andi	a5,s2,7
   15688:	cf81                	beqz	a5,156a0 <__adddf3+0x136>
   1568a:	00f97713          	andi	a4,s2,15
   1568e:	4791                	li	a5,4
   15690:	00f70863          	beq	a4,a5,156a0 <__adddf3+0x136>
   15694:	00490713          	addi	a4,s2,4
   15698:	01273933          	sltu	s2,a4,s2
   1569c:	964a                	add	a2,a2,s2
   1569e:	893a                	mv	s2,a4
   156a0:	00861793          	slli	a5,a2,0x8
   156a4:	1c07d663          	bgez	a5,15870 <__adddf3+0x306>
   156a8:	00148513          	addi	a0,s1,1
   156ac:	7ff00793          	li	a5,2047
   156b0:	85ce                	mv	a1,s3
   156b2:	20f50463          	beq	a0,a5,158ba <__adddf3+0x350>
   156b6:	ff8007b7          	lui	a5,0xff800
   156ba:	17fd                	addi	a5,a5,-1
   156bc:	8ff1                	and	a5,a5,a2
   156be:	01d79893          	slli	a7,a5,0x1d
   156c2:	00395913          	srli	s2,s2,0x3
   156c6:	07a6                	slli	a5,a5,0x9
   156c8:	0128e8b3          	or	a7,a7,s2
   156cc:	83b1                	srli	a5,a5,0xc
   156ce:	7ff57513          	andi	a0,a0,2047
   156d2:	00c79693          	slli	a3,a5,0xc
   156d6:	0552                	slli	a0,a0,0x14
   156d8:	40f2                	lw	ra,28(sp)
   156da:	4462                	lw	s0,24(sp)
   156dc:	82b1                	srli	a3,a3,0xc
   156de:	05fe                	slli	a1,a1,0x1f
   156e0:	8ec9                	or	a3,a3,a0
   156e2:	8ecd                	or	a3,a3,a1
   156e4:	44d2                	lw	s1,20(sp)
   156e6:	4942                	lw	s2,16(sp)
   156e8:	49b2                	lw	s3,12(sp)
   156ea:	8546                	mv	a0,a7
   156ec:	85b6                	mv	a1,a3
   156ee:	6105                	addi	sp,sp,32
   156f0:	8082                	ret
   156f2:	0a0e1e63          	bnez	t3,157ae <__adddf3+0x244>
   156f6:	00148313          	addi	t1,s1,1
   156fa:	7fe37313          	andi	t1,t1,2046
   156fe:	22031963          	bnez	t1,15930 <__adddf3+0x3c6>
   15702:	01e767b3          	or	a5,a4,t5
   15706:	01f868b3          	or	a7,a6,t6
   1570a:	1a049d63          	bnez	s1,158c4 <__adddf3+0x35a>
   1570e:	40078963          	beqz	a5,15b20 <__adddf3+0x5b6>
   15712:	44088863          	beqz	a7,15b62 <__adddf3+0x5f8>
   15716:	41ff0933          	sub	s2,t5,t6
   1571a:	410707b3          	sub	a5,a4,a6
   1571e:	012f3633          	sltu	a2,t5,s2
   15722:	40c78633          	sub	a2,a5,a2
   15726:	00861793          	slli	a5,a2,0x8
   1572a:	4c07d863          	bgez	a5,15bfa <__adddf3+0x690>
   1572e:	41ef8933          	sub	s2,t6,t5
   15732:	40e807b3          	sub	a5,a6,a4
   15736:	012fb633          	sltu	a2,t6,s2
   1573a:	40c78633          	sub	a2,a5,a2
   1573e:	89f6                	mv	s3,t4
   15740:	b791                	j	15684 <__adddf3+0x11a>
   15742:	0fc05063          	blez	t3,15822 <__adddf3+0x2b8>
   15746:	0c030063          	beqz	t1,15806 <__adddf3+0x29c>
   1574a:	008006b7          	lui	a3,0x800
   1574e:	7ff00793          	li	a5,2047
   15752:	00d86833          	or	a6,a6,a3
   15756:	3af48c63          	beq	s1,a5,15b0e <__adddf3+0x5a4>
   1575a:	03800793          	li	a5,56
   1575e:	13c7cb63          	blt	a5,t3,15894 <__adddf3+0x32a>
   15762:	47fd                	li	a5,31
   15764:	37c7d163          	bge	a5,t3,15ac6 <__adddf3+0x55c>
   15768:	fe0e0913          	addi	s2,t3,-32
   1576c:	02000793          	li	a5,32
   15770:	012856b3          	srl	a3,a6,s2
   15774:	00fe0a63          	beq	t3,a5,15788 <__adddf3+0x21e>
   15778:	04000913          	li	s2,64
   1577c:	41c90933          	sub	s2,s2,t3
   15780:	01281933          	sll	s2,a6,s2
   15784:	012fefb3          	or	t6,t6,s2
   15788:	01f03933          	snez	s2,t6
   1578c:	00d96933          	or	s2,s2,a3
   15790:	a231                	j	1589c <__adddf3+0x332>
   15792:	01f867b3          	or	a5,a6,t6
   15796:	1c078c63          	beqz	a5,1596e <__adddf3+0x404>
   1579a:	fffe0793          	addi	a5,t3,-1
   1579e:	38078e63          	beqz	a5,15b3a <__adddf3+0x5d0>
   157a2:	7ff00693          	li	a3,2047
   157a6:	1ade0b63          	beq	t3,a3,1595c <__adddf3+0x3f2>
   157aa:	8e3e                	mv	t3,a5
   157ac:	b53d                	j	155da <__adddf3+0x70>
   157ae:	409305b3          	sub	a1,t1,s1
   157b2:	22049363          	bnez	s1,159d8 <__adddf3+0x46e>
   157b6:	01e767b3          	or	a5,a4,t5
   157ba:	32078963          	beqz	a5,15aec <__adddf3+0x582>
   157be:	fff58793          	addi	a5,a1,-1
   157c2:	44078363          	beqz	a5,15c08 <__adddf3+0x69e>
   157c6:	7ff00693          	li	a3,2047
   157ca:	20d58e63          	beq	a1,a3,159e6 <__adddf3+0x47c>
   157ce:	85be                	mv	a1,a5
   157d0:	03800793          	li	a5,56
   157d4:	2ab7ce63          	blt	a5,a1,15a90 <__adddf3+0x526>
   157d8:	47fd                	li	a5,31
   157da:	3eb7c163          	blt	a5,a1,15bbc <__adddf3+0x652>
   157de:	02000793          	li	a5,32
   157e2:	8f8d                	sub	a5,a5,a1
   157e4:	00f71933          	sll	s2,a4,a5
   157e8:	00bf56b3          	srl	a3,t5,a1
   157ec:	00ff17b3          	sll	a5,t5,a5
   157f0:	00d96933          	or	s2,s2,a3
   157f4:	00f037b3          	snez	a5,a5
   157f8:	00b75733          	srl	a4,a4,a1
   157fc:	00f96933          	or	s2,s2,a5
   15800:	40e80833          	sub	a6,a6,a4
   15804:	ac51                	j	15a98 <__adddf3+0x52e>
   15806:	01f867b3          	or	a5,a6,t6
   1580a:	34078263          	beqz	a5,15b4e <__adddf3+0x5e4>
   1580e:	fffe0793          	addi	a5,t3,-1
   15812:	20078c63          	beqz	a5,15a2a <__adddf3+0x4c0>
   15816:	7ff00693          	li	a3,2047
   1581a:	2ede0a63          	beq	t3,a3,15b0e <__adddf3+0x5a4>
   1581e:	8e3e                	mv	t3,a5
   15820:	bf2d                	j	1575a <__adddf3+0x1f0>
   15822:	160e1063          	bnez	t3,15982 <__adddf3+0x418>
   15826:	00148693          	addi	a3,s1,1
   1582a:	7fe6f793          	andi	a5,a3,2046
   1582e:	34079363          	bnez	a5,15b74 <__adddf3+0x60a>
   15832:	01e767b3          	or	a5,a4,t5
   15836:	2c049763          	bnez	s1,15b04 <__adddf3+0x59a>
   1583a:	3e078263          	beqz	a5,15c1e <__adddf3+0x6b4>
   1583e:	01f867b3          	or	a5,a6,t6
   15842:	32078063          	beqz	a5,15b62 <__adddf3+0x5f8>
   15846:	01ff0933          	add	s2,t5,t6
   1584a:	010707b3          	add	a5,a4,a6
   1584e:	01e93f33          	sltu	t5,s2,t5
   15852:	01e78633          	add	a2,a5,t5
   15856:	00861793          	slli	a5,a2,0x8
   1585a:	0007d763          	bgez	a5,15868 <__adddf3+0x2fe>
   1585e:	ff8007b7          	lui	a5,0xff800
   15862:	17fd                	addi	a5,a5,-1
   15864:	8e7d                	and	a2,a2,a5
   15866:	4485                	li	s1,1
   15868:	00797793          	andi	a5,s2,7
   1586c:	e0079fe3          	bnez	a5,1568a <__adddf3+0x120>
   15870:	01d61793          	slli	a5,a2,0x1d
   15874:	00395893          	srli	a7,s2,0x3
   15878:	00f8e8b3          	or	a7,a7,a5
   1587c:	00365793          	srli	a5,a2,0x3
   15880:	7ff00713          	li	a4,2047
   15884:	04e48d63          	beq	s1,a4,158de <__adddf3+0x374>
   15888:	07b2                	slli	a5,a5,0xc
   1588a:	83b1                	srli	a5,a5,0xc
   1588c:	7ff4f513          	andi	a0,s1,2047
   15890:	85ce                	mv	a1,s3
   15892:	b581                	j	156d2 <__adddf3+0x168>
   15894:	01f86933          	or	s2,a6,t6
   15898:	01203933          	snez	s2,s2
   1589c:	997a                	add	s2,s2,t5
   1589e:	01e937b3          	sltu	a5,s2,t5
   158a2:	00e78633          	add	a2,a5,a4
   158a6:	00861793          	slli	a5,a2,0x8
   158aa:	fa07dfe3          	bgez	a5,15868 <__adddf3+0x2fe>
   158ae:	0485                	addi	s1,s1,1
   158b0:	7ff00793          	li	a5,2047
   158b4:	18f49863          	bne	s1,a5,15a44 <__adddf3+0x4da>
   158b8:	85ce                	mv	a1,s3
   158ba:	7ff00513          	li	a0,2047
   158be:	4781                	li	a5,0
   158c0:	4881                	li	a7,0
   158c2:	bd01                	j	156d2 <__adddf3+0x168>
   158c4:	ebd1                	bnez	a5,15958 <__adddf3+0x3ee>
   158c6:	3a088663          	beqz	a7,15c72 <__adddf3+0x708>
   158ca:	00361693          	slli	a3,a2,0x3
   158ce:	01d81793          	slli	a5,a6,0x1d
   158d2:	828d                	srli	a3,a3,0x3
   158d4:	00d7e8b3          	or	a7,a5,a3
   158d8:	89f6                	mv	s3,t4
   158da:	00385793          	srli	a5,a6,0x3
   158de:	00f8e7b3          	or	a5,a7,a5
   158e2:	dbf9                	beqz	a5,158b8 <__adddf3+0x34e>
   158e4:	4581                	li	a1,0
   158e6:	7ff00513          	li	a0,2047
   158ea:	000807b7          	lui	a5,0x80
   158ee:	4881                	li	a7,0
   158f0:	b3cd                	j	156d2 <__adddf3+0x168>
   158f2:	ff800637          	lui	a2,0xff800
   158f6:	167d                	addi	a2,a2,-1
   158f8:	8e7d                	and	a2,a2,a5
   158fa:	00797793          	andi	a5,s2,7
   158fe:	8c99                	sub	s1,s1,a4
   15900:	d80795e3          	bnez	a5,1568a <__adddf3+0x120>
   15904:	b7b5                	j	15870 <__adddf3+0x306>
   15906:	854a                	mv	a0,s2
   15908:	00002097          	auipc	ra,0x2
   1590c:	a64080e7          	jalr	-1436(ra) # 1736c <__clzsi2>
   15910:	01850713          	addi	a4,a0,24
   15914:	47fd                	li	a5,31
   15916:	d2e7d3e3          	bge	a5,a4,1563c <__adddf3+0xd2>
   1591a:	ff850613          	addi	a2,a0,-8
   1591e:	00c917b3          	sll	a5,s2,a2
   15922:	4901                	li	s2,0
   15924:	b335                	j	15650 <__adddf3+0xe6>
   15926:	01f86933          	or	s2,a6,t6
   1592a:	01203933          	snez	s2,s2
   1592e:	b9f9                	j	1560c <__adddf3+0xa2>
   15930:	41ff0933          	sub	s2,t5,t6
   15934:	41070633          	sub	a2,a4,a6
   15938:	012f3433          	sltu	s0,t5,s2
   1593c:	40860433          	sub	s0,a2,s0
   15940:	00841793          	slli	a5,s0,0x8
   15944:	2407cd63          	bltz	a5,15b9e <__adddf3+0x634>
   15948:	008968b3          	or	a7,s2,s0
   1594c:	cc089fe3          	bnez	a7,1562a <__adddf3+0xc0>
   15950:	4781                	li	a5,0
   15952:	4981                	li	s3,0
   15954:	4481                	li	s1,0
   15956:	bf0d                	j	15888 <__adddf3+0x31e>
   15958:	f80896e3          	bnez	a7,158e4 <__adddf3+0x37a>
   1595c:	050e                	slli	a0,a0,0x3
   1595e:	01d71793          	slli	a5,a4,0x1d
   15962:	810d                	srli	a0,a0,0x3
   15964:	00a7e8b3          	or	a7,a5,a0
   15968:	00375793          	srli	a5,a4,0x3
   1596c:	bf8d                	j	158de <__adddf3+0x374>
   1596e:	050e                	slli	a0,a0,0x3
   15970:	01d71793          	slli	a5,a4,0x1d
   15974:	810d                	srli	a0,a0,0x3
   15976:	00a7e8b3          	or	a7,a5,a0
   1597a:	84f2                	mv	s1,t3
   1597c:	00375793          	srli	a5,a4,0x3
   15980:	b701                	j	15880 <__adddf3+0x316>
   15982:	40930533          	sub	a0,t1,s1
   15986:	12048263          	beqz	s1,15aaa <__adddf3+0x540>
   1598a:	008006b7          	lui	a3,0x800
   1598e:	7ff00793          	li	a5,2047
   15992:	8f55                	or	a4,a4,a3
   15994:	2ef30d63          	beq	t1,a5,15c8e <__adddf3+0x724>
   15998:	03800793          	li	a5,56
   1599c:	20a7cb63          	blt	a5,a0,15bb2 <__adddf3+0x648>
   159a0:	47fd                	li	a5,31
   159a2:	2aa7c363          	blt	a5,a0,15c48 <__adddf3+0x6de>
   159a6:	02000793          	li	a5,32
   159aa:	8f89                	sub	a5,a5,a0
   159ac:	00f71933          	sll	s2,a4,a5
   159b0:	00af56b3          	srl	a3,t5,a0
   159b4:	00ff17b3          	sll	a5,t5,a5
   159b8:	00d96933          	or	s2,s2,a3
   159bc:	00f037b3          	snez	a5,a5
   159c0:	00a75733          	srl	a4,a4,a0
   159c4:	00f96933          	or	s2,s2,a5
   159c8:	983a                	add	a6,a6,a4
   159ca:	997e                	add	s2,s2,t6
   159cc:	01f937b3          	sltu	a5,s2,t6
   159d0:	01078633          	add	a2,a5,a6
   159d4:	849a                	mv	s1,t1
   159d6:	bdc1                	j	158a6 <__adddf3+0x33c>
   159d8:	008006b7          	lui	a3,0x800
   159dc:	7ff00793          	li	a5,2047
   159e0:	8f55                	or	a4,a4,a3
   159e2:	def317e3          	bne	t1,a5,157d0 <__adddf3+0x266>
   159e6:	00361793          	slli	a5,a2,0x3
   159ea:	838d                	srli	a5,a5,0x3
   159ec:	01d81893          	slli	a7,a6,0x1d
   159f0:	0117e8b3          	or	a7,a5,a7
   159f4:	89f6                	mv	s3,t4
   159f6:	00385793          	srli	a5,a6,0x3
   159fa:	b5d5                	j	158de <__adddf3+0x374>
   159fc:	fe150713          	addi	a4,a0,-31
   15a00:	02000693          	li	a3,32
   15a04:	00e7d733          	srl	a4,a5,a4
   15a08:	00d60a63          	beq	a2,a3,15a1c <__adddf3+0x4b2>
   15a0c:	04000693          	li	a3,64
   15a10:	40c68633          	sub	a2,a3,a2
   15a14:	00c79633          	sll	a2,a5,a2
   15a18:	00c96933          	or	s2,s2,a2
   15a1c:	01203933          	snez	s2,s2
   15a20:	00e96933          	or	s2,s2,a4
   15a24:	4601                	li	a2,0
   15a26:	4481                	li	s1,0
   15a28:	b581                	j	15868 <__adddf3+0x2fe>
   15a2a:	01ff0933          	add	s2,t5,t6
   15a2e:	010707b3          	add	a5,a4,a6
   15a32:	01e93633          	sltu	a2,s2,t5
   15a36:	963e                	add	a2,a2,a5
   15a38:	00861793          	slli	a5,a2,0x8
   15a3c:	4485                	li	s1,1
   15a3e:	e207d5e3          	bgez	a5,15868 <__adddf3+0x2fe>
   15a42:	4489                	li	s1,2
   15a44:	ff8007b7          	lui	a5,0xff800
   15a48:	17fd                	addi	a5,a5,-1
   15a4a:	8ff1                	and	a5,a5,a2
   15a4c:	00195713          	srli	a4,s2,0x1
   15a50:	00197913          	andi	s2,s2,1
   15a54:	01276933          	or	s2,a4,s2
   15a58:	01f79893          	slli	a7,a5,0x1f
   15a5c:	0128e933          	or	s2,a7,s2
   15a60:	0017d613          	srli	a2,a5,0x1
   15a64:	b105                	j	15684 <__adddf3+0x11a>
   15a66:	fe0e0913          	addi	s2,t3,-32
   15a6a:	02000793          	li	a5,32
   15a6e:	012856b3          	srl	a3,a6,s2
   15a72:	00fe0a63          	beq	t3,a5,15a86 <__adddf3+0x51c>
   15a76:	04000913          	li	s2,64
   15a7a:	41c90933          	sub	s2,s2,t3
   15a7e:	01281933          	sll	s2,a6,s2
   15a82:	012fefb3          	or	t6,t6,s2
   15a86:	01f03933          	snez	s2,t6
   15a8a:	00d96933          	or	s2,s2,a3
   15a8e:	bebd                	j	1560c <__adddf3+0xa2>
   15a90:	01e76933          	or	s2,a4,t5
   15a94:	01203933          	snez	s2,s2
   15a98:	412f8933          	sub	s2,t6,s2
   15a9c:	012fb7b3          	sltu	a5,t6,s2
   15aa0:	40f80633          	sub	a2,a6,a5
   15aa4:	849a                	mv	s1,t1
   15aa6:	89f6                	mv	s3,t4
   15aa8:	be85                	j	15618 <__adddf3+0xae>
   15aaa:	01e767b3          	or	a5,a4,t5
   15aae:	18078263          	beqz	a5,15c32 <__adddf3+0x6c8>
   15ab2:	fff50793          	addi	a5,a0,-1
   15ab6:	1c078463          	beqz	a5,15c7e <__adddf3+0x714>
   15aba:	7ff00693          	li	a3,2047
   15abe:	12d50463          	beq	a0,a3,15be6 <__adddf3+0x67c>
   15ac2:	853e                	mv	a0,a5
   15ac4:	bdd1                	j	15998 <__adddf3+0x42e>
   15ac6:	02000793          	li	a5,32
   15aca:	41c787b3          	sub	a5,a5,t3
   15ace:	00f816b3          	sll	a3,a6,a5
   15ad2:	00ff9933          	sll	s2,t6,a5
   15ad6:	01cfd633          	srl	a2,t6,t3
   15ada:	8ed1                	or	a3,a3,a2
   15adc:	01203933          	snez	s2,s2
   15ae0:	01c857b3          	srl	a5,a6,t3
   15ae4:	0126e933          	or	s2,a3,s2
   15ae8:	973e                	add	a4,a4,a5
   15aea:	bb4d                	j	1589c <__adddf3+0x332>
   15aec:	00361793          	slli	a5,a2,0x3
   15af0:	838d                	srli	a5,a5,0x3
   15af2:	01d81893          	slli	a7,a6,0x1d
   15af6:	0117e8b3          	or	a7,a5,a7
   15afa:	84ae                	mv	s1,a1
   15afc:	00385793          	srli	a5,a6,0x3
   15b00:	89f6                	mv	s3,t4
   15b02:	bbbd                	j	15880 <__adddf3+0x316>
   15b04:	c3ed                	beqz	a5,15be6 <__adddf3+0x67c>
   15b06:	01f86933          	or	s2,a6,t6
   15b0a:	dc091de3          	bnez	s2,158e4 <__adddf3+0x37a>
   15b0e:	050e                	slli	a0,a0,0x3
   15b10:	01d71793          	slli	a5,a4,0x1d
   15b14:	810d                	srli	a0,a0,0x3
   15b16:	00f568b3          	or	a7,a0,a5
   15b1a:	00375793          	srli	a5,a4,0x3
   15b1e:	b3c1                	j	158de <__adddf3+0x374>
   15b20:	0e088163          	beqz	a7,15c02 <__adddf3+0x698>
   15b24:	00361693          	slli	a3,a2,0x3
   15b28:	01d81793          	slli	a5,a6,0x1d
   15b2c:	828d                	srli	a3,a3,0x3
   15b2e:	00d7e8b3          	or	a7,a5,a3
   15b32:	89f6                	mv	s3,t4
   15b34:	00385793          	srli	a5,a6,0x3
   15b38:	bb81                	j	15888 <__adddf3+0x31e>
   15b3a:	41ff0933          	sub	s2,t5,t6
   15b3e:	410707b3          	sub	a5,a4,a6
   15b42:	012f3f33          	sltu	t5,t5,s2
   15b46:	41e78633          	sub	a2,a5,t5
   15b4a:	4485                	li	s1,1
   15b4c:	b4f1                	j	15618 <__adddf3+0xae>
   15b4e:	050e                	slli	a0,a0,0x3
   15b50:	01d71793          	slli	a5,a4,0x1d
   15b54:	810d                	srli	a0,a0,0x3
   15b56:	00f568b3          	or	a7,a0,a5
   15b5a:	84f2                	mv	s1,t3
   15b5c:	00375793          	srli	a5,a4,0x3
   15b60:	b305                	j	15880 <__adddf3+0x316>
   15b62:	050e                	slli	a0,a0,0x3
   15b64:	01d71793          	slli	a5,a4,0x1d
   15b68:	810d                	srli	a0,a0,0x3
   15b6a:	00a7e8b3          	or	a7,a5,a0
   15b6e:	00375793          	srli	a5,a4,0x3
   15b72:	bb19                	j	15888 <__adddf3+0x31e>
   15b74:	7ff00793          	li	a5,2047
   15b78:	d4f680e3          	beq	a3,a5,158b8 <__adddf3+0x34e>
   15b7c:	01ff0933          	add	s2,t5,t6
   15b80:	01e93633          	sltu	a2,s2,t5
   15b84:	010707b3          	add	a5,a4,a6
   15b88:	97b2                	add	a5,a5,a2
   15b8a:	01f79893          	slli	a7,a5,0x1f
   15b8e:	00195913          	srli	s2,s2,0x1
   15b92:	0128e933          	or	s2,a7,s2
   15b96:	0017d613          	srli	a2,a5,0x1
   15b9a:	84b6                	mv	s1,a3
   15b9c:	b1f1                	j	15868 <__adddf3+0x2fe>
   15b9e:	41ef8933          	sub	s2,t6,t5
   15ba2:	40e80733          	sub	a4,a6,a4
   15ba6:	012fb633          	sltu	a2,t6,s2
   15baa:	40c70433          	sub	s0,a4,a2
   15bae:	89f6                	mv	s3,t4
   15bb0:	bcad                	j	1562a <__adddf3+0xc0>
   15bb2:	01e76933          	or	s2,a4,t5
   15bb6:	01203933          	snez	s2,s2
   15bba:	bd01                	j	159ca <__adddf3+0x460>
   15bbc:	fe058793          	addi	a5,a1,-32
   15bc0:	02000693          	li	a3,32
   15bc4:	00f757b3          	srl	a5,a4,a5
   15bc8:	00d58a63          	beq	a1,a3,15bdc <__adddf3+0x672>
   15bcc:	04000693          	li	a3,64
   15bd0:	40b685b3          	sub	a1,a3,a1
   15bd4:	00b71733          	sll	a4,a4,a1
   15bd8:	00ef6f33          	or	t5,t5,a4
   15bdc:	01e03933          	snez	s2,t5
   15be0:	00f96933          	or	s2,s2,a5
   15be4:	bd55                	j	15a98 <__adddf3+0x52e>
   15be6:	00361793          	slli	a5,a2,0x3
   15bea:	838d                	srli	a5,a5,0x3
   15bec:	01d81893          	slli	a7,a6,0x1d
   15bf0:	0117e8b3          	or	a7,a5,a7
   15bf4:	00385793          	srli	a5,a6,0x3
   15bf8:	b1dd                	j	158de <__adddf3+0x374>
   15bfa:	00c968b3          	or	a7,s2,a2
   15bfe:	c60895e3          	bnez	a7,15868 <__adddf3+0x2fe>
   15c02:	4781                	li	a5,0
   15c04:	4981                	li	s3,0
   15c06:	b149                	j	15888 <__adddf3+0x31e>
   15c08:	41ef8933          	sub	s2,t6,t5
   15c0c:	40e807b3          	sub	a5,a6,a4
   15c10:	012fb633          	sltu	a2,t6,s2
   15c14:	40c78633          	sub	a2,a5,a2
   15c18:	89f6                	mv	s3,t4
   15c1a:	4485                	li	s1,1
   15c1c:	baf5                	j	15618 <__adddf3+0xae>
   15c1e:	00361693          	slli	a3,a2,0x3
   15c22:	01d81793          	slli	a5,a6,0x1d
   15c26:	828d                	srli	a3,a3,0x3
   15c28:	00d7e8b3          	or	a7,a5,a3
   15c2c:	00385793          	srli	a5,a6,0x3
   15c30:	b9a1                	j	15888 <__adddf3+0x31e>
   15c32:	00361693          	slli	a3,a2,0x3
   15c36:	01d81793          	slli	a5,a6,0x1d
   15c3a:	828d                	srli	a3,a3,0x3
   15c3c:	00d7e8b3          	or	a7,a5,a3
   15c40:	84aa                	mv	s1,a0
   15c42:	00385793          	srli	a5,a6,0x3
   15c46:	b92d                	j	15880 <__adddf3+0x316>
   15c48:	fe050793          	addi	a5,a0,-32
   15c4c:	02000693          	li	a3,32
   15c50:	00f757b3          	srl	a5,a4,a5
   15c54:	00d50a63          	beq	a0,a3,15c68 <__adddf3+0x6fe>
   15c58:	04000693          	li	a3,64
   15c5c:	40a68533          	sub	a0,a3,a0
   15c60:	00a71733          	sll	a4,a4,a0
   15c64:	00ef6f33          	or	t5,t5,a4
   15c68:	01e03933          	snez	s2,t5
   15c6c:	00f96933          	or	s2,s2,a5
   15c70:	bba9                	j	159ca <__adddf3+0x460>
   15c72:	4581                	li	a1,0
   15c74:	7ff00513          	li	a0,2047
   15c78:	000807b7          	lui	a5,0x80
   15c7c:	bc99                	j	156d2 <__adddf3+0x168>
   15c7e:	01ff0933          	add	s2,t5,t6
   15c82:	010707b3          	add	a5,a4,a6
   15c86:	01f93633          	sltu	a2,s2,t6
   15c8a:	963e                	add	a2,a2,a5
   15c8c:	b375                	j	15a38 <__adddf3+0x4ce>
   15c8e:	00361693          	slli	a3,a2,0x3
   15c92:	01d81793          	slli	a5,a6,0x1d
   15c96:	828d                	srli	a3,a3,0x3
   15c98:	00d7e8b3          	or	a7,a5,a3
   15c9c:	00385793          	srli	a5,a6,0x3
   15ca0:	b93d                	j	158de <__adddf3+0x374>

00015ca2 <__divdf3>:
__divdf3():
   15ca2:	7139                	addi	sp,sp,-64
   15ca4:	0145d793          	srli	a5,a1,0x14
   15ca8:	dc22                	sw	s0,56(sp)
   15caa:	d84a                	sw	s2,48(sp)
   15cac:	d256                	sw	s5,36(sp)
   15cae:	892a                	mv	s2,a0
   15cb0:	00c59413          	slli	s0,a1,0xc
   15cb4:	de06                	sw	ra,60(sp)
   15cb6:	da26                	sw	s1,52(sp)
   15cb8:	d64e                	sw	s3,44(sp)
   15cba:	d452                	sw	s4,40(sp)
   15cbc:	d05a                	sw	s6,32(sp)
   15cbe:	ce5e                	sw	s7,28(sp)
   15cc0:	7ff7f513          	andi	a0,a5,2047
   15cc4:	8031                	srli	s0,s0,0xc
   15cc6:	01f5da93          	srli	s5,a1,0x1f
   15cca:	10050d63          	beqz	a0,15de4 <__divdf3+0x142>
   15cce:	7ff00793          	li	a5,2047
   15cd2:	14f50f63          	beq	a0,a5,15e30 <__divdf3+0x18e>
   15cd6:	01d95a13          	srli	s4,s2,0x1d
   15cda:	040e                	slli	s0,s0,0x3
   15cdc:	008a6433          	or	s0,s4,s0
   15ce0:	00800a37          	lui	s4,0x800
   15ce4:	01446a33          	or	s4,s0,s4
   15ce8:	00391b13          	slli	s6,s2,0x3
   15cec:	c0150493          	addi	s1,a0,-1023
   15cf0:	4401                	li	s0,0
   15cf2:	4b81                	li	s7,0
   15cf4:	0146d813          	srli	a6,a3,0x14
   15cf8:	00c69913          	slli	s2,a3,0xc
   15cfc:	7ff87813          	andi	a6,a6,2047
   15d00:	88b2                	mv	a7,a2
   15d02:	00c95913          	srli	s2,s2,0xc
   15d06:	01f6d993          	srli	s3,a3,0x1f
   15d0a:	08080e63          	beqz	a6,15da6 <__divdf3+0x104>
   15d0e:	7ff00793          	li	a5,2047
   15d12:	04f80063          	beq	a6,a5,15d52 <__divdf3+0xb0>
   15d16:	01d65713          	srli	a4,a2,0x1d
   15d1a:	090e                	slli	s2,s2,0x3
   15d1c:	01276933          	or	s2,a4,s2
   15d20:	c0180813          	addi	a6,a6,-1023 # ffc01 <_data_lma+0xe82f9>
   15d24:	008007b7          	lui	a5,0x800
   15d28:	00f96733          	or	a4,s2,a5
   15d2c:	00361893          	slli	a7,a2,0x3
   15d30:	410484b3          	sub	s1,s1,a6
   15d34:	4581                	li	a1,0
   15d36:	47bd                	li	a5,15
   15d38:	013ac833          	xor	a6,s5,s3
   15d3c:	1a87e863          	bltu	a5,s0,15eec <__divdf3+0x24a>
   15d40:	00002797          	auipc	a5,0x2
   15d44:	a4878793          	addi	a5,a5,-1464 # 17788 <strlen+0x3a6>
   15d48:	040a                	slli	s0,s0,0x2
   15d4a:	943e                	add	s0,s0,a5
   15d4c:	4010                	lw	a2,0(s0)
   15d4e:	963e                	add	a2,a2,a5
   15d50:	8602                	jr	a2
   15d52:	00c96733          	or	a4,s2,a2
   15d56:	80148493          	addi	s1,s1,-2047
   15d5a:	10071663          	bnez	a4,15e66 <__divdf3+0x1c4>
   15d5e:	00246413          	ori	s0,s0,2
   15d62:	4881                	li	a7,0
   15d64:	4589                	li	a1,2
   15d66:	bfc1                	j	15d36 <__divdf3+0x94>
   15d68:	7ff00613          	li	a2,2047
   15d6c:	4781                	li	a5,0
   15d6e:	4701                	li	a4,0
   15d70:	07b2                	slli	a5,a5,0xc
   15d72:	50f2                	lw	ra,60(sp)
   15d74:	5462                	lw	s0,56(sp)
   15d76:	0652                	slli	a2,a2,0x14
   15d78:	83b1                	srli	a5,a5,0xc
   15d7a:	087e                	slli	a6,a6,0x1f
   15d7c:	8fd1                	or	a5,a5,a2
   15d7e:	0107e7b3          	or	a5,a5,a6
   15d82:	54d2                	lw	s1,52(sp)
   15d84:	5942                	lw	s2,48(sp)
   15d86:	59b2                	lw	s3,44(sp)
   15d88:	5a22                	lw	s4,40(sp)
   15d8a:	5a92                	lw	s5,36(sp)
   15d8c:	5b02                	lw	s6,32(sp)
   15d8e:	4bf2                	lw	s7,28(sp)
   15d90:	853a                	mv	a0,a4
   15d92:	85be                	mv	a1,a5
   15d94:	6121                	addi	sp,sp,64
   15d96:	8082                	ret
   15d98:	4801                	li	a6,0
   15d9a:	7ff00613          	li	a2,2047
   15d9e:	000807b7          	lui	a5,0x80
   15da2:	4701                	li	a4,0
   15da4:	b7f1                	j	15d70 <__divdf3+0xce>
   15da6:	00c96733          	or	a4,s2,a2
   15daa:	cb4d                	beqz	a4,15e5c <__divdf3+0x1ba>
   15dac:	30090e63          	beqz	s2,160c8 <__divdf3+0x426>
   15db0:	854a                	mv	a0,s2
   15db2:	c432                	sw	a2,8(sp)
   15db4:	00001097          	auipc	ra,0x1
   15db8:	5b8080e7          	jalr	1464(ra) # 1736c <__clzsi2>
   15dbc:	4622                	lw	a2,8(sp)
   15dbe:	ff550713          	addi	a4,a0,-11
   15dc2:	47f5                	li	a5,29
   15dc4:	ff850693          	addi	a3,a0,-8
   15dc8:	8f99                	sub	a5,a5,a4
   15dca:	00d91933          	sll	s2,s2,a3
   15dce:	00f657b3          	srl	a5,a2,a5
   15dd2:	0127e733          	or	a4,a5,s2
   15dd6:	00d618b3          	sll	a7,a2,a3
   15dda:	9526                	add	a0,a0,s1
   15ddc:	3f350493          	addi	s1,a0,1011
   15de0:	4581                	li	a1,0
   15de2:	bf91                	j	15d36 <__divdf3+0x94>
   15de4:	01246a33          	or	s4,s0,s2
   15de8:	060a0563          	beqz	s4,15e52 <__divdf3+0x1b0>
   15dec:	c636                	sw	a3,12(sp)
   15dee:	c432                	sw	a2,8(sp)
   15df0:	2a040863          	beqz	s0,160a0 <__divdf3+0x3fe>
   15df4:	8522                	mv	a0,s0
   15df6:	00001097          	auipc	ra,0x1
   15dfa:	576080e7          	jalr	1398(ra) # 1736c <__clzsi2>
   15dfe:	4622                	lw	a2,8(sp)
   15e00:	46b2                	lw	a3,12(sp)
   15e02:	84aa                	mv	s1,a0
   15e04:	ff550713          	addi	a4,a0,-11
   15e08:	4a75                	li	s4,29
   15e0a:	ff848b13          	addi	s6,s1,-8
   15e0e:	40ea0a33          	sub	s4,s4,a4
   15e12:	01641433          	sll	s0,s0,s6
   15e16:	01495a33          	srl	s4,s2,s4
   15e1a:	008a6a33          	or	s4,s4,s0
   15e1e:	01691b33          	sll	s6,s2,s6
   15e22:	c0d00513          	li	a0,-1011
   15e26:	409504b3          	sub	s1,a0,s1
   15e2a:	4401                	li	s0,0
   15e2c:	4b81                	li	s7,0
   15e2e:	b5d9                	j	15cf4 <__divdf3+0x52>
   15e30:	01246a33          	or	s4,s0,s2
   15e34:	000a1863          	bnez	s4,15e44 <__divdf3+0x1a2>
   15e38:	4421                	li	s0,8
   15e3a:	4b01                	li	s6,0
   15e3c:	7ff00493          	li	s1,2047
   15e40:	4b89                	li	s7,2
   15e42:	bd4d                	j	15cf4 <__divdf3+0x52>
   15e44:	8a22                	mv	s4,s0
   15e46:	8b4a                	mv	s6,s2
   15e48:	4431                	li	s0,12
   15e4a:	7ff00493          	li	s1,2047
   15e4e:	4b8d                	li	s7,3
   15e50:	b555                	j	15cf4 <__divdf3+0x52>
   15e52:	4411                	li	s0,4
   15e54:	4b01                	li	s6,0
   15e56:	4481                	li	s1,0
   15e58:	4b85                	li	s7,1
   15e5a:	bd69                	j	15cf4 <__divdf3+0x52>
   15e5c:	00146413          	ori	s0,s0,1
   15e60:	4881                	li	a7,0
   15e62:	4585                	li	a1,1
   15e64:	bdc9                	j	15d36 <__divdf3+0x94>
   15e66:	00346413          	ori	s0,s0,3
   15e6a:	874a                	mv	a4,s2
   15e6c:	458d                	li	a1,3
   15e6e:	b5e1                	j	15d36 <__divdf3+0x94>
   15e70:	2e050e63          	beqz	a0,1616c <__divdf3+0x4ca>
   15e74:	4785                	li	a5,1
   15e76:	8f89                	sub	a5,a5,a0
   15e78:	03800693          	li	a3,56
   15e7c:	34f6d163          	bge	a3,a5,161be <__divdf3+0x51c>
   15e80:	4601                	li	a2,0
   15e82:	4781                	li	a5,0
   15e84:	4701                	li	a4,0
   15e86:	b5ed                	j	15d70 <__divdf3+0xce>
   15e88:	86ce                	mv	a3,s3
   15e8a:	4789                	li	a5,2
   15e8c:	3cf58163          	beq	a1,a5,1624e <__divdf3+0x5ac>
   15e90:	478d                	li	a5,3
   15e92:	f0f583e3          	beq	a1,a5,15d98 <__divdf3+0xf6>
   15e96:	4785                	li	a5,1
   15e98:	8836                	mv	a6,a3
   15e9a:	fef583e3          	beq	a1,a5,15e80 <__divdf3+0x1de>
   15e9e:	3ff48513          	addi	a0,s1,1023
   15ea2:	fca057e3          	blez	a0,15e70 <__divdf3+0x1ce>
   15ea6:	0078f793          	andi	a5,a7,7
   15eaa:	28079a63          	bnez	a5,1613e <__divdf3+0x49c>
   15eae:	0038d693          	srli	a3,a7,0x3
   15eb2:	00771793          	slli	a5,a4,0x7
   15eb6:	0007d863          	bgez	a5,15ec6 <__divdf3+0x224>
   15eba:	ff0007b7          	lui	a5,0xff000
   15ebe:	17fd                	addi	a5,a5,-1
   15ec0:	8f7d                	and	a4,a4,a5
   15ec2:	40048513          	addi	a0,s1,1024
   15ec6:	7fe00793          	li	a5,2046
   15eca:	e8a7cfe3          	blt	a5,a0,15d68 <__divdf3+0xc6>
   15ece:	01d71613          	slli	a2,a4,0x1d
   15ed2:	00971793          	slli	a5,a4,0x9
   15ed6:	83b1                	srli	a5,a5,0xc
   15ed8:	00d66733          	or	a4,a2,a3
   15edc:	7ff57613          	andi	a2,a0,2047
   15ee0:	bd41                	j	15d70 <__divdf3+0xce>
   15ee2:	86d6                	mv	a3,s5
   15ee4:	8752                	mv	a4,s4
   15ee6:	88da                	mv	a7,s6
   15ee8:	85de                	mv	a1,s7
   15eea:	b745                	j	15e8a <__divdf3+0x1e8>
   15eec:	23476563          	bltu	a4,s4,16116 <__divdf3+0x474>
   15ef0:	22ea0163          	beq	s4,a4,16112 <__divdf3+0x470>
   15ef4:	86da                	mv	a3,s6
   15ef6:	14fd                	addi	s1,s1,-1
   15ef8:	8452                	mv	s0,s4
   15efa:	4b01                	li	s6,0
   15efc:	00871793          	slli	a5,a4,0x8
   15f00:	0188d313          	srli	t1,a7,0x18
   15f04:	00f36333          	or	t1,t1,a5
   15f08:	01035e93          	srli	t4,t1,0x10
   15f0c:	03d457b3          	divu	a5,s0,t4
   15f10:	01031f13          	slli	t5,t1,0x10
   15f14:	010f5f13          	srli	t5,t5,0x10
   15f18:	0106d593          	srli	a1,a3,0x10
   15f1c:	00889e13          	slli	t3,a7,0x8
   15f20:	03d47433          	remu	s0,s0,t4
   15f24:	02ff0733          	mul	a4,t5,a5
   15f28:	0442                	slli	s0,s0,0x10
   15f2a:	8dc1                	or	a1,a1,s0
   15f2c:	00e5fb63          	bgeu	a1,a4,15f42 <__divdf3+0x2a0>
   15f30:	959a                	add	a1,a1,t1
   15f32:	fff78613          	addi	a2,a5,-1 # feffffff <_eusrstack+0xdeff7fff>
   15f36:	2865e263          	bltu	a1,t1,161ba <__divdf3+0x518>
   15f3a:	28e5f063          	bgeu	a1,a4,161ba <__divdf3+0x518>
   15f3e:	17f9                	addi	a5,a5,-2
   15f40:	959a                	add	a1,a1,t1
   15f42:	8d99                	sub	a1,a1,a4
   15f44:	03d5d733          	divu	a4,a1,t4
   15f48:	06c2                	slli	a3,a3,0x10
   15f4a:	82c1                	srli	a3,a3,0x10
   15f4c:	03d5f5b3          	remu	a1,a1,t4
   15f50:	02ef0633          	mul	a2,t5,a4
   15f54:	05c2                	slli	a1,a1,0x10
   15f56:	8dd5                	or	a1,a1,a3
   15f58:	00c5fb63          	bgeu	a1,a2,15f6e <__divdf3+0x2cc>
   15f5c:	959a                	add	a1,a1,t1
   15f5e:	fff70693          	addi	a3,a4,-1 # 7fffff <_data_lma+0x7e86f7>
   15f62:	2465ea63          	bltu	a1,t1,161b6 <__divdf3+0x514>
   15f66:	24c5f863          	bgeu	a1,a2,161b6 <__divdf3+0x514>
   15f6a:	1779                	addi	a4,a4,-2
   15f6c:	959a                	add	a1,a1,t1
   15f6e:	07c2                	slli	a5,a5,0x10
   15f70:	6441                	lui	s0,0x10
   15f72:	8f5d                	or	a4,a4,a5
   15f74:	fff40793          	addi	a5,s0,-1 # ffff <MCU_SECTORSIZE+0xefff>
   15f78:	00f77533          	and	a0,a4,a5
   15f7c:	01075893          	srli	a7,a4,0x10
   15f80:	010e5f93          	srli	t6,t3,0x10
   15f84:	00fe77b3          	and	a5,t3,a5
   15f88:	02f502b3          	mul	t0,a0,a5
   15f8c:	40c586b3          	sub	a3,a1,a2
   15f90:	02f883b3          	mul	t2,a7,a5
   15f94:	0102d593          	srli	a1,t0,0x10
   15f98:	02af8633          	mul	a2,t6,a0
   15f9c:	961e                	add	a2,a2,t2
   15f9e:	962e                	add	a2,a2,a1
   15fa0:	03f88533          	mul	a0,a7,t6
   15fa4:	00767363          	bgeu	a2,t2,15faa <__divdf3+0x308>
   15fa8:	9522                	add	a0,a0,s0
   15faa:	68c1                	lui	a7,0x10
   15fac:	18fd                	addi	a7,a7,-1
   15fae:	01065593          	srli	a1,a2,0x10
   15fb2:	01167633          	and	a2,a2,a7
   15fb6:	0642                	slli	a2,a2,0x10
   15fb8:	0112f8b3          	and	a7,t0,a7
   15fbc:	95aa                	add	a1,a1,a0
   15fbe:	9646                	add	a2,a2,a7
   15fc0:	12b6ea63          	bltu	a3,a1,160f4 <__divdf3+0x452>
   15fc4:	12b68663          	beq	a3,a1,160f0 <__divdf3+0x44e>
   15fc8:	40cb0633          	sub	a2,s6,a2
   15fcc:	8e8d                	sub	a3,a3,a1
   15fce:	00cb3b33          	sltu	s6,s6,a2
   15fd2:	41668b33          	sub	s6,a3,s6
   15fd6:	3ff48513          	addi	a0,s1,1023
   15fda:	19630063          	beq	t1,s6,1615a <__divdf3+0x4b8>
   15fde:	03db58b3          	divu	a7,s6,t4
   15fe2:	01065593          	srli	a1,a2,0x10
   15fe6:	03db7b33          	remu	s6,s6,t4
   15fea:	031f06b3          	mul	a3,t5,a7
   15fee:	0b42                	slli	s6,s6,0x10
   15ff0:	0165eb33          	or	s6,a1,s6
   15ff4:	00db7b63          	bgeu	s6,a3,1600a <__divdf3+0x368>
   15ff8:	9b1a                	add	s6,s6,t1
   15ffa:	fff88593          	addi	a1,a7,-1 # ffff <MCU_SECTORSIZE+0xefff>
   15ffe:	226b6163          	bltu	s6,t1,16220 <__divdf3+0x57e>
   16002:	20db7f63          	bgeu	s6,a3,16220 <__divdf3+0x57e>
   16006:	18f9                	addi	a7,a7,-2
   16008:	9b1a                	add	s6,s6,t1
   1600a:	40db0b33          	sub	s6,s6,a3
   1600e:	03db56b3          	divu	a3,s6,t4
   16012:	0642                	slli	a2,a2,0x10
   16014:	8241                	srli	a2,a2,0x10
   16016:	03db7b33          	remu	s6,s6,t4
   1601a:	02df0f33          	mul	t5,t5,a3
   1601e:	0b42                	slli	s6,s6,0x10
   16020:	01666633          	or	a2,a2,s6
   16024:	01e67b63          	bgeu	a2,t5,1603a <__divdf3+0x398>
   16028:	961a                	add	a2,a2,t1
   1602a:	fff68593          	addi	a1,a3,-1 # 7fffff <_data_lma+0x7e86f7>
   1602e:	1e666b63          	bltu	a2,t1,16224 <__divdf3+0x582>
   16032:	1fe67963          	bgeu	a2,t5,16224 <__divdf3+0x582>
   16036:	16f9                	addi	a3,a3,-2
   16038:	961a                	add	a2,a2,t1
   1603a:	08c2                	slli	a7,a7,0x10
   1603c:	00d8e8b3          	or	a7,a7,a3
   16040:	01089593          	slli	a1,a7,0x10
   16044:	0108d293          	srli	t0,a7,0x10
   16048:	81c1                	srli	a1,a1,0x10
   1604a:	02f58eb3          	mul	t4,a1,a5
   1604e:	41e60633          	sub	a2,a2,t5
   16052:	02bf85b3          	mul	a1,t6,a1
   16056:	010ed693          	srli	a3,t4,0x10
   1605a:	02f287b3          	mul	a5,t0,a5
   1605e:	95be                	add	a1,a1,a5
   16060:	96ae                	add	a3,a3,a1
   16062:	025f8fb3          	mul	t6,t6,t0
   16066:	00f6f463          	bgeu	a3,a5,1606e <__divdf3+0x3cc>
   1606a:	67c1                	lui	a5,0x10
   1606c:	9fbe                	add	t6,t6,a5
   1606e:	65c1                	lui	a1,0x10
   16070:	15fd                	addi	a1,a1,-1
   16072:	0106d793          	srli	a5,a3,0x10
   16076:	8eed                	and	a3,a3,a1
   16078:	06c2                	slli	a3,a3,0x10
   1607a:	00befeb3          	and	t4,t4,a1
   1607e:	9fbe                	add	t6,t6,a5
   16080:	96f6                	add	a3,a3,t4
   16082:	0bf67363          	bgeu	a2,t6,16128 <__divdf3+0x486>
   16086:	961a                	add	a2,a2,t1
   16088:	fff88793          	addi	a5,a7,-1
   1608c:	1a666d63          	bltu	a2,t1,16246 <__divdf3+0x5a4>
   16090:	19f66c63          	bltu	a2,t6,16228 <__divdf3+0x586>
   16094:	1df60363          	beq	a2,t6,1625a <__divdf3+0x5b8>
   16098:	88be                	mv	a7,a5
   1609a:	0018e893          	ori	a7,a7,1
   1609e:	b511                	j	15ea2 <__divdf3+0x200>
   160a0:	854a                	mv	a0,s2
   160a2:	00001097          	auipc	ra,0x1
   160a6:	2ca080e7          	jalr	714(ra) # 1736c <__clzsi2>
   160aa:	01550713          	addi	a4,a0,21
   160ae:	45f1                	li	a1,28
   160b0:	02050493          	addi	s1,a0,32
   160b4:	4622                	lw	a2,8(sp)
   160b6:	46b2                	lw	a3,12(sp)
   160b8:	d4e5d8e3          	bge	a1,a4,15e08 <__divdf3+0x166>
   160bc:	ff850413          	addi	s0,a0,-8
   160c0:	00891a33          	sll	s4,s2,s0
   160c4:	4b01                	li	s6,0
   160c6:	bbb1                	j	15e22 <__divdf3+0x180>
   160c8:	8532                	mv	a0,a2
   160ca:	c432                	sw	a2,8(sp)
   160cc:	00001097          	auipc	ra,0x1
   160d0:	2a0080e7          	jalr	672(ra) # 1736c <__clzsi2>
   160d4:	01550713          	addi	a4,a0,21
   160d8:	46f1                	li	a3,28
   160da:	87aa                	mv	a5,a0
   160dc:	4622                	lw	a2,8(sp)
   160de:	02050513          	addi	a0,a0,32
   160e2:	cee6d0e3          	bge	a3,a4,15dc2 <__divdf3+0x120>
   160e6:	17e1                	addi	a5,a5,-8
   160e8:	00f61733          	sll	a4,a2,a5
   160ec:	4881                	li	a7,0
   160ee:	b1f5                	j	15dda <__divdf3+0x138>
   160f0:	eccb7ce3          	bgeu	s6,a2,15fc8 <__divdf3+0x326>
   160f4:	9b72                	add	s6,s6,t3
   160f6:	01cb3533          	sltu	a0,s6,t3
   160fa:	951a                	add	a0,a0,t1
   160fc:	96aa                	add	a3,a3,a0
   160fe:	fff70513          	addi	a0,a4,-1
   16102:	02d37863          	bgeu	t1,a3,16132 <__divdf3+0x490>
   16106:	10b6e663          	bltu	a3,a1,16212 <__divdf3+0x570>
   1610a:	10d58263          	beq	a1,a3,1620e <__divdf3+0x56c>
   1610e:	872a                	mv	a4,a0
   16110:	bd65                	j	15fc8 <__divdf3+0x326>
   16112:	df1b61e3          	bltu	s6,a7,15ef4 <__divdf3+0x252>
   16116:	001b5593          	srli	a1,s6,0x1
   1611a:	01fa1693          	slli	a3,s4,0x1f
   1611e:	001a5413          	srli	s0,s4,0x1
   16122:	8ecd                	or	a3,a3,a1
   16124:	0b7e                	slli	s6,s6,0x1f
   16126:	bbd9                	j	15efc <__divdf3+0x25a>
   16128:	f7f619e3          	bne	a2,t6,1609a <__divdf3+0x3f8>
   1612c:	d6068be3          	beqz	a3,15ea2 <__divdf3+0x200>
   16130:	bf99                	j	16086 <__divdf3+0x3e4>
   16132:	fcd31ee3          	bne	t1,a3,1610e <__divdf3+0x46c>
   16136:	fdcb78e3          	bgeu	s6,t3,16106 <__divdf3+0x464>
   1613a:	872a                	mv	a4,a0
   1613c:	b571                	j	15fc8 <__divdf3+0x326>
   1613e:	00f8f793          	andi	a5,a7,15
   16142:	4691                	li	a3,4
   16144:	d6d785e3          	beq	a5,a3,15eae <__divdf3+0x20c>
   16148:	ffc8b793          	sltiu	a5,a7,-4
   1614c:	00488693          	addi	a3,a7,4
   16150:	0017c793          	xori	a5,a5,1
   16154:	828d                	srli	a3,a3,0x3
   16156:	973e                	add	a4,a4,a5
   16158:	bba9                	j	15eb2 <__divdf3+0x210>
   1615a:	4681                	li	a3,0
   1615c:	4785                	li	a5,1
   1615e:	fea04ce3          	bgtz	a0,16156 <__divdf3+0x4b4>
   16162:	58fd                	li	a7,-1
   16164:	d00518e3          	bnez	a0,15e74 <__divdf3+0x1d2>
   16168:	c0100493          	li	s1,-1023
   1616c:	4785                	li	a5,1
   1616e:	41e48513          	addi	a0,s1,1054
   16172:	00a716b3          	sll	a3,a4,a0
   16176:	00f8d633          	srl	a2,a7,a5
   1617a:	00a89533          	sll	a0,a7,a0
   1617e:	8ed1                	or	a3,a3,a2
   16180:	00a03533          	snez	a0,a0
   16184:	8ec9                	or	a3,a3,a0
   16186:	0076f613          	andi	a2,a3,7
   1618a:	00f75733          	srl	a4,a4,a5
   1618e:	ce01                	beqz	a2,161a6 <__divdf3+0x504>
   16190:	00f6f793          	andi	a5,a3,15
   16194:	4611                	li	a2,4
   16196:	00c78863          	beq	a5,a2,161a6 <__divdf3+0x504>
   1619a:	00468793          	addi	a5,a3,4
   1619e:	00d7b6b3          	sltu	a3,a5,a3
   161a2:	9736                	add	a4,a4,a3
   161a4:	86be                	mv	a3,a5
   161a6:	00871793          	slli	a5,a4,0x8
   161aa:	0407d863          	bgez	a5,161fa <__divdf3+0x558>
   161ae:	4605                	li	a2,1
   161b0:	4781                	li	a5,0
   161b2:	4701                	li	a4,0
   161b4:	be75                	j	15d70 <__divdf3+0xce>
   161b6:	8736                	mv	a4,a3
   161b8:	bb5d                	j	15f6e <__divdf3+0x2cc>
   161ba:	87b2                	mv	a5,a2
   161bc:	b359                	j	15f42 <__divdf3+0x2a0>
   161be:	46fd                	li	a3,31
   161c0:	faf6d7e3          	bge	a3,a5,1616e <__divdf3+0x4cc>
   161c4:	5605                	li	a2,-31
   161c6:	8e09                	sub	a2,a2,a0
   161c8:	02000693          	li	a3,32
   161cc:	00c75633          	srl	a2,a4,a2
   161d0:	00d78863          	beq	a5,a3,161e0 <__divdf3+0x53e>
   161d4:	43e48793          	addi	a5,s1,1086
   161d8:	00f717b3          	sll	a5,a4,a5
   161dc:	00f8e8b3          	or	a7,a7,a5
   161e0:	011036b3          	snez	a3,a7
   161e4:	8ed1                	or	a3,a3,a2
   161e6:	0076f613          	andi	a2,a3,7
   161ea:	4781                	li	a5,0
   161ec:	ce01                	beqz	a2,16204 <__divdf3+0x562>
   161ee:	00f6f793          	andi	a5,a3,15
   161f2:	4611                	li	a2,4
   161f4:	4701                	li	a4,0
   161f6:	fac792e3          	bne	a5,a2,1619a <__divdf3+0x4f8>
   161fa:	00971793          	slli	a5,a4,0x9
   161fe:	01d71613          	slli	a2,a4,0x1d
   16202:	83b1                	srli	a5,a5,0xc
   16204:	0036d713          	srli	a4,a3,0x3
   16208:	8f51                	or	a4,a4,a2
   1620a:	4601                	li	a2,0
   1620c:	b695                	j	15d70 <__divdf3+0xce>
   1620e:	f0cb70e3          	bgeu	s6,a2,1610e <__divdf3+0x46c>
   16212:	9b72                	add	s6,s6,t3
   16214:	01cb3533          	sltu	a0,s6,t3
   16218:	951a                	add	a0,a0,t1
   1621a:	1779                	addi	a4,a4,-2
   1621c:	96aa                	add	a3,a3,a0
   1621e:	b36d                	j	15fc8 <__divdf3+0x326>
   16220:	88ae                	mv	a7,a1
   16222:	b3e5                	j	1600a <__divdf3+0x368>
   16224:	86ae                	mv	a3,a1
   16226:	bd11                	j	1603a <__divdf3+0x398>
   16228:	001e1793          	slli	a5,t3,0x1
   1622c:	01c7be33          	sltu	t3,a5,t3
   16230:	9372                	add	t1,t1,t3
   16232:	961a                	add	a2,a2,t1
   16234:	18f9                	addi	a7,a7,-2
   16236:	8e3e                	mv	t3,a5
   16238:	e7f611e3          	bne	a2,t6,1609a <__divdf3+0x3f8>
   1623c:	c6de03e3          	beq	t3,a3,15ea2 <__divdf3+0x200>
   16240:	0018e893          	ori	a7,a7,1
   16244:	b9b9                	j	15ea2 <__divdf3+0x200>
   16246:	88be                	mv	a7,a5
   16248:	fff60ae3          	beq	a2,t6,1623c <__divdf3+0x59a>
   1624c:	b5b9                	j	1609a <__divdf3+0x3f8>
   1624e:	8836                	mv	a6,a3
   16250:	7ff00613          	li	a2,2047
   16254:	4781                	li	a5,0
   16256:	4701                	li	a4,0
   16258:	be21                	j	15d70 <__divdf3+0xce>
   1625a:	fcde67e3          	bltu	t3,a3,16228 <__divdf3+0x586>
   1625e:	88be                	mv	a7,a5
   16260:	fede10e3          	bne	t3,a3,16240 <__divdf3+0x59e>
   16264:	b93d                	j	15ea2 <__divdf3+0x200>

00016266 <__eqdf2>:
__eqdf2():
   16266:	0145d713          	srli	a4,a1,0x14
   1626a:	001007b7          	lui	a5,0x100
   1626e:	17fd                	addi	a5,a5,-1
   16270:	0146d813          	srli	a6,a3,0x14
   16274:	7ff77713          	andi	a4,a4,2047
   16278:	7ff00893          	li	a7,2047
   1627c:	00b7fe33          	and	t3,a5,a1
   16280:	8eaa                	mv	t4,a0
   16282:	8ff5                	and	a5,a5,a3
   16284:	81fd                	srli	a1,a1,0x1f
   16286:	8f32                	mv	t5,a2
   16288:	7ff87813          	andi	a6,a6,2047
   1628c:	82fd                	srli	a3,a3,0x1f
   1628e:	01170b63          	beq	a4,a7,162a4 <__eqdf2+0x3e>
   16292:	4305                	li	t1,1
   16294:	01180663          	beq	a6,a7,162a0 <__eqdf2+0x3a>
   16298:	01071463          	bne	a4,a6,162a0 <__eqdf2+0x3a>
   1629c:	00fe0d63          	beq	t3,a5,162b6 <__eqdf2+0x50>
   162a0:	851a                	mv	a0,t1
   162a2:	8082                	ret
   162a4:	00ae68b3          	or	a7,t3,a0
   162a8:	4305                	li	t1,1
   162aa:	fe089be3          	bnez	a7,162a0 <__eqdf2+0x3a>
   162ae:	fee819e3          	bne	a6,a4,162a0 <__eqdf2+0x3a>
   162b2:	8fd1                	or	a5,a5,a2
   162b4:	f7f5                	bnez	a5,162a0 <__eqdf2+0x3a>
   162b6:	4305                	li	t1,1
   162b8:	ffee94e3          	bne	t4,t5,162a0 <__eqdf2+0x3a>
   162bc:	4301                	li	t1,0
   162be:	fed581e3          	beq	a1,a3,162a0 <__eqdf2+0x3a>
   162c2:	4305                	li	t1,1
   162c4:	ff71                	bnez	a4,162a0 <__eqdf2+0x3a>
   162c6:	00ae6533          	or	a0,t3,a0
   162ca:	00a03333          	snez	t1,a0
   162ce:	bfc9                	j	162a0 <__eqdf2+0x3a>

000162d0 <__ledf2>:
__ltdf2():
   162d0:	0145d713          	srli	a4,a1,0x14
   162d4:	001007b7          	lui	a5,0x100
   162d8:	17fd                	addi	a5,a5,-1
   162da:	0146d813          	srli	a6,a3,0x14
   162de:	7ff77713          	andi	a4,a4,2047
   162e2:	7ff00893          	li	a7,2047
   162e6:	00b7fe33          	and	t3,a5,a1
   162ea:	8eaa                	mv	t4,a0
   162ec:	8ff5                	and	a5,a5,a3
   162ee:	81fd                	srli	a1,a1,0x1f
   162f0:	8f32                	mv	t5,a2
   162f2:	7ff87813          	andi	a6,a6,2047
   162f6:	82fd                	srli	a3,a3,0x1f
   162f8:	03170e63          	beq	a4,a7,16334 <__ledf2+0x64>
   162fc:	01180d63          	beq	a6,a7,16316 <__ledf2+0x46>
   16300:	e329                	bnez	a4,16342 <__ledf2+0x72>
   16302:	00ae68b3          	or	a7,t3,a0
   16306:	00081f63          	bnez	a6,16324 <__ledf2+0x54>
   1630a:	8e5d                	or	a2,a2,a5
   1630c:	ee01                	bnez	a2,16324 <__ledf2+0x54>
   1630e:	4301                	li	t1,0
   16310:	04088c63          	beqz	a7,16368 <__ledf2+0x98>
   16314:	a821                	j	1632c <__ledf2+0x5c>
   16316:	00c7e8b3          	or	a7,a5,a2
   1631a:	4309                	li	t1,2
   1631c:	04089663          	bnez	a7,16368 <__ledf2+0x98>
   16320:	d36d                	beqz	a4,16302 <__ledf2+0x32>
   16322:	a005                	j	16342 <__ledf2+0x72>
   16324:	04088463          	beqz	a7,1636c <__ledf2+0x9c>
   16328:	02d58563          	beq	a1,a3,16352 <__ledf2+0x82>
   1632c:	4305                	li	t1,1
   1632e:	cd8d                	beqz	a1,16368 <__ledf2+0x98>
   16330:	537d                	li	t1,-1
   16332:	a81d                	j	16368 <__ledf2+0x98>
   16334:	00ae68b3          	or	a7,t3,a0
   16338:	4309                	li	t1,2
   1633a:	02089763          	bnez	a7,16368 <__ledf2+0x98>
   1633e:	02e80a63          	beq	a6,a4,16372 <__ledf2+0xa2>
   16342:	00081463          	bnez	a6,1634a <__ledf2+0x7a>
   16346:	8e5d                	or	a2,a2,a5
   16348:	d275                	beqz	a2,1632c <__ledf2+0x5c>
   1634a:	fed591e3          	bne	a1,a3,1632c <__ledf2+0x5c>
   1634e:	fce84fe3          	blt	a6,a4,1632c <__ledf2+0x5c>
   16352:	01074963          	blt	a4,a6,16364 <__ledf2+0x94>
   16356:	fdc7ebe3          	bltu	a5,t3,1632c <__ledf2+0x5c>
   1635a:	00fe0f63          	beq	t3,a5,16378 <__ledf2+0xa8>
   1635e:	4301                	li	t1,0
   16360:	00fe7463          	bgeu	t3,a5,16368 <__ledf2+0x98>
   16364:	d5f1                	beqz	a1,16330 <__ledf2+0x60>
   16366:	4305                	li	t1,1
   16368:	851a                	mv	a0,t1
   1636a:	8082                	ret
   1636c:	feed                	bnez	a3,16366 <__ledf2+0x96>
   1636e:	537d                	li	t1,-1
   16370:	bfe5                	j	16368 <__ledf2+0x98>
   16372:	8e5d                	or	a2,a2,a5
   16374:	da79                	beqz	a2,1634a <__ledf2+0x7a>
   16376:	bfcd                	j	16368 <__ledf2+0x98>
   16378:	fbdf6ae3          	bltu	t5,t4,1632c <__ledf2+0x5c>
   1637c:	4301                	li	t1,0
   1637e:	ffeef5e3          	bgeu	t4,t5,16368 <__ledf2+0x98>
   16382:	f1f5                	bnez	a1,16366 <__ledf2+0x96>
   16384:	b775                	j	16330 <__ledf2+0x60>

00016386 <__muldf3>:
__muldf3():
   16386:	7139                	addi	sp,sp,-64
   16388:	d84a                	sw	s2,48(sp)
   1638a:	0145d913          	srli	s2,a1,0x14
   1638e:	d64e                	sw	s3,44(sp)
   16390:	d452                	sw	s4,40(sp)
   16392:	d256                	sw	s5,36(sp)
   16394:	00c59993          	slli	s3,a1,0xc
   16398:	de06                	sw	ra,60(sp)
   1639a:	dc22                	sw	s0,56(sp)
   1639c:	da26                	sw	s1,52(sp)
   1639e:	d05a                	sw	s6,32(sp)
   163a0:	ce5e                	sw	s7,28(sp)
   163a2:	7ff97913          	andi	s2,s2,2047
   163a6:	8a2a                	mv	s4,a0
   163a8:	00c9d993          	srli	s3,s3,0xc
   163ac:	01f5da93          	srli	s5,a1,0x1f
   163b0:	0e090d63          	beqz	s2,164aa <__muldf3+0x124>
   163b4:	7ff00793          	li	a5,2047
   163b8:	18f90a63          	beq	s2,a5,1654c <__muldf3+0x1c6>
   163bc:	01d55413          	srli	s0,a0,0x1d
   163c0:	098e                	slli	s3,s3,0x3
   163c2:	013469b3          	or	s3,s0,s3
   163c6:	00800437          	lui	s0,0x800
   163ca:	0089e433          	or	s0,s3,s0
   163ce:	00351493          	slli	s1,a0,0x3
   163d2:	c0190913          	addi	s2,s2,-1023
   163d6:	4981                	li	s3,0
   163d8:	4b81                	li	s7,0
   163da:	0146d713          	srli	a4,a3,0x14
   163de:	00c69a13          	slli	s4,a3,0xc
   163e2:	7ff77713          	andi	a4,a4,2047
   163e6:	85b2                	mv	a1,a2
   163e8:	00ca5a13          	srli	s4,s4,0xc
   163ec:	01f6db13          	srli	s6,a3,0x1f
   163f0:	10070d63          	beqz	a4,1650a <__muldf3+0x184>
   163f4:	7ff00793          	li	a5,2047
   163f8:	04f70363          	beq	a4,a5,1643e <__muldf3+0xb8>
   163fc:	01d65793          	srli	a5,a2,0x1d
   16400:	0a0e                	slli	s4,s4,0x3
   16402:	0147ea33          	or	s4,a5,s4
   16406:	c0170713          	addi	a4,a4,-1023
   1640a:	008007b7          	lui	a5,0x800
   1640e:	00fa67b3          	or	a5,s4,a5
   16412:	00361593          	slli	a1,a2,0x3
   16416:	993a                	add	s2,s2,a4
   16418:	4881                	li	a7,0
   1641a:	016ac733          	xor	a4,s5,s6
   1641e:	46bd                	li	a3,15
   16420:	853a                	mv	a0,a4
   16422:	00190813          	addi	a6,s2,1
   16426:	1736ec63          	bltu	a3,s3,1659e <__muldf3+0x218>
   1642a:	00001617          	auipc	a2,0x1
   1642e:	39e60613          	addi	a2,a2,926 # 177c8 <strlen+0x3e6>
   16432:	098a                	slli	s3,s3,0x2
   16434:	99b2                	add	s3,s3,a2
   16436:	0009a683          	lw	a3,0(s3)
   1643a:	96b2                	add	a3,a3,a2
   1643c:	8682                	jr	a3
   1643e:	00ca67b3          	or	a5,s4,a2
   16442:	7ff90913          	addi	s2,s2,2047
   16446:	12079d63          	bnez	a5,16580 <__muldf3+0x1fa>
   1644a:	0029e993          	ori	s3,s3,2
   1644e:	4581                	li	a1,0
   16450:	4889                	li	a7,2
   16452:	b7e1                	j	1641a <__muldf3+0x94>
   16454:	4701                	li	a4,0
   16456:	7ff00793          	li	a5,2047
   1645a:	00080437          	lui	s0,0x80
   1645e:	4481                	li	s1,0
   16460:	0432                	slli	s0,s0,0xc
   16462:	07d2                	slli	a5,a5,0x14
   16464:	8031                	srli	s0,s0,0xc
   16466:	077e                	slli	a4,a4,0x1f
   16468:	8c5d                	or	s0,s0,a5
   1646a:	8c59                	or	s0,s0,a4
   1646c:	85a2                	mv	a1,s0
   1646e:	50f2                	lw	ra,60(sp)
   16470:	5462                	lw	s0,56(sp)
   16472:	8526                	mv	a0,s1
   16474:	5942                	lw	s2,48(sp)
   16476:	54d2                	lw	s1,52(sp)
   16478:	59b2                	lw	s3,44(sp)
   1647a:	5a22                	lw	s4,40(sp)
   1647c:	5a92                	lw	s5,36(sp)
   1647e:	5b02                	lw	s6,32(sp)
   16480:	4bf2                	lw	s7,28(sp)
   16482:	6121                	addi	sp,sp,64
   16484:	8082                	ret
   16486:	855a                	mv	a0,s6
   16488:	843e                	mv	s0,a5
   1648a:	84ae                	mv	s1,a1
   1648c:	8bc6                	mv	s7,a7
   1648e:	4789                	li	a5,2
   16490:	10fb8163          	beq	s7,a5,16592 <__muldf3+0x20c>
   16494:	478d                	li	a5,3
   16496:	fafb8fe3          	beq	s7,a5,16454 <__muldf3+0xce>
   1649a:	4785                	li	a5,1
   1649c:	872a                	mv	a4,a0
   1649e:	3afb9663          	bne	s7,a5,1684a <__muldf3+0x4c4>
   164a2:	4781                	li	a5,0
   164a4:	4401                	li	s0,0
   164a6:	4481                	li	s1,0
   164a8:	bf65                	j	16460 <__muldf3+0xda>
   164aa:	00a9e433          	or	s0,s3,a0
   164ae:	c461                	beqz	s0,16576 <__muldf3+0x1f0>
   164b0:	c636                	sw	a3,12(sp)
   164b2:	c432                	sw	a2,8(sp)
   164b4:	2c098263          	beqz	s3,16778 <__muldf3+0x3f2>
   164b8:	854e                	mv	a0,s3
   164ba:	00001097          	auipc	ra,0x1
   164be:	eb2080e7          	jalr	-334(ra) # 1736c <__clzsi2>
   164c2:	4622                	lw	a2,8(sp)
   164c4:	46b2                	lw	a3,12(sp)
   164c6:	87aa                	mv	a5,a0
   164c8:	ff550713          	addi	a4,a0,-11
   164cc:	4475                	li	s0,29
   164ce:	ff878493          	addi	s1,a5,-8 # 7ffff8 <_data_lma+0x7e86f0>
   164d2:	8c19                	sub	s0,s0,a4
   164d4:	009999b3          	sll	s3,s3,s1
   164d8:	008a5433          	srl	s0,s4,s0
   164dc:	01346433          	or	s0,s0,s3
   164e0:	009a14b3          	sll	s1,s4,s1
   164e4:	0146d713          	srli	a4,a3,0x14
   164e8:	c0d00913          	li	s2,-1011
   164ec:	00c69a13          	slli	s4,a3,0xc
   164f0:	7ff77713          	andi	a4,a4,2047
   164f4:	40f90933          	sub	s2,s2,a5
   164f8:	4981                	li	s3,0
   164fa:	4b81                	li	s7,0
   164fc:	85b2                	mv	a1,a2
   164fe:	00ca5a13          	srli	s4,s4,0xc
   16502:	01f6db13          	srli	s6,a3,0x1f
   16506:	ee0717e3          	bnez	a4,163f4 <__muldf3+0x6e>
   1650a:	00ca67b3          	or	a5,s4,a2
   1650e:	cba1                	beqz	a5,1655e <__muldf3+0x1d8>
   16510:	240a0163          	beqz	s4,16752 <__muldf3+0x3cc>
   16514:	8552                	mv	a0,s4
   16516:	c432                	sw	a2,8(sp)
   16518:	00001097          	auipc	ra,0x1
   1651c:	e54080e7          	jalr	-428(ra) # 1736c <__clzsi2>
   16520:	4622                	lw	a2,8(sp)
   16522:	872a                	mv	a4,a0
   16524:	ff550693          	addi	a3,a0,-11
   16528:	47f5                	li	a5,29
   1652a:	ff870593          	addi	a1,a4,-8
   1652e:	8f95                	sub	a5,a5,a3
   16530:	00ba1a33          	sll	s4,s4,a1
   16534:	00f657b3          	srl	a5,a2,a5
   16538:	0147e7b3          	or	a5,a5,s4
   1653c:	00b615b3          	sll	a1,a2,a1
   16540:	40e90933          	sub	s2,s2,a4
   16544:	c0d90913          	addi	s2,s2,-1011
   16548:	4881                	li	a7,0
   1654a:	bdc1                	j	1641a <__muldf3+0x94>
   1654c:	00a9e433          	or	s0,s3,a0
   16550:	ec01                	bnez	s0,16568 <__muldf3+0x1e2>
   16552:	49a1                	li	s3,8
   16554:	4481                	li	s1,0
   16556:	7ff00913          	li	s2,2047
   1655a:	4b89                	li	s7,2
   1655c:	bdbd                	j	163da <__muldf3+0x54>
   1655e:	0019e993          	ori	s3,s3,1
   16562:	4581                	li	a1,0
   16564:	4885                	li	a7,1
   16566:	bd55                	j	1641a <__muldf3+0x94>
   16568:	844e                	mv	s0,s3
   1656a:	84aa                	mv	s1,a0
   1656c:	49b1                	li	s3,12
   1656e:	7ff00913          	li	s2,2047
   16572:	4b8d                	li	s7,3
   16574:	b59d                	j	163da <__muldf3+0x54>
   16576:	4991                	li	s3,4
   16578:	4481                	li	s1,0
   1657a:	4901                	li	s2,0
   1657c:	4b85                	li	s7,1
   1657e:	bdb1                	j	163da <__muldf3+0x54>
   16580:	0039e993          	ori	s3,s3,3
   16584:	87d2                	mv	a5,s4
   16586:	488d                	li	a7,3
   16588:	bd49                	j	1641a <__muldf3+0x94>
   1658a:	4789                	li	a5,2
   1658c:	8556                	mv	a0,s5
   1658e:	f0fb93e3          	bne	s7,a5,16494 <__muldf3+0x10e>
   16592:	872a                	mv	a4,a0
   16594:	7ff00793          	li	a5,2047
   16598:	4401                	li	s0,0
   1659a:	4481                	li	s1,0
   1659c:	b5d1                	j	16460 <__muldf3+0xda>
   1659e:	6ec1                	lui	t4,0x10
   165a0:	fffe8613          	addi	a2,t4,-1 # ffff <MCU_SECTORSIZE+0xefff>
   165a4:	0104d693          	srli	a3,s1,0x10
   165a8:	0105de13          	srli	t3,a1,0x10
   165ac:	8cf1                	and	s1,s1,a2
   165ae:	8df1                	and	a1,a1,a2
   165b0:	02958633          	mul	a2,a1,s1
   165b4:	02b68333          	mul	t1,a3,a1
   165b8:	01065893          	srli	a7,a2,0x10
   165bc:	029e0533          	mul	a0,t3,s1
   165c0:	951a                	add	a0,a0,t1
   165c2:	98aa                	add	a7,a7,a0
   165c4:	03c682b3          	mul	t0,a3,t3
   165c8:	0068f363          	bgeu	a7,t1,165ce <__muldf3+0x248>
   165cc:	92f6                	add	t0,t0,t4
   165ce:	6fc1                	lui	t6,0x10
   165d0:	ffff8313          	addi	t1,t6,-1 # ffff <MCU_SECTORSIZE+0xefff>
   165d4:	0067f533          	and	a0,a5,t1
   165d8:	0107d393          	srli	t2,a5,0x10
   165dc:	0068f7b3          	and	a5,a7,t1
   165e0:	07c2                	slli	a5,a5,0x10
   165e2:	00667333          	and	t1,a2,t1
   165e6:	933e                	add	t1,t1,a5
   165e8:	02950633          	mul	a2,a0,s1
   165ec:	0108d893          	srli	a7,a7,0x10
   165f0:	02a687b3          	mul	a5,a3,a0
   165f4:	01065f13          	srli	t5,a2,0x10
   165f8:	029384b3          	mul	s1,t2,s1
   165fc:	94be                	add	s1,s1,a5
   165fe:	94fa                	add	s1,s1,t5
   16600:	02768eb3          	mul	t4,a3,t2
   16604:	00f4f363          	bgeu	s1,a5,1660a <__muldf3+0x284>
   16608:	9efe                	add	t4,t4,t6
   1660a:	6a41                	lui	s4,0x10
   1660c:	fffa0793          	addi	a5,s4,-1 # ffff <MCU_SECTORSIZE+0xefff>
   16610:	01045f93          	srli	t6,s0,0x10
   16614:	00f476b3          	and	a3,s0,a5
   16618:	00f4f9b3          	and	s3,s1,a5
   1661c:	8e7d                	and	a2,a2,a5
   1661e:	80c1                	srli	s1,s1,0x10
   16620:	02d58433          	mul	s0,a1,a3
   16624:	09c2                	slli	s3,s3,0x10
   16626:	01d48f33          	add	t5,s1,t4
   1662a:	99b2                	add	s3,s3,a2
   1662c:	98ce                	add	a7,a7,s3
   1662e:	02de07b3          	mul	a5,t3,a3
   16632:	01045e93          	srli	t4,s0,0x10
   16636:	02bf85b3          	mul	a1,t6,a1
   1663a:	97ae                	add	a5,a5,a1
   1663c:	9ebe                	add	t4,t4,a5
   1663e:	03fe0e33          	mul	t3,t3,t6
   16642:	00bef363          	bgeu	t4,a1,16648 <__muldf3+0x2c2>
   16646:	9e52                	add	t3,t3,s4
   16648:	67c1                	lui	a5,0x10
   1664a:	fff78593          	addi	a1,a5,-1 # ffff <MCU_SECTORSIZE+0xefff>
   1664e:	00bef633          	and	a2,t4,a1
   16652:	8c6d                	and	s0,s0,a1
   16654:	0642                	slli	a2,a2,0x10
   16656:	9622                	add	a2,a2,s0
   16658:	010ede93          	srli	t4,t4,0x10
   1665c:	02d505b3          	mul	a1,a0,a3
   16660:	9e76                	add	t3,t3,t4
   16662:	02af8533          	mul	a0,t6,a0
   16666:	0105d413          	srli	s0,a1,0x10
   1666a:	02d386b3          	mul	a3,t2,a3
   1666e:	96aa                	add	a3,a3,a0
   16670:	96a2                	add	a3,a3,s0
   16672:	03f38fb3          	mul	t6,t2,t6
   16676:	00a6f363          	bgeu	a3,a0,1667c <__muldf3+0x2f6>
   1667a:	9fbe                	add	t6,t6,a5
   1667c:	6541                	lui	a0,0x10
   1667e:	157d                	addi	a0,a0,-1
   16680:	00a6f7b3          	and	a5,a3,a0
   16684:	07c2                	slli	a5,a5,0x10
   16686:	8d6d                	and	a0,a0,a1
   16688:	97aa                	add	a5,a5,a0
   1668a:	005885b3          	add	a1,a7,t0
   1668e:	0135b9b3          	sltu	s3,a1,s3
   16692:	97fa                	add	a5,a5,t5
   16694:	95b2                	add	a1,a1,a2
   16696:	01378433          	add	s0,a5,s3
   1669a:	00c5b633          	sltu	a2,a1,a2
   1669e:	01c40eb3          	add	t4,s0,t3
   166a2:	00ce8533          	add	a0,t4,a2
   166a6:	01343433          	sltu	s0,s0,s3
   166aa:	01e7b7b3          	sltu	a5,a5,t5
   166ae:	8fc1                	or	a5,a5,s0
   166b0:	01cebe33          	sltu	t3,t4,t3
   166b4:	0106d413          	srli	s0,a3,0x10
   166b8:	00c53633          	sltu	a2,a0,a2
   166bc:	943e                	add	s0,s0,a5
   166be:	00ce6633          	or	a2,t3,a2
   166c2:	00959493          	slli	s1,a1,0x9
   166c6:	9432                	add	s0,s0,a2
   166c8:	947e                	add	s0,s0,t6
   166ca:	0064e4b3          	or	s1,s1,t1
   166ce:	0426                	slli	s0,s0,0x9
   166d0:	01755693          	srli	a3,a0,0x17
   166d4:	009034b3          	snez	s1,s1
   166d8:	81dd                	srli	a1,a1,0x17
   166da:	00951793          	slli	a5,a0,0x9
   166de:	8ccd                	or	s1,s1,a1
   166e0:	8c55                	or	s0,s0,a3
   166e2:	8cdd                	or	s1,s1,a5
   166e4:	00741793          	slli	a5,s0,0x7
   166e8:	0007db63          	bgez	a5,166fe <__muldf3+0x378>
   166ec:	0014d793          	srli	a5,s1,0x1
   166f0:	8885                	andi	s1,s1,1
   166f2:	01f41693          	slli	a3,s0,0x1f
   166f6:	8cdd                	or	s1,s1,a5
   166f8:	8cd5                	or	s1,s1,a3
   166fa:	8005                	srli	s0,s0,0x1
   166fc:	8942                	mv	s2,a6
   166fe:	3ff90793          	addi	a5,s2,1023
   16702:	08f05d63          	blez	a5,1679c <__muldf3+0x416>
   16706:	0074f693          	andi	a3,s1,7
   1670a:	ce81                	beqz	a3,16722 <__muldf3+0x39c>
   1670c:	00f4f693          	andi	a3,s1,15
   16710:	4611                	li	a2,4
   16712:	00c68863          	beq	a3,a2,16722 <__muldf3+0x39c>
   16716:	00448693          	addi	a3,s1,4
   1671a:	0096b4b3          	sltu	s1,a3,s1
   1671e:	9426                	add	s0,s0,s1
   16720:	84b6                	mv	s1,a3
   16722:	00741693          	slli	a3,s0,0x7
   16726:	0006d863          	bgez	a3,16736 <__muldf3+0x3b0>
   1672a:	ff0007b7          	lui	a5,0xff000
   1672e:	17fd                	addi	a5,a5,-1
   16730:	8c7d                	and	s0,s0,a5
   16732:	40090793          	addi	a5,s2,1024
   16736:	7fe00693          	li	a3,2046
   1673a:	10f6c363          	blt	a3,a5,16840 <__muldf3+0x4ba>
   1673e:	0034d693          	srli	a3,s1,0x3
   16742:	01d41493          	slli	s1,s0,0x1d
   16746:	0426                	slli	s0,s0,0x9
   16748:	8cd5                	or	s1,s1,a3
   1674a:	8031                	srli	s0,s0,0xc
   1674c:	7ff7f793          	andi	a5,a5,2047
   16750:	bb01                	j	16460 <__muldf3+0xda>
   16752:	8532                	mv	a0,a2
   16754:	c432                	sw	a2,8(sp)
   16756:	00001097          	auipc	ra,0x1
   1675a:	c16080e7          	jalr	-1002(ra) # 1736c <__clzsi2>
   1675e:	01550693          	addi	a3,a0,21 # 10015 <MCU_SECTORSIZE+0xf015>
   16762:	47f1                	li	a5,28
   16764:	02050713          	addi	a4,a0,32
   16768:	4622                	lw	a2,8(sp)
   1676a:	dad7dfe3          	bge	a5,a3,16528 <__muldf3+0x1a2>
   1676e:	1561                	addi	a0,a0,-8
   16770:	00a617b3          	sll	a5,a2,a0
   16774:	4581                	li	a1,0
   16776:	b3e9                	j	16540 <__muldf3+0x1ba>
   16778:	00001097          	auipc	ra,0x1
   1677c:	bf4080e7          	jalr	-1036(ra) # 1736c <__clzsi2>
   16780:	01550713          	addi	a4,a0,21
   16784:	45f1                	li	a1,28
   16786:	02050793          	addi	a5,a0,32
   1678a:	4622                	lw	a2,8(sp)
   1678c:	46b2                	lw	a3,12(sp)
   1678e:	d2e5dfe3          	bge	a1,a4,164cc <__muldf3+0x146>
   16792:	1561                	addi	a0,a0,-8
   16794:	00aa1433          	sll	s0,s4,a0
   16798:	4481                	li	s1,0
   1679a:	b3a9                	j	164e4 <__muldf3+0x15e>
   1679c:	4685                	li	a3,1
   1679e:	8e9d                	sub	a3,a3,a5
   167a0:	e7b1                	bnez	a5,167ec <__muldf3+0x466>
   167a2:	41e90913          	addi	s2,s2,1054
   167a6:	012497b3          	sll	a5,s1,s2
   167aa:	00d4d4b3          	srl	s1,s1,a3
   167ae:	01241933          	sll	s2,s0,s2
   167b2:	00f037b3          	snez	a5,a5
   167b6:	009964b3          	or	s1,s2,s1
   167ba:	8cdd                	or	s1,s1,a5
   167bc:	0074f793          	andi	a5,s1,7
   167c0:	00d456b3          	srl	a3,s0,a3
   167c4:	cf81                	beqz	a5,167dc <__muldf3+0x456>
   167c6:	00f4f793          	andi	a5,s1,15
   167ca:	4611                	li	a2,4
   167cc:	00c78863          	beq	a5,a2,167dc <__muldf3+0x456>
   167d0:	00448793          	addi	a5,s1,4
   167d4:	0097b4b3          	sltu	s1,a5,s1
   167d8:	96a6                	add	a3,a3,s1
   167da:	84be                	mv	s1,a5
   167dc:	00869793          	slli	a5,a3,0x8
   167e0:	0407d863          	bgez	a5,16830 <__muldf3+0x4aa>
   167e4:	4785                	li	a5,1
   167e6:	4401                	li	s0,0
   167e8:	4481                	li	s1,0
   167ea:	b99d                	j	16460 <__muldf3+0xda>
   167ec:	03800613          	li	a2,56
   167f0:	cad649e3          	blt	a2,a3,164a2 <__muldf3+0x11c>
   167f4:	467d                	li	a2,31
   167f6:	fad656e3          	bge	a2,a3,167a2 <__muldf3+0x41c>
   167fa:	5605                	li	a2,-31
   167fc:	40f607b3          	sub	a5,a2,a5
   16800:	02000593          	li	a1,32
   16804:	00f45633          	srl	a2,s0,a5
   16808:	00b68763          	beq	a3,a1,16816 <__muldf3+0x490>
   1680c:	43e90913          	addi	s2,s2,1086
   16810:	012417b3          	sll	a5,s0,s2
   16814:	8cdd                	or	s1,s1,a5
   16816:	009034b3          	snez	s1,s1
   1681a:	8cd1                	or	s1,s1,a2
   1681c:	0074f693          	andi	a3,s1,7
   16820:	4401                	li	s0,0
   16822:	ca99                	beqz	a3,16838 <__muldf3+0x4b2>
   16824:	00f4f793          	andi	a5,s1,15
   16828:	4611                	li	a2,4
   1682a:	4681                	li	a3,0
   1682c:	fac792e3          	bne	a5,a2,167d0 <__muldf3+0x44a>
   16830:	00969413          	slli	s0,a3,0x9
   16834:	8031                	srli	s0,s0,0xc
   16836:	06f6                	slli	a3,a3,0x1d
   16838:	808d                	srli	s1,s1,0x3
   1683a:	8cd5                	or	s1,s1,a3
   1683c:	4781                	li	a5,0
   1683e:	b10d                	j	16460 <__muldf3+0xda>
   16840:	7ff00793          	li	a5,2047
   16844:	4401                	li	s0,0
   16846:	4481                	li	s1,0
   16848:	b921                	j	16460 <__muldf3+0xda>
   1684a:	8942                	mv	s2,a6
   1684c:	bd4d                	j	166fe <__muldf3+0x378>

0001684e <__subdf3>:
__subdf3():
   1684e:	00100737          	lui	a4,0x100
   16852:	177d                	addi	a4,a4,-1
   16854:	1101                	addi	sp,sp,-32
   16856:	00b77333          	and	t1,a4,a1
   1685a:	0146d893          	srli	a7,a3,0x14
   1685e:	8f75                	and	a4,a4,a3
   16860:	01d65e93          	srli	t4,a2,0x1d
   16864:	cc22                	sw	s0,24(sp)
   16866:	ca26                	sw	s1,20(sp)
   16868:	030e                	slli	t1,t1,0x3
   1686a:	0145d493          	srli	s1,a1,0x14
   1686e:	01d55793          	srli	a5,a0,0x1d
   16872:	070e                	slli	a4,a4,0x3
   16874:	ce06                	sw	ra,28(sp)
   16876:	c84a                	sw	s2,16(sp)
   16878:	c64e                	sw	s3,12(sp)
   1687a:	7ff8f893          	andi	a7,a7,2047
   1687e:	7ff00e13          	li	t3,2047
   16882:	00eee733          	or	a4,t4,a4
   16886:	7ff4f493          	andi	s1,s1,2047
   1688a:	01f5d413          	srli	s0,a1,0x1f
   1688e:	0067e333          	or	t1,a5,t1
   16892:	00351f13          	slli	t5,a0,0x3
   16896:	82fd                	srli	a3,a3,0x1f
   16898:	00361e93          	slli	t4,a2,0x3
   1689c:	19c88263          	beq	a7,t3,16a20 <__subdf3+0x1d2>
   168a0:	0016c693          	xori	a3,a3,1
   168a4:	411485b3          	sub	a1,s1,a7
   168a8:	12d40763          	beq	s0,a3,169d6 <__subdf3+0x188>
   168ac:	18b05363          	blez	a1,16a32 <__subdf3+0x1e4>
   168b0:	1a088d63          	beqz	a7,16a6a <__subdf3+0x21c>
   168b4:	008007b7          	lui	a5,0x800
   168b8:	8f5d                	or	a4,a4,a5
   168ba:	59c48563          	beq	s1,t3,16e44 <__subdf3+0x5f6>
   168be:	03800793          	li	a5,56
   168c2:	34b7c863          	blt	a5,a1,16c12 <__subdf3+0x3c4>
   168c6:	47fd                	li	a5,31
   168c8:	48b7c963          	blt	a5,a1,16d5a <__subdf3+0x50c>
   168cc:	02000793          	li	a5,32
   168d0:	8f8d                	sub	a5,a5,a1
   168d2:	00bed9b3          	srl	s3,t4,a1
   168d6:	00f71833          	sll	a6,a4,a5
   168da:	00fe9eb3          	sll	t4,t4,a5
   168de:	01386833          	or	a6,a6,s3
   168e2:	00b75733          	srl	a4,a4,a1
   168e6:	01d039b3          	snez	s3,t4
   168ea:	01386833          	or	a6,a6,s3
   168ee:	40e30333          	sub	t1,t1,a4
   168f2:	410f09b3          	sub	s3,t5,a6
   168f6:	013f37b3          	sltu	a5,t5,s3
   168fa:	40f30633          	sub	a2,t1,a5
   168fe:	00861793          	slli	a5,a2,0x8
   16902:	2407d563          	bgez	a5,16b4c <__subdf3+0x2fe>
   16906:	00800937          	lui	s2,0x800
   1690a:	197d                	addi	s2,s2,-1
   1690c:	01267933          	and	s2,a2,s2
   16910:	2e090163          	beqz	s2,16bf2 <__subdf3+0x3a4>
   16914:	854a                	mv	a0,s2
   16916:	00001097          	auipc	ra,0x1
   1691a:	a56080e7          	jalr	-1450(ra) # 1736c <__clzsi2>
   1691e:	ff850713          	addi	a4,a0,-8
   16922:	02000793          	li	a5,32
   16926:	8f99                	sub	a5,a5,a4
   16928:	00f9d7b3          	srl	a5,s3,a5
   1692c:	00e91633          	sll	a2,s2,a4
   16930:	8fd1                	or	a5,a5,a2
   16932:	00e999b3          	sll	s3,s3,a4
   16936:	2a974463          	blt	a4,s1,16bde <__subdf3+0x390>
   1693a:	8f05                	sub	a4,a4,s1
   1693c:	00170613          	addi	a2,a4,1 # 100001 <_data_lma+0xe86f9>
   16940:	46fd                	li	a3,31
   16942:	3ac6c763          	blt	a3,a2,16cf0 <__subdf3+0x4a2>
   16946:	02000713          	li	a4,32
   1694a:	8f11                	sub	a4,a4,a2
   1694c:	00c9d6b3          	srl	a3,s3,a2
   16950:	00e99833          	sll	a6,s3,a4
   16954:	00e79733          	sll	a4,a5,a4
   16958:	8f55                	or	a4,a4,a3
   1695a:	01003833          	snez	a6,a6
   1695e:	010769b3          	or	s3,a4,a6
   16962:	00c7d633          	srl	a2,a5,a2
   16966:	4481                	li	s1,0
   16968:	0079f793          	andi	a5,s3,7
   1696c:	cf81                	beqz	a5,16984 <__subdf3+0x136>
   1696e:	00f9f693          	andi	a3,s3,15
   16972:	4791                	li	a5,4
   16974:	00f68863          	beq	a3,a5,16984 <__subdf3+0x136>
   16978:	00498693          	addi	a3,s3,4
   1697c:	0136b833          	sltu	a6,a3,s3
   16980:	9642                	add	a2,a2,a6
   16982:	89b6                	mv	s3,a3
   16984:	00861793          	slli	a5,a2,0x8
   16988:	1c07d663          	bgez	a5,16b54 <__subdf3+0x306>
   1698c:	00148713          	addi	a4,s1,1
   16990:	7ff00793          	li	a5,2047
   16994:	8805                	andi	s0,s0,1
   16996:	20f70663          	beq	a4,a5,16ba2 <__subdf3+0x354>
   1699a:	ff8007b7          	lui	a5,0xff800
   1699e:	17fd                	addi	a5,a5,-1
   169a0:	8ff1                	and	a5,a5,a2
   169a2:	01d79813          	slli	a6,a5,0x1d
   169a6:	0039d993          	srli	s3,s3,0x3
   169aa:	07a6                	slli	a5,a5,0x9
   169ac:	01386833          	or	a6,a6,s3
   169b0:	83b1                	srli	a5,a5,0xc
   169b2:	7ff77713          	andi	a4,a4,2047
   169b6:	00c79693          	slli	a3,a5,0xc
   169ba:	0752                	slli	a4,a4,0x14
   169bc:	82b1                	srli	a3,a3,0xc
   169be:	047e                	slli	s0,s0,0x1f
   169c0:	8ed9                	or	a3,a3,a4
   169c2:	8ec1                	or	a3,a3,s0
   169c4:	40f2                	lw	ra,28(sp)
   169c6:	4462                	lw	s0,24(sp)
   169c8:	44d2                	lw	s1,20(sp)
   169ca:	4942                	lw	s2,16(sp)
   169cc:	49b2                	lw	s3,12(sp)
   169ce:	8542                	mv	a0,a6
   169d0:	85b6                	mv	a1,a3
   169d2:	6105                	addi	sp,sp,32
   169d4:	8082                	ret
   169d6:	0ab05663          	blez	a1,16a82 <__subdf3+0x234>
   169da:	12088a63          	beqz	a7,16b0e <__subdf3+0x2c0>
   169de:	008007b7          	lui	a5,0x800
   169e2:	8f5d                	or	a4,a4,a5
   169e4:	2dc48963          	beq	s1,t3,16cb6 <__subdf3+0x468>
   169e8:	03800793          	li	a5,56
   169ec:	18b7c763          	blt	a5,a1,16b7a <__subdf3+0x32c>
   169f0:	47fd                	li	a5,31
   169f2:	3cb7d463          	bge	a5,a1,16dba <__subdf3+0x56c>
   169f6:	fe058813          	addi	a6,a1,-32 # ffe0 <MCU_SECTORSIZE+0xefe0>
   169fa:	02000793          	li	a5,32
   169fe:	010759b3          	srl	s3,a4,a6
   16a02:	00f58a63          	beq	a1,a5,16a16 <__subdf3+0x1c8>
   16a06:	04000793          	li	a5,64
   16a0a:	40b785b3          	sub	a1,a5,a1
   16a0e:	00b71733          	sll	a4,a4,a1
   16a12:	00eeeeb3          	or	t4,t4,a4
   16a16:	01d03833          	snez	a6,t4
   16a1a:	01386833          	or	a6,a6,s3
   16a1e:	a295                	j	16b82 <__subdf3+0x334>
   16a20:	01d767b3          	or	a5,a4,t4
   16a24:	80148593          	addi	a1,s1,-2047
   16a28:	e399                	bnez	a5,16a2e <__subdf3+0x1e0>
   16a2a:	0016c693          	xori	a3,a3,1
   16a2e:	04d40a63          	beq	s0,a3,16a82 <__subdf3+0x234>
   16a32:	e1d1                	bnez	a1,16ab6 <__subdf3+0x268>
   16a34:	00148793          	addi	a5,s1,1
   16a38:	7fe7f793          	andi	a5,a5,2046
   16a3c:	1e079b63          	bnez	a5,16c32 <__subdf3+0x3e4>
   16a40:	01e367b3          	or	a5,t1,t5
   16a44:	01d76833          	or	a6,a4,t4
   16a48:	16049263          	bnez	s1,16bac <__subdf3+0x35e>
   16a4c:	3c078463          	beqz	a5,16e14 <__subdf3+0x5c6>
   16a50:	42081863          	bnez	a6,16e80 <__subdf3+0x632>
   16a54:	00351813          	slli	a6,a0,0x3
   16a58:	01d31693          	slli	a3,t1,0x1d
   16a5c:	00385813          	srli	a6,a6,0x3
   16a60:	0106e833          	or	a6,a3,a6
   16a64:	00335793          	srli	a5,t1,0x3
   16a68:	a219                	j	16b6e <__subdf3+0x320>
   16a6a:	01d767b3          	or	a5,a4,t4
   16a6e:	1a078763          	beqz	a5,16c1c <__subdf3+0x3ce>
   16a72:	fff58793          	addi	a5,a1,-1
   16a76:	3a078d63          	beqz	a5,16e30 <__subdf3+0x5e2>
   16a7a:	23c58e63          	beq	a1,t3,16cb6 <__subdf3+0x468>
   16a7e:	85be                	mv	a1,a5
   16a80:	bd3d                	j	168be <__subdf3+0x70>
   16a82:	1c059b63          	bnez	a1,16c58 <__subdf3+0x40a>
   16a86:	00148693          	addi	a3,s1,1
   16a8a:	7fe6f793          	andi	a5,a3,2046
   16a8e:	efc1                	bnez	a5,16b26 <__subdf3+0x2d8>
   16a90:	01e367b3          	or	a5,t1,t5
   16a94:	36049263          	bnez	s1,16df8 <__subdf3+0x5aa>
   16a98:	44078f63          	beqz	a5,16ef6 <__subdf3+0x6a8>
   16a9c:	01d767b3          	or	a5,a4,t4
   16aa0:	46079663          	bnez	a5,16f0c <__subdf3+0x6be>
   16aa4:	050e                	slli	a0,a0,0x3
   16aa6:	01d31813          	slli	a6,t1,0x1d
   16aaa:	810d                	srli	a0,a0,0x3
   16aac:	00a86833          	or	a6,a6,a0
   16ab0:	00335793          	srli	a5,t1,0x3
   16ab4:	a86d                	j	16b6e <__subdf3+0x320>
   16ab6:	409885b3          	sub	a1,a7,s1
   16aba:	20049963          	bnez	s1,16ccc <__subdf3+0x47e>
   16abe:	01e367b3          	or	a5,t1,t5
   16ac2:	30078f63          	beqz	a5,16de0 <__subdf3+0x592>
   16ac6:	fff58793          	addi	a5,a1,-1
   16aca:	40078b63          	beqz	a5,16ee0 <__subdf3+0x692>
   16ace:	7ff00513          	li	a0,2047
   16ad2:	20a58563          	beq	a1,a0,16cdc <__subdf3+0x48e>
   16ad6:	85be                	mv	a1,a5
   16ad8:	03800793          	li	a5,56
   16adc:	2ab7c463          	blt	a5,a1,16d84 <__subdf3+0x536>
   16ae0:	47fd                	li	a5,31
   16ae2:	3cb7ca63          	blt	a5,a1,16eb6 <__subdf3+0x668>
   16ae6:	02000793          	li	a5,32
   16aea:	8f8d                	sub	a5,a5,a1
   16aec:	00f31833          	sll	a6,t1,a5
   16af0:	00bf5633          	srl	a2,t5,a1
   16af4:	00ff17b3          	sll	a5,t5,a5
   16af8:	00c86833          	or	a6,a6,a2
   16afc:	00f039b3          	snez	s3,a5
   16b00:	00b35333          	srl	t1,t1,a1
   16b04:	01386833          	or	a6,a6,s3
   16b08:	40670733          	sub	a4,a4,t1
   16b0c:	a441                	j	16d8c <__subdf3+0x53e>
   16b0e:	01d767b3          	or	a5,a4,t4
   16b12:	10078563          	beqz	a5,16c1c <__subdf3+0x3ce>
   16b16:	fff58793          	addi	a5,a1,-1
   16b1a:	20078163          	beqz	a5,16d1c <__subdf3+0x4ce>
   16b1e:	2fc58263          	beq	a1,t3,16e02 <__subdf3+0x5b4>
   16b22:	85be                	mv	a1,a5
   16b24:	b5d1                	j	169e8 <__subdf3+0x19a>
   16b26:	7ff00793          	li	a5,2047
   16b2a:	06f68b63          	beq	a3,a5,16ba0 <__subdf3+0x352>
   16b2e:	9efa                	add	t4,t4,t5
   16b30:	01eeb633          	sltu	a2,t4,t5
   16b34:	00e307b3          	add	a5,t1,a4
   16b38:	97b2                	add	a5,a5,a2
   16b3a:	01f79813          	slli	a6,a5,0x1f
   16b3e:	001ede93          	srli	t4,t4,0x1
   16b42:	01d869b3          	or	s3,a6,t4
   16b46:	0017d613          	srli	a2,a5,0x1
   16b4a:	84b6                	mv	s1,a3
   16b4c:	0079f793          	andi	a5,s3,7
   16b50:	e0079fe3          	bnez	a5,1696e <__subdf3+0x120>
   16b54:	01d61793          	slli	a5,a2,0x1d
   16b58:	0039d813          	srli	a6,s3,0x3
   16b5c:	00f86833          	or	a6,a6,a5
   16b60:	85a6                	mv	a1,s1
   16b62:	00365793          	srli	a5,a2,0x3
   16b66:	7ff00713          	li	a4,2047
   16b6a:	06e58063          	beq	a1,a4,16bca <__subdf3+0x37c>
   16b6e:	07b2                	slli	a5,a5,0xc
   16b70:	83b1                	srli	a5,a5,0xc
   16b72:	7ff5f713          	andi	a4,a1,2047
   16b76:	8805                	andi	s0,s0,1
   16b78:	bd3d                	j	169b6 <__subdf3+0x168>
   16b7a:	01d76733          	or	a4,a4,t4
   16b7e:	00e03833          	snez	a6,a4
   16b82:	01e809b3          	add	s3,a6,t5
   16b86:	01e9b7b3          	sltu	a5,s3,t5
   16b8a:	00678633          	add	a2,a5,t1
   16b8e:	00861793          	slli	a5,a2,0x8
   16b92:	fa07dde3          	bgez	a5,16b4c <__subdf3+0x2fe>
   16b96:	0485                	addi	s1,s1,1
   16b98:	7ff00793          	li	a5,2047
   16b9c:	18f49e63          	bne	s1,a5,16d38 <__subdf3+0x4ea>
   16ba0:	8805                	andi	s0,s0,1
   16ba2:	7ff00713          	li	a4,2047
   16ba6:	4781                	li	a5,0
   16ba8:	4801                	li	a6,0
   16baa:	b531                	j	169b6 <__subdf3+0x168>
   16bac:	10079363          	bnez	a5,16cb2 <__subdf3+0x464>
   16bb0:	3c080363          	beqz	a6,16f76 <__subdf3+0x728>
   16bb4:	00361813          	slli	a6,a2,0x3
   16bb8:	01d71793          	slli	a5,a4,0x1d
   16bbc:	00385813          	srli	a6,a6,0x3
   16bc0:	00f86833          	or	a6,a6,a5
   16bc4:	8436                	mv	s0,a3
   16bc6:	00375793          	srli	a5,a4,0x3
   16bca:	00f867b3          	or	a5,a6,a5
   16bce:	dbe9                	beqz	a5,16ba0 <__subdf3+0x352>
   16bd0:	4401                	li	s0,0
   16bd2:	7ff00713          	li	a4,2047
   16bd6:	000807b7          	lui	a5,0x80
   16bda:	4801                	li	a6,0
   16bdc:	bbe9                	j	169b6 <__subdf3+0x168>
   16bde:	ff800637          	lui	a2,0xff800
   16be2:	167d                	addi	a2,a2,-1
   16be4:	8e7d                	and	a2,a2,a5
   16be6:	0079f793          	andi	a5,s3,7
   16bea:	8c99                	sub	s1,s1,a4
   16bec:	d80791e3          	bnez	a5,1696e <__subdf3+0x120>
   16bf0:	b795                	j	16b54 <__subdf3+0x306>
   16bf2:	854e                	mv	a0,s3
   16bf4:	00000097          	auipc	ra,0x0
   16bf8:	778080e7          	jalr	1912(ra) # 1736c <__clzsi2>
   16bfc:	01850713          	addi	a4,a0,24
   16c00:	47fd                	li	a5,31
   16c02:	d2e7d0e3          	bge	a5,a4,16922 <__subdf3+0xd4>
   16c06:	ff850613          	addi	a2,a0,-8
   16c0a:	00c997b3          	sll	a5,s3,a2
   16c0e:	4981                	li	s3,0
   16c10:	b31d                	j	16936 <__subdf3+0xe8>
   16c12:	01d76833          	or	a6,a4,t4
   16c16:	01003833          	snez	a6,a6
   16c1a:	b9e1                	j	168f2 <__subdf3+0xa4>
   16c1c:	00351813          	slli	a6,a0,0x3
   16c20:	01d31793          	slli	a5,t1,0x1d
   16c24:	00385813          	srli	a6,a6,0x3
   16c28:	00f86833          	or	a6,a6,a5
   16c2c:	00335793          	srli	a5,t1,0x3
   16c30:	bf1d                	j	16b66 <__subdf3+0x318>
   16c32:	41df09b3          	sub	s3,t5,t4
   16c36:	40e30933          	sub	s2,t1,a4
   16c3a:	013f3633          	sltu	a2,t5,s3
   16c3e:	40c90933          	sub	s2,s2,a2
   16c42:	00891793          	slli	a5,s2,0x8
   16c46:	2007ca63          	bltz	a5,16e5a <__subdf3+0x60c>
   16c4a:	0129e833          	or	a6,s3,s2
   16c4e:	cc0811e3          	bnez	a6,16910 <__subdf3+0xc2>
   16c52:	4781                	li	a5,0
   16c54:	4401                	li	s0,0
   16c56:	bf21                	j	16b6e <__subdf3+0x320>
   16c58:	409885b3          	sub	a1,a7,s1
   16c5c:	14048163          	beqz	s1,16d9e <__subdf3+0x550>
   16c60:	008006b7          	lui	a3,0x800
   16c64:	7ff00793          	li	a5,2047
   16c68:	00d36333          	or	t1,t1,a3
   16c6c:	20f88163          	beq	a7,a5,16e6e <__subdf3+0x620>
   16c70:	03800793          	li	a5,56
   16c74:	22b7cc63          	blt	a5,a1,16eac <__subdf3+0x65e>
   16c78:	47fd                	li	a5,31
   16c7a:	2cb7c963          	blt	a5,a1,16f4c <__subdf3+0x6fe>
   16c7e:	02000793          	li	a5,32
   16c82:	8f8d                	sub	a5,a5,a1
   16c84:	00f31833          	sll	a6,t1,a5
   16c88:	00bf56b3          	srl	a3,t5,a1
   16c8c:	00ff17b3          	sll	a5,t5,a5
   16c90:	00d86833          	or	a6,a6,a3
   16c94:	00f039b3          	snez	s3,a5
   16c98:	00b35333          	srl	t1,t1,a1
   16c9c:	01386833          	or	a6,a6,s3
   16ca0:	971a                	add	a4,a4,t1
   16ca2:	01d809b3          	add	s3,a6,t4
   16ca6:	01d9b7b3          	sltu	a5,s3,t4
   16caa:	00e78633          	add	a2,a5,a4
   16cae:	84c6                	mv	s1,a7
   16cb0:	bdf9                	j	16b8e <__subdf3+0x340>
   16cb2:	f0081fe3          	bnez	a6,16bd0 <__subdf3+0x382>
   16cb6:	00351813          	slli	a6,a0,0x3
   16cba:	01d31793          	slli	a5,t1,0x1d
   16cbe:	00385813          	srli	a6,a6,0x3
   16cc2:	00f86833          	or	a6,a6,a5
   16cc6:	00335793          	srli	a5,t1,0x3
   16cca:	b701                	j	16bca <__subdf3+0x37c>
   16ccc:	00800537          	lui	a0,0x800
   16cd0:	7ff00793          	li	a5,2047
   16cd4:	00a36333          	or	t1,t1,a0
   16cd8:	e0f890e3          	bne	a7,a5,16ad8 <__subdf3+0x28a>
   16cdc:	060e                	slli	a2,a2,0x3
   16cde:	01d71813          	slli	a6,a4,0x1d
   16ce2:	820d                	srli	a2,a2,0x3
   16ce4:	00c86833          	or	a6,a6,a2
   16ce8:	00375793          	srli	a5,a4,0x3
   16cec:	8436                	mv	s0,a3
   16cee:	bdf1                	j	16bca <__subdf3+0x37c>
   16cf0:	1705                	addi	a4,a4,-31
   16cf2:	02000693          	li	a3,32
   16cf6:	00e7d733          	srl	a4,a5,a4
   16cfa:	00d60a63          	beq	a2,a3,16d0e <__subdf3+0x4c0>
   16cfe:	04000693          	li	a3,64
   16d02:	40c68633          	sub	a2,a3,a2
   16d06:	00c79633          	sll	a2,a5,a2
   16d0a:	00c9e9b3          	or	s3,s3,a2
   16d0e:	01303833          	snez	a6,s3
   16d12:	00e869b3          	or	s3,a6,a4
   16d16:	4601                	li	a2,0
   16d18:	4481                	li	s1,0
   16d1a:	bd0d                	j	16b4c <__subdf3+0x2fe>
   16d1c:	01df09b3          	add	s3,t5,t4
   16d20:	00e307b3          	add	a5,t1,a4
   16d24:	01e9bf33          	sltu	t5,s3,t5
   16d28:	01e78633          	add	a2,a5,t5
   16d2c:	00861793          	slli	a5,a2,0x8
   16d30:	4485                	li	s1,1
   16d32:	e007dde3          	bgez	a5,16b4c <__subdf3+0x2fe>
   16d36:	4489                	li	s1,2
   16d38:	ff8007b7          	lui	a5,0xff800
   16d3c:	17fd                	addi	a5,a5,-1
   16d3e:	8ff1                	and	a5,a5,a2
   16d40:	0019d713          	srli	a4,s3,0x1
   16d44:	0019f813          	andi	a6,s3,1
   16d48:	01076833          	or	a6,a4,a6
   16d4c:	01f79993          	slli	s3,a5,0x1f
   16d50:	0109e9b3          	or	s3,s3,a6
   16d54:	0017d613          	srli	a2,a5,0x1
   16d58:	b901                	j	16968 <__subdf3+0x11a>
   16d5a:	fe058813          	addi	a6,a1,-32
   16d5e:	02000793          	li	a5,32
   16d62:	010759b3          	srl	s3,a4,a6
   16d66:	00f58a63          	beq	a1,a5,16d7a <__subdf3+0x52c>
   16d6a:	04000793          	li	a5,64
   16d6e:	40b785b3          	sub	a1,a5,a1
   16d72:	00b71733          	sll	a4,a4,a1
   16d76:	00eeeeb3          	or	t4,t4,a4
   16d7a:	01d03833          	snez	a6,t4
   16d7e:	01386833          	or	a6,a6,s3
   16d82:	be85                	j	168f2 <__subdf3+0xa4>
   16d84:	01e36333          	or	t1,t1,t5
   16d88:	00603833          	snez	a6,t1
   16d8c:	410e89b3          	sub	s3,t4,a6
   16d90:	013eb7b3          	sltu	a5,t4,s3
   16d94:	40f70633          	sub	a2,a4,a5
   16d98:	84c6                	mv	s1,a7
   16d9a:	8436                	mv	s0,a3
   16d9c:	b68d                	j	168fe <__subdf3+0xb0>
   16d9e:	01e367b3          	or	a5,t1,t5
   16da2:	18078763          	beqz	a5,16f30 <__subdf3+0x6e2>
   16da6:	fff58793          	addi	a5,a1,-1
   16daa:	1c078c63          	beqz	a5,16f82 <__subdf3+0x734>
   16dae:	7ff00693          	li	a3,2047
   16db2:	0ad58e63          	beq	a1,a3,16e6e <__subdf3+0x620>
   16db6:	85be                	mv	a1,a5
   16db8:	bd65                	j	16c70 <__subdf3+0x422>
   16dba:	02000793          	li	a5,32
   16dbe:	8f8d                	sub	a5,a5,a1
   16dc0:	00bed9b3          	srl	s3,t4,a1
   16dc4:	00f71833          	sll	a6,a4,a5
   16dc8:	00fe9eb3          	sll	t4,t4,a5
   16dcc:	01386833          	or	a6,a6,s3
   16dd0:	00b75733          	srl	a4,a4,a1
   16dd4:	01d039b3          	snez	s3,t4
   16dd8:	01386833          	or	a6,a6,s3
   16ddc:	933a                	add	t1,t1,a4
   16dde:	b355                	j	16b82 <__subdf3+0x334>
   16de0:	00361813          	slli	a6,a2,0x3
   16de4:	01d71793          	slli	a5,a4,0x1d
   16de8:	00385813          	srli	a6,a6,0x3
   16dec:	0107e833          	or	a6,a5,a6
   16df0:	8436                	mv	s0,a3
   16df2:	00375793          	srli	a5,a4,0x3
   16df6:	bb85                	j	16b66 <__subdf3+0x318>
   16df8:	cbbd                	beqz	a5,16e6e <__subdf3+0x620>
   16dfa:	01d76733          	or	a4,a4,t4
   16dfe:	dc0719e3          	bnez	a4,16bd0 <__subdf3+0x382>
   16e02:	050e                	slli	a0,a0,0x3
   16e04:	01d31813          	slli	a6,t1,0x1d
   16e08:	810d                	srli	a0,a0,0x3
   16e0a:	00a86833          	or	a6,a6,a0
   16e0e:	00335793          	srli	a5,t1,0x3
   16e12:	bb65                	j	16bca <__subdf3+0x37c>
   16e14:	e2080fe3          	beqz	a6,16c52 <__subdf3+0x404>
   16e18:	00361813          	slli	a6,a2,0x3
   16e1c:	01d71793          	slli	a5,a4,0x1d
   16e20:	00385813          	srli	a6,a6,0x3
   16e24:	00f86833          	or	a6,a6,a5
   16e28:	8436                	mv	s0,a3
   16e2a:	00375793          	srli	a5,a4,0x3
   16e2e:	b381                	j	16b6e <__subdf3+0x320>
   16e30:	41df09b3          	sub	s3,t5,t4
   16e34:	40e307b3          	sub	a5,t1,a4
   16e38:	013f3f33          	sltu	t5,t5,s3
   16e3c:	41e78633          	sub	a2,a5,t5
   16e40:	4485                	li	s1,1
   16e42:	bc75                	j	168fe <__subdf3+0xb0>
   16e44:	00351813          	slli	a6,a0,0x3
   16e48:	01d31693          	slli	a3,t1,0x1d
   16e4c:	00385813          	srli	a6,a6,0x3
   16e50:	0106e833          	or	a6,a3,a6
   16e54:	00335793          	srli	a5,t1,0x3
   16e58:	bb8d                	j	16bca <__subdf3+0x37c>
   16e5a:	41ee89b3          	sub	s3,t4,t5
   16e5e:	40670633          	sub	a2,a4,t1
   16e62:	013eb933          	sltu	s2,t4,s3
   16e66:	41260933          	sub	s2,a2,s2
   16e6a:	8436                	mv	s0,a3
   16e6c:	b455                	j	16910 <__subdf3+0xc2>
   16e6e:	060e                	slli	a2,a2,0x3
   16e70:	01d71813          	slli	a6,a4,0x1d
   16e74:	820d                	srli	a2,a2,0x3
   16e76:	00c86833          	or	a6,a6,a2
   16e7a:	00375793          	srli	a5,a4,0x3
   16e7e:	b3b1                	j	16bca <__subdf3+0x37c>
   16e80:	41df09b3          	sub	s3,t5,t4
   16e84:	40e307b3          	sub	a5,t1,a4
   16e88:	013f3633          	sltu	a2,t5,s3
   16e8c:	40c78633          	sub	a2,a5,a2
   16e90:	00861793          	slli	a5,a2,0x8
   16e94:	0a07d763          	bgez	a5,16f42 <__subdf3+0x6f4>
   16e98:	41ee89b3          	sub	s3,t4,t5
   16e9c:	406707b3          	sub	a5,a4,t1
   16ea0:	013ebeb3          	sltu	t4,t4,s3
   16ea4:	41d78633          	sub	a2,a5,t4
   16ea8:	8436                	mv	s0,a3
   16eaa:	bc7d                	j	16968 <__subdf3+0x11a>
   16eac:	01e36333          	or	t1,t1,t5
   16eb0:	00603833          	snez	a6,t1
   16eb4:	b3fd                	j	16ca2 <__subdf3+0x454>
   16eb6:	fe058813          	addi	a6,a1,-32
   16eba:	02000793          	li	a5,32
   16ebe:	010359b3          	srl	s3,t1,a6
   16ec2:	00f58a63          	beq	a1,a5,16ed6 <__subdf3+0x688>
   16ec6:	04000793          	li	a5,64
   16eca:	40b785b3          	sub	a1,a5,a1
   16ece:	00b31333          	sll	t1,t1,a1
   16ed2:	006f6f33          	or	t5,t5,t1
   16ed6:	01e03833          	snez	a6,t5
   16eda:	01386833          	or	a6,a6,s3
   16ede:	b57d                	j	16d8c <__subdf3+0x53e>
   16ee0:	41ee89b3          	sub	s3,t4,t5
   16ee4:	406707b3          	sub	a5,a4,t1
   16ee8:	013ebeb3          	sltu	t4,t4,s3
   16eec:	41d78633          	sub	a2,a5,t4
   16ef0:	8436                	mv	s0,a3
   16ef2:	4485                	li	s1,1
   16ef4:	b429                	j	168fe <__subdf3+0xb0>
   16ef6:	00361813          	slli	a6,a2,0x3
   16efa:	01d71793          	slli	a5,a4,0x1d
   16efe:	00385813          	srli	a6,a6,0x3
   16f02:	00f86833          	or	a6,a6,a5
   16f06:	00375793          	srli	a5,a4,0x3
   16f0a:	b195                	j	16b6e <__subdf3+0x320>
   16f0c:	01df09b3          	add	s3,t5,t4
   16f10:	00e307b3          	add	a5,t1,a4
   16f14:	01e9bf33          	sltu	t5,s3,t5
   16f18:	01e78633          	add	a2,a5,t5
   16f1c:	00861793          	slli	a5,a2,0x8
   16f20:	c207d6e3          	bgez	a5,16b4c <__subdf3+0x2fe>
   16f24:	ff8007b7          	lui	a5,0xff800
   16f28:	17fd                	addi	a5,a5,-1
   16f2a:	8e7d                	and	a2,a2,a5
   16f2c:	4485                	li	s1,1
   16f2e:	b939                	j	16b4c <__subdf3+0x2fe>
   16f30:	060e                	slli	a2,a2,0x3
   16f32:	01d71813          	slli	a6,a4,0x1d
   16f36:	820d                	srli	a2,a2,0x3
   16f38:	00c86833          	or	a6,a6,a2
   16f3c:	00375793          	srli	a5,a4,0x3
   16f40:	b11d                	j	16b66 <__subdf3+0x318>
   16f42:	00c9e833          	or	a6,s3,a2
   16f46:	d00806e3          	beqz	a6,16c52 <__subdf3+0x404>
   16f4a:	b109                	j	16b4c <__subdf3+0x2fe>
   16f4c:	fe058813          	addi	a6,a1,-32
   16f50:	02000793          	li	a5,32
   16f54:	010359b3          	srl	s3,t1,a6
   16f58:	00f58a63          	beq	a1,a5,16f6c <__subdf3+0x71e>
   16f5c:	04000793          	li	a5,64
   16f60:	40b785b3          	sub	a1,a5,a1
   16f64:	00b31333          	sll	t1,t1,a1
   16f68:	006f6f33          	or	t5,t5,t1
   16f6c:	01e03833          	snez	a6,t5
   16f70:	01386833          	or	a6,a6,s3
   16f74:	b33d                	j	16ca2 <__subdf3+0x454>
   16f76:	4401                	li	s0,0
   16f78:	7ff00713          	li	a4,2047
   16f7c:	000807b7          	lui	a5,0x80
   16f80:	bc1d                	j	169b6 <__subdf3+0x168>
   16f82:	01df09b3          	add	s3,t5,t4
   16f86:	00e307b3          	add	a5,t1,a4
   16f8a:	01d9beb3          	sltu	t4,s3,t4
   16f8e:	01d78633          	add	a2,a5,t4
   16f92:	bb69                	j	16d2c <__subdf3+0x4de>

00016f94 <__fixdfsi>:
__fixdfsi():
   16f94:	0145d793          	srli	a5,a1,0x14
   16f98:	001006b7          	lui	a3,0x100
   16f9c:	fff68713          	addi	a4,a3,-1 # fffff <_data_lma+0xe86f7>
   16fa0:	7ff7f793          	andi	a5,a5,2047
   16fa4:	3fe00613          	li	a2,1022
   16fa8:	8f6d                	and	a4,a4,a1
   16faa:	81fd                	srli	a1,a1,0x1f
   16fac:	00f65c63          	bge	a2,a5,16fc4 <__fixdfsi+0x30>
   16fb0:	41d00613          	li	a2,1053
   16fb4:	00f65a63          	bge	a2,a5,16fc8 <__fixdfsi+0x34>
   16fb8:	80000537          	lui	a0,0x80000
   16fbc:	fff54513          	not	a0,a0
   16fc0:	952e                	add	a0,a0,a1
   16fc2:	8082                	ret
   16fc4:	4501                	li	a0,0
   16fc6:	8082                	ret
   16fc8:	43300613          	li	a2,1075
   16fcc:	8e1d                	sub	a2,a2,a5
   16fce:	487d                	li	a6,31
   16fd0:	8f55                	or	a4,a4,a3
   16fd2:	00c85d63          	bge	a6,a2,16fec <__fixdfsi+0x58>
   16fd6:	41300693          	li	a3,1043
   16fda:	40f687b3          	sub	a5,a3,a5
   16fde:	00f757b3          	srl	a5,a4,a5
   16fe2:	40f00533          	neg	a0,a5
   16fe6:	f1e5                	bnez	a1,16fc6 <__fixdfsi+0x32>
   16fe8:	853e                	mv	a0,a5
   16fea:	8082                	ret
   16fec:	bed78793          	addi	a5,a5,-1043 # 7fbed <_data_lma+0x682e5>
   16ff0:	00f717b3          	sll	a5,a4,a5
   16ff4:	00c55533          	srl	a0,a0,a2
   16ff8:	8fc9                	or	a5,a5,a0
   16ffa:	b7e5                	j	16fe2 <__fixdfsi+0x4e>

00016ffc <__fixunsdfsi>:
__fixunsdfsi():
   16ffc:	0145d793          	srli	a5,a1,0x14
   17000:	001006b7          	lui	a3,0x100
   17004:	fff68713          	addi	a4,a3,-1 # fffff <_data_lma+0xe86f7>
   17008:	7ff7f793          	andi	a5,a5,2047
   1700c:	3fe00613          	li	a2,1022
   17010:	882a                	mv	a6,a0
   17012:	8f6d                	and	a4,a4,a1
   17014:	4501                	li	a0,0
   17016:	81fd                	srli	a1,a1,0x1f
   17018:	00f65463          	bge	a2,a5,17020 <__fixunsdfsi+0x24>
   1701c:	c199                	beqz	a1,17022 <__fixunsdfsi+0x26>
   1701e:	8082                	ret
   17020:	8082                	ret
   17022:	41e00613          	li	a2,1054
   17026:	557d                	li	a0,-1
   17028:	fef64be3          	blt	a2,a5,1701e <__fixunsdfsi+0x22>
   1702c:	43300513          	li	a0,1075
   17030:	8d1d                	sub	a0,a0,a5
   17032:	467d                	li	a2,31
   17034:	8f55                	or	a4,a4,a3
   17036:	00a64a63          	blt	a2,a0,1704a <__fixunsdfsi+0x4e>
   1703a:	bed78793          	addi	a5,a5,-1043
   1703e:	00f71733          	sll	a4,a4,a5
   17042:	00a85533          	srl	a0,a6,a0
   17046:	8d59                	or	a0,a0,a4
   17048:	8082                	ret
   1704a:	41300513          	li	a0,1043
   1704e:	40f507b3          	sub	a5,a0,a5
   17052:	00f75533          	srl	a0,a4,a5
   17056:	8082                	ret

00017058 <__floatsidf>:
__floatsidf():
   17058:	1141                	addi	sp,sp,-16
   1705a:	c606                	sw	ra,12(sp)
   1705c:	c422                	sw	s0,8(sp)
   1705e:	c226                	sw	s1,4(sp)
   17060:	cd1d                	beqz	a0,1709e <__floatsidf+0x46>
   17062:	41f55793          	srai	a5,a0,0x1f
   17066:	00a7c4b3          	xor	s1,a5,a0
   1706a:	8c9d                	sub	s1,s1,a5
   1706c:	842a                	mv	s0,a0
   1706e:	8526                	mv	a0,s1
   17070:	00000097          	auipc	ra,0x0
   17074:	2fc080e7          	jalr	764(ra) # 1736c <__clzsi2>
   17078:	41e00693          	li	a3,1054
   1707c:	8e89                	sub	a3,a3,a0
   1707e:	47a9                	li	a5,10
   17080:	807d                	srli	s0,s0,0x1f
   17082:	7ff6f693          	andi	a3,a3,2047
   17086:	02a7cd63          	blt	a5,a0,170c0 <__floatsidf+0x68>
   1708a:	472d                	li	a4,11
   1708c:	8f09                	sub	a4,a4,a0
   1708e:	00e4d7b3          	srl	a5,s1,a4
   17092:	0555                	addi	a0,a0,21
   17094:	07b2                	slli	a5,a5,0xc
   17096:	00a494b3          	sll	s1,s1,a0
   1709a:	83b1                	srli	a5,a5,0xc
   1709c:	a029                	j	170a6 <__floatsidf+0x4e>
   1709e:	4401                	li	s0,0
   170a0:	4681                	li	a3,0
   170a2:	4781                	li	a5,0
   170a4:	4481                	li	s1,0
   170a6:	07b2                	slli	a5,a5,0xc
   170a8:	06d2                	slli	a3,a3,0x14
   170aa:	83b1                	srli	a5,a5,0xc
   170ac:	047e                	slli	s0,s0,0x1f
   170ae:	8fd5                	or	a5,a5,a3
   170b0:	8fc1                	or	a5,a5,s0
   170b2:	40b2                	lw	ra,12(sp)
   170b4:	4422                	lw	s0,8(sp)
   170b6:	8526                	mv	a0,s1
   170b8:	85be                	mv	a1,a5
   170ba:	4492                	lw	s1,4(sp)
   170bc:	0141                	addi	sp,sp,16
   170be:	8082                	ret
   170c0:	1555                	addi	a0,a0,-11
   170c2:	00a497b3          	sll	a5,s1,a0
   170c6:	07b2                	slli	a5,a5,0xc
   170c8:	83b1                	srli	a5,a5,0xc
   170ca:	4481                	li	s1,0
   170cc:	bfe9                	j	170a6 <__floatsidf+0x4e>

000170ce <__floatunsidf>:
__floatunsidf():
   170ce:	c129                	beqz	a0,17110 <__floatunsidf+0x42>
   170d0:	1141                	addi	sp,sp,-16
   170d2:	c422                	sw	s0,8(sp)
   170d4:	c606                	sw	ra,12(sp)
   170d6:	842a                	mv	s0,a0
   170d8:	00000097          	auipc	ra,0x0
   170dc:	294080e7          	jalr	660(ra) # 1736c <__clzsi2>
   170e0:	41e00693          	li	a3,1054
   170e4:	8e89                	sub	a3,a3,a0
   170e6:	47a9                	li	a5,10
   170e8:	7ff6f693          	andi	a3,a3,2047
   170ec:	02a7dc63          	bge	a5,a0,17124 <__floatunsidf+0x56>
   170f0:	1555                	addi	a0,a0,-11
   170f2:	00a417b3          	sll	a5,s0,a0
   170f6:	07b2                	slli	a5,a5,0xc
   170f8:	83b1                	srli	a5,a5,0xc
   170fa:	4701                	li	a4,0
   170fc:	40b2                	lw	ra,12(sp)
   170fe:	4422                	lw	s0,8(sp)
   17100:	07b2                	slli	a5,a5,0xc
   17102:	06d2                	slli	a3,a3,0x14
   17104:	83b1                	srli	a5,a5,0xc
   17106:	8fd5                	or	a5,a5,a3
   17108:	853a                	mv	a0,a4
   1710a:	85be                	mv	a1,a5
   1710c:	0141                	addi	sp,sp,16
   1710e:	8082                	ret
   17110:	4781                	li	a5,0
   17112:	4681                	li	a3,0
   17114:	07b2                	slli	a5,a5,0xc
   17116:	06d2                	slli	a3,a3,0x14
   17118:	83b1                	srli	a5,a5,0xc
   1711a:	4701                	li	a4,0
   1711c:	8fd5                	or	a5,a5,a3
   1711e:	853a                	mv	a0,a4
   17120:	85be                	mv	a1,a5
   17122:	8082                	ret
   17124:	472d                	li	a4,11
   17126:	8f09                	sub	a4,a4,a0
   17128:	00e457b3          	srl	a5,s0,a4
   1712c:	07b2                	slli	a5,a5,0xc
   1712e:	01550713          	addi	a4,a0,21 # 80000015 <_eusrstack+0x5fff8015>
   17132:	00e41733          	sll	a4,s0,a4
   17136:	83b1                	srli	a5,a5,0xc
   17138:	b7d1                	j	170fc <__floatunsidf+0x2e>

0001713a <__fixunsdfdi>:
__fixunsdfdi():
   1713a:	0145d793          	srli	a5,a1,0x14
   1713e:	001006b7          	lui	a3,0x100
   17142:	fff68713          	addi	a4,a3,-1 # fffff <_data_lma+0xe86f7>
   17146:	7ff7f793          	andi	a5,a5,2047
   1714a:	3fe00613          	li	a2,1022
   1714e:	8f6d                	and	a4,a4,a1
   17150:	81fd                	srli	a1,a1,0x1f
   17152:	00f65363          	bge	a2,a5,17158 <__fixunsdfdi+0x1e>
   17156:	c581                	beqz	a1,1715e <__fixunsdfdi+0x24>
   17158:	4501                	li	a0,0
   1715a:	4581                	li	a1,0
   1715c:	8082                	ret
   1715e:	43e00613          	li	a2,1086
   17162:	00f65563          	bge	a2,a5,1716c <__fixunsdfdi+0x32>
   17166:	557d                	li	a0,-1
   17168:	55fd                	li	a1,-1
   1716a:	8082                	ret
   1716c:	43200613          	li	a2,1074
   17170:	00d765b3          	or	a1,a4,a3
   17174:	00f65c63          	bge	a2,a5,1718c <__fixunsdfdi+0x52>
   17178:	bad78713          	addi	a4,a5,-1107
   1717c:	bcd78793          	addi	a5,a5,-1075
   17180:	04074063          	bltz	a4,171c0 <__fixunsdfdi+0x86>
   17184:	00e515b3          	sll	a1,a0,a4
   17188:	4501                	li	a0,0
   1718a:	8082                	ret
   1718c:	43300693          	li	a3,1075
   17190:	8e9d                	sub	a3,a3,a5
   17192:	477d                	li	a4,31
   17194:	00d75b63          	bge	a4,a3,171aa <__fixunsdfdi+0x70>
   17198:	41300713          	li	a4,1043
   1719c:	40f707b3          	sub	a5,a4,a5
   171a0:	00f5d7b3          	srl	a5,a1,a5
   171a4:	4581                	li	a1,0
   171a6:	853e                	mv	a0,a5
   171a8:	8082                	ret
   171aa:	bed78713          	addi	a4,a5,-1043
   171ae:	00e59733          	sll	a4,a1,a4
   171b2:	00d55533          	srl	a0,a0,a3
   171b6:	00a767b3          	or	a5,a4,a0
   171ba:	00d5d5b3          	srl	a1,a1,a3
   171be:	b7e5                	j	171a6 <__fixunsdfdi+0x6c>
   171c0:	46fd                	li	a3,31
   171c2:	00155713          	srli	a4,a0,0x1
   171c6:	8e9d                	sub	a3,a3,a5
   171c8:	00d75733          	srl	a4,a4,a3
   171cc:	00f595b3          	sll	a1,a1,a5
   171d0:	8dd9                	or	a1,a1,a4
   171d2:	00f51533          	sll	a0,a0,a5
   171d6:	8082                	ret

000171d8 <__floatundidf>:
__floatundidf():
   171d8:	00b567b3          	or	a5,a0,a1
   171dc:	c3b1                	beqz	a5,17220 <__floatundidf+0x48>
   171de:	1141                	addi	sp,sp,-16
   171e0:	c422                	sw	s0,8(sp)
   171e2:	c226                	sw	s1,4(sp)
   171e4:	c04a                	sw	s2,0(sp)
   171e6:	c606                	sw	ra,12(sp)
   171e8:	84aa                	mv	s1,a0
   171ea:	892e                	mv	s2,a1
   171ec:	842e                	mv	s0,a1
   171ee:	c1b9                	beqz	a1,17234 <__floatundidf+0x5c>
   171f0:	852e                	mv	a0,a1
   171f2:	00000097          	auipc	ra,0x0
   171f6:	17a080e7          	jalr	378(ra) # 1736c <__clzsi2>
   171fa:	43e00693          	li	a3,1086
   171fe:	8e89                	sub	a3,a3,a0
   17200:	43300793          	li	a5,1075
   17204:	06d7c763          	blt	a5,a3,17272 <__floatundidf+0x9a>
   17208:	00c91793          	slli	a5,s2,0xc
   1720c:	462d                	li	a2,11
   1720e:	8726                	mv	a4,s1
   17210:	7ff6f693          	andi	a3,a3,2047
   17214:	83b1                	srli	a5,a5,0xc
   17216:	0ca65f63          	bge	a2,a0,172f4 <__floatundidf+0x11c>
   1721a:	ff550613          	addi	a2,a0,-11
   1721e:	a825                	j	17256 <__floatundidf+0x7e>
   17220:	4781                	li	a5,0
   17222:	4681                	li	a3,0
   17224:	07b2                	slli	a5,a5,0xc
   17226:	06d2                	slli	a3,a3,0x14
   17228:	83b1                	srli	a5,a5,0xc
   1722a:	4701                	li	a4,0
   1722c:	8fd5                	or	a5,a5,a3
   1722e:	853a                	mv	a0,a4
   17230:	85be                	mv	a1,a5
   17232:	8082                	ret
   17234:	00000097          	auipc	ra,0x0
   17238:	138080e7          	jalr	312(ra) # 1736c <__clzsi2>
   1723c:	862a                	mv	a2,a0
   1723e:	43e00693          	li	a3,1086
   17242:	02050513          	addi	a0,a0,32
   17246:	8e89                	sub	a3,a3,a0
   17248:	02a00713          	li	a4,42
   1724c:	7ff6f693          	andi	a3,a3,2047
   17250:	0ca74c63          	blt	a4,a0,17328 <__floatundidf+0x150>
   17254:	0655                	addi	a2,a2,21
   17256:	02b00713          	li	a4,43
   1725a:	8f09                	sub	a4,a4,a0
   1725c:	00c917b3          	sll	a5,s2,a2
   17260:	00e4d733          	srl	a4,s1,a4
   17264:	8f5d                	or	a4,a4,a5
   17266:	00c71793          	slli	a5,a4,0xc
   1726a:	83b1                	srli	a5,a5,0xc
   1726c:	00c49733          	sll	a4,s1,a2
   17270:	a051                	j	172f4 <__floatundidf+0x11c>
   17272:	43600793          	li	a5,1078
   17276:	02d7d963          	bge	a5,a3,172a8 <__floatundidf+0xd0>
   1727a:	01850713          	addi	a4,a0,24
   1727e:	03850793          	addi	a5,a0,56
   17282:	0c074763          	bltz	a4,17350 <__floatundidf+0x178>
   17286:	00e49633          	sll	a2,s1,a4
   1728a:	4701                	li	a4,0
   1728c:	4421                	li	s0,8
   1728e:	8c09                	sub	s0,s0,a0
   17290:	8f51                	or	a4,a4,a2
   17292:	fe040793          	addi	a5,s0,-32 # 7ffe0 <_data_lma+0x686d8>
   17296:	00e03733          	snez	a4,a4
   1729a:	0807cf63          	bltz	a5,17338 <__floatundidf+0x160>
   1729e:	00f954b3          	srl	s1,s2,a5
   172a2:	4781                	li	a5,0
   172a4:	8cd9                	or	s1,s1,a4
   172a6:	843e                	mv	s0,a5
   172a8:	47a1                	li	a5,8
   172aa:	06a7c163          	blt	a5,a0,1730c <__floatundidf+0x134>
   172ae:	ff800737          	lui	a4,0xff800
   172b2:	177d                	addi	a4,a4,-1
   172b4:	0074f613          	andi	a2,s1,7
   172b8:	00e477b3          	and	a5,s0,a4
   172bc:	c605                	beqz	a2,172e4 <__floatundidf+0x10c>
   172be:	00f4f613          	andi	a2,s1,15
   172c2:	4591                	li	a1,4
   172c4:	02b60063          	beq	a2,a1,172e4 <__floatundidf+0x10c>
   172c8:	00448613          	addi	a2,s1,4
   172cc:	009634b3          	sltu	s1,a2,s1
   172d0:	97a6                	add	a5,a5,s1
   172d2:	00879593          	slli	a1,a5,0x8
   172d6:	0805d963          	bgez	a1,17368 <__floatundidf+0x190>
   172da:	43f00693          	li	a3,1087
   172de:	8ff9                	and	a5,a5,a4
   172e0:	8e89                	sub	a3,a3,a0
   172e2:	84b2                	mv	s1,a2
   172e4:	01d79713          	slli	a4,a5,0x1d
   172e8:	808d                	srli	s1,s1,0x3
   172ea:	07a6                	slli	a5,a5,0x9
   172ec:	8f45                	or	a4,a4,s1
   172ee:	83b1                	srli	a5,a5,0xc
   172f0:	7ff6f693          	andi	a3,a3,2047
   172f4:	40b2                	lw	ra,12(sp)
   172f6:	4422                	lw	s0,8(sp)
   172f8:	07b2                	slli	a5,a5,0xc
   172fa:	06d2                	slli	a3,a3,0x14
   172fc:	83b1                	srli	a5,a5,0xc
   172fe:	8fd5                	or	a5,a5,a3
   17300:	4492                	lw	s1,4(sp)
   17302:	4902                	lw	s2,0(sp)
   17304:	853a                	mv	a0,a4
   17306:	85be                	mv	a1,a5
   17308:	0141                	addi	sp,sp,16
   1730a:	8082                	ret
   1730c:	02800713          	li	a4,40
   17310:	ff850613          	addi	a2,a0,-8
   17314:	8f09                	sub	a4,a4,a0
   17316:	00e4d733          	srl	a4,s1,a4
   1731a:	00c417b3          	sll	a5,s0,a2
   1731e:	00f76433          	or	s0,a4,a5
   17322:	00c494b3          	sll	s1,s1,a2
   17326:	b761                	j	172ae <__floatundidf+0xd6>
   17328:	ff560793          	addi	a5,a2,-11 # ff7ffff5 <_eusrstack+0xdf7f7ff5>
   1732c:	00f497b3          	sll	a5,s1,a5
   17330:	07b2                	slli	a5,a5,0xc
   17332:	83b1                	srli	a5,a5,0xc
   17334:	4701                	li	a4,0
   17336:	bf7d                	j	172f4 <__floatundidf+0x11c>
   17338:	467d                	li	a2,31
   1733a:	00191793          	slli	a5,s2,0x1
   1733e:	8e01                	sub	a2,a2,s0
   17340:	00c797b3          	sll	a5,a5,a2
   17344:	0084d4b3          	srl	s1,s1,s0
   17348:	8cdd                	or	s1,s1,a5
   1734a:	008957b3          	srl	a5,s2,s0
   1734e:	bf99                	j	172a4 <__floatundidf+0xcc>
   17350:	467d                	li	a2,31
   17352:	8e1d                	sub	a2,a2,a5
   17354:	0014d713          	srli	a4,s1,0x1
   17358:	00c75733          	srl	a4,a4,a2
   1735c:	00f91633          	sll	a2,s2,a5
   17360:	8e59                	or	a2,a2,a4
   17362:	00f49733          	sll	a4,s1,a5
   17366:	b71d                	j	1728c <__floatundidf+0xb4>
   17368:	84b2                	mv	s1,a2
   1736a:	bfad                	j	172e4 <__floatundidf+0x10c>

0001736c <__clzsi2>:
__clzsi2():
   1736c:	67c1                	lui	a5,0x10
   1736e:	02f57e63          	bgeu	a0,a5,173aa <__clzsi2+0x3e>
   17372:	0ff00793          	li	a5,255
   17376:	02000713          	li	a4,32
   1737a:	00a7ec63          	bltu	a5,a0,17392 <__clzsi2+0x26>
   1737e:	00000797          	auipc	a5,0x0
   17382:	48a78793          	addi	a5,a5,1162 # 17808 <__clz_tab>
   17386:	97aa                	add	a5,a5,a0
   17388:	0007c503          	lbu	a0,0(a5)
   1738c:	40a70533          	sub	a0,a4,a0
   17390:	8082                	ret
   17392:	8121                	srli	a0,a0,0x8
   17394:	00000797          	auipc	a5,0x0
   17398:	47478793          	addi	a5,a5,1140 # 17808 <__clz_tab>
   1739c:	97aa                	add	a5,a5,a0
   1739e:	0007c503          	lbu	a0,0(a5)
   173a2:	4761                	li	a4,24
   173a4:	40a70533          	sub	a0,a4,a0
   173a8:	8082                	ret
   173aa:	010007b7          	lui	a5,0x1000
   173ae:	00f56e63          	bltu	a0,a5,173ca <__clzsi2+0x5e>
   173b2:	8161                	srli	a0,a0,0x18
   173b4:	00000797          	auipc	a5,0x0
   173b8:	45478793          	addi	a5,a5,1108 # 17808 <__clz_tab>
   173bc:	97aa                	add	a5,a5,a0
   173be:	0007c503          	lbu	a0,0(a5)
   173c2:	4721                	li	a4,8
   173c4:	40a70533          	sub	a0,a4,a0
   173c8:	8082                	ret
   173ca:	8141                	srli	a0,a0,0x10
   173cc:	00000797          	auipc	a5,0x0
   173d0:	43c78793          	addi	a5,a5,1084 # 17808 <__clz_tab>
   173d4:	97aa                	add	a5,a5,a0
   173d6:	0007c503          	lbu	a0,0(a5)
   173da:	4741                	li	a4,16
   173dc:	40a70533          	sub	a0,a4,a0
   173e0:	8082                	ret

000173e2 <strlen>:
strlen():
   173e2:	87aa                	mv	a5,a0
   173e4:	0785                	addi	a5,a5,1
   173e6:	fff7c703          	lbu	a4,-1(a5)
   173ea:	ff6d                	bnez	a4,173e4 <strlen+0x2>
   173ec:	40a78533          	sub	a0,a5,a0
   173f0:	157d                	addi	a0,a0,-1
   173f2:	8082                	ret
   173f4:	2d2d                	jal	17a2e <_data_lma+0x126>
   173f6:	2d2d                	jal	17a30 <_data_lma+0x128>
   173f8:	2d2d                	jal	17a32 <_data_lma+0x12a>
   173fa:	2d2d                	jal	17a34 <_data_lma+0x12c>
   173fc:	2d2d                	jal	17a36 <_data_lma+0x12e>
   173fe:	2d2d                	jal	17a38 <_data_lma+0x130>
   17400:	2d2d                	jal	17a3a <_data_lma+0x132>
   17402:	2d2d                	jal	17a3c <_data_lma+0x134>
   17404:	2d2d                	jal	17a3e <_data_lma+0x136>
   17406:	2d2d                	jal	17a40 <_data_lma+0x138>
   17408:	2d2d                	jal	17a42 <_data_lma+0x13a>
   1740a:	2d2d                	jal	17a44 <_data_lma+0x13c>
   1740c:	2d2d                	jal	17a46 <_data_lma+0x13e>
   1740e:	2d2d                	jal	17a48 <_data_lma+0x140>
   17410:	2d2d                	jal	17a4a <_data_lma+0x142>
   17412:	2d2d                	jal	17a4c <_data_lma+0x144>
   17414:	2d2d                	jal	17a4e <_data_lma+0x146>
   17416:	2d2d                	jal	17a50 <_data_lma+0x148>
   17418:	2d2d                	jal	17a52 <_data_lma+0x14a>
   1741a:	2d2d                	jal	17a54 <_data_lma+0x14c>
   1741c:	2d2d                	jal	17a56 <_data_lma+0x14e>
   1741e:	2d2d                	jal	17a58 <_data_lma+0x150>
   17420:	2d2d                	jal	17a5a <_data_lma+0x152>
   17422:	2d2d                	jal	17a5c <_data_lma+0x154>
   17424:	2d2d                	jal	17a5e <_data_lma+0x156>
   17426:	2d2d                	jal	17a60 <_data_lma+0x158>
   17428:	2d2d                	jal	17a62 <_data_lma+0x15a>
   1742a:	2d2d                	jal	17a64 <_data_lma+0x15c>
   1742c:	2d2d                	jal	17a66 <_data_lma+0x15e>
   1742e:	0a2d                	addi	s4,s4,11
	...
   1743c:	0000                	unimp
   1743e:	4024                	lw	s1,64(s0)
   17440:	2d2d                	jal	17a7a <_data_lma+0x172>
   17442:	2d2d                	jal	17a7c <_data_lma+0x174>
   17444:	2d2d                	jal	17a7e <_data_lma+0x176>
   17446:	2d2d                	jal	17a80 <_data_lma+0x178>
   17448:	2d2d                	jal	17a82 <_data_lma+0x17a>
   1744a:	2d2d                	jal	17a84 <_data_lma+0x17c>
   1744c:	2d2d                	jal	17a86 <_data_lma+0x17e>
   1744e:	2d2d                	jal	17a88 <_data_lma+0x180>
   17450:	2d2d                	jal	17a8a <_data_lma+0x182>
   17452:	2d2d                	jal	17a8c <_data_lma+0x184>
   17454:	2d2d                	jal	17a8e <_data_lma+0x186>
   17456:	2d2d                	jal	17a90 <_data_lma+0x188>
   17458:	2d2d                	jal	17a92 <_data_lma+0x18a>
   1745a:	2d2d                	jal	17a94 <_data_lma+0x18c>
   1745c:	2d2d                	jal	17a96 <_data_lma+0x18e>
   1745e:	2d2d                	jal	17a98 <_data_lma+0x190>
   17460:	2d2d                	jal	17a9a <_data_lma+0x192>
   17462:	2d2d                	jal	17a9c <_data_lma+0x194>
   17464:	2d2d                	jal	17a9e <_data_lma+0x196>
   17466:	2d2d                	jal	17aa0 <_data_lma+0x198>
   17468:	2d2d                	jal	17aa2 <_data_lma+0x19a>
   1746a:	2d2d                	jal	17aa4 <_data_lma+0x19c>
   1746c:	2d2d                	jal	17aa6 <_data_lma+0x19e>
   1746e:	2d2d                	jal	17aa8 <_data_lma+0x1a0>
   17470:	2d2d                	jal	17aaa <_data_lma+0x1a2>
   17472:	2d2d                	jal	17aac <_data_lma+0x1a4>
   17474:	2d2d                	jal	17aae <_data_lma+0x1a6>
   17476:	2d2d                	jal	17ab0 <_data_lma+0x1a8>
   17478:	2d2d                	jal	17ab2 <_data_lma+0x1aa>
   1747a:	2d2d                	jal	17ab4 <_data_lma+0x1ac>
   1747c:	000a                	c.slli	zero,0x2
   1747e:	0000                	unimp
   17480:	efa1                	bnez	a5,174d8 <strlen+0xf6>
   17482:	f0bd                	bnez	s1,173e8 <strlen+0x6>
   17484:	f9ba                	fsw	fa4,240(sp)
   17486:	abc2                	fsd	fa6,464(sp)
   17488:	e1cc                	fsw	fa1,4(a1)
   1748a:	beca                	fsd	fs2,376(sp)
   1748c:	efa1                	bnez	a5,174e4 <strlen+0x102>
   1748e:	2020                	fld	fs0,64(s0)
   17490:	2020                	fld	fs0,64(s0)
   17492:	2020                	fld	fs0,64(s0)
   17494:	2020                	fld	fs0,64(s0)
   17496:	2020                	fld	fs0,64(s0)
   17498:	2020                	fld	fs0,64(s0)
   1749a:	2020                	fld	fs0,64(s0)
   1749c:	2020                	fld	fs0,64(s0)
   1749e:	2020                	fld	fs0,64(s0)
   174a0:	2020                	fld	fs0,64(s0)
   174a2:	2020                	fld	fs0,64(s0)
   174a4:	2020                	fld	fs0,64(s0)
   174a6:	2020                	fld	fs0,64(s0)
   174a8:	2020                	fld	fs0,64(s0)
   174aa:	2020                	fld	fs0,64(s0)
   174ac:	2020                	fld	fs0,64(s0)
   174ae:	2020                	fld	fs0,64(s0)
   174b0:	2020                	fld	fs0,64(s0)
   174b2:	2020                	fld	fs0,64(s0)
   174b4:	2020                	fld	fs0,64(s0)
   174b6:	2020                	fld	fs0,64(s0)
   174b8:	2020                	fld	fs0,64(s0)
   174ba:	2020                	fld	fs0,64(s0)
   174bc:	0a20                	addi	s0,sp,280
   174be:	0000                	unimp
   174c0:	bea1                	j	17018 <__fixunsdfsi+0x1c>
   174c2:	d0d6                	sw	s5,96(sp)
   174c4:	c4ce                	sw	s3,72(sp)
   174c6:	c6b3fbc3          	fmadd.q	fs7,ft7,fa1,fs8
   174ca:	bfa1                	j	17422 <strlen+0x40>
   174cc:	b5434547          	0xb5434547
   174d0:	4ec4                	lw	s1,28(a3)
   174d2:	e0b1534f          	fnmadd.s	ft6,ft2,fa1,ft8,unknown
   174d6:	f2bfccb3          	0xf2bfccb3
   174da:	dcbc                	sw	a5,120(s1)
   174dc:	5750a8a3          	sw	s5,1393(ra)
   174e0:	b94d                	j	17192 <__fixunsdfdi+0x58>
   174e2:	bcb9                	j	16f40 <__subdf3+0x6f2>
   174e4:	b2fe                	fsd	ft11,352(sp)
   174e6:	cae2                	sw	s8,84(sp)
   174e8:	d1d4                	sw	a3,36(a1)
   174ea:	c0f9                	beqz	s1,175b0 <strlen+0x1ce>
   174ec:	a3fd                	j	17ada <_data_lma+0x1d2>
   174ee:	20a9                	jal	17538 <strlen+0x156>
   174f0:	2020                	fld	fs0,64(s0)
   174f2:	2020                	fld	fs0,64(s0)
   174f4:	2020                	fld	fs0,64(s0)
   174f6:	2020                	fld	fs0,64(s0)
   174f8:	2020                	fld	fs0,64(s0)
   174fa:	2020                	fld	fs0,64(s0)
   174fc:	2020                	fld	fs0,64(s0)
   174fe:	000a                	c.slli	zero,0x2
   17500:	bea1                	j	17058 <__floatsidf>
   17502:	f2d0ccb3          	0xf2d0ccb3
   17506:	a6b9                	j	17854 <__clz_tab+0x4c>
   17508:	dcc4                	sw	s1,60(s1)
   1750a:	bfa1                	j	17462 <strlen+0x80>
   1750c:	2020                	fld	fs0,64(s0)
   1750e:	2020                	fld	fs0,64(s0)
   17510:	2020                	fld	fs0,64(s0)
   17512:	2020                	fld	fs0,64(s0)
   17514:	2020                	fld	fs0,64(s0)
   17516:	2020                	fld	fs0,64(s0)
   17518:	2020                	fld	fs0,64(s0)
   1751a:	2020                	fld	fs0,64(s0)
   1751c:	2020                	fld	fs0,64(s0)
   1751e:	2020                	fld	fs0,64(s0)
   17520:	2020                	fld	fs0,64(s0)
   17522:	2020                	fld	fs0,64(s0)
   17524:	2020                	fld	fs0,64(s0)
   17526:	2020                	fld	fs0,64(s0)
   17528:	2020                	fld	fs0,64(s0)
   1752a:	2020                	fld	fs0,64(s0)
   1752c:	2020                	fld	fs0,64(s0)
   1752e:	2020                	fld	fs0,64(s0)
   17530:	2020                	fld	fs0,64(s0)
   17532:	2020                	fld	fs0,64(s0)
   17534:	2020                	fld	fs0,64(s0)
   17536:	2020                	fld	fs0,64(s0)
   17538:	2020                	fld	fs0,64(s0)
   1753a:	2020                	fld	fs0,64(s0)
   1753c:	0a20                	addi	s0,sp,280
   1753e:	0000                	unimp
   17540:	2020                	fld	fs0,64(s0)
   17542:	2020                	fld	fs0,64(s0)
   17544:	a220                	fsd	fs0,64(a2)
   17546:	20d9                	jal	1760c <strlen+0x22a>
   17548:	f2d0ccb3          	0xf2d0ccb3
   1754c:	c4b8                	sw	a4,72(s1)
   1754e:	e4b1                	bnez	s1,1759a <strlen+0x1b8>
   17550:	5750                	lw	a2,44(a4)
   17552:	d54d                	beqz	a0,174fc <strlen+0x11a>
   17554:	bfbc                	fsd	fa5,120(a5)
   17556:	b1d5                	j	1723a <__floatundidf+0x62>
   17558:	a3c8                	fsd	fa0,128(a5)
   1755a:	c0ac                	sw	a1,64(s1)
   1755c:	b5b6                	fsd	fa3,232(sp)
   1755e:	b8c6                	fsd	fa7,112(sp)
   17560:	cbfa                	sw	t5,212(sp)
   17562:	b1e6                	fsd	fs9,224(sp)
   17564:	bbe4                	fsd	fs1,240(a5)
   17566:	20bba3af          	amoxor.w	t2,a1,(s7)
   1756a:	2020                	fld	fs0,64(s0)
   1756c:	2020                	fld	fs0,64(s0)
   1756e:	2020                	fld	fs0,64(s0)
   17570:	2020                	fld	fs0,64(s0)
   17572:	2020                	fld	fs0,64(s0)
   17574:	2020                	fld	fs0,64(s0)
   17576:	2020                	fld	fs0,64(s0)
   17578:	2020                	fld	fs0,64(s0)
   1757a:	2020                	fld	fs0,64(s0)
   1757c:	2020                	fld	fs0,64(s0)
   1757e:	000a                	c.slli	zero,0x2
   17580:	2020                	fld	fs0,64(s0)
   17582:	2020                	fld	fs0,64(s0)
   17584:	a220                	fsd	fs0,64(a2)
   17586:	20da                	fld	ft1,400(sp)
   17588:	cbd4                	sw	a3,20(a5)
   1758a:	d0d0                	sw	a2,36(s1)
   1758c:	5750                	lw	a2,44(a4)
   1758e:	2d4d                	jal	17c40 <_data_lma+0x338>
   17590:	e2b2                	fsw	fa2,68(sp)
   17592:	d4ca                	sw	s2,104(sp)
   17594:	f2d0ccb3          	0xf2d0ccb3
   17598:	aca32343          	0xaca32343
   1759c:	dbb9                	beqz	a5,174f2 <strlen+0x110>
   1759e:	ecb2                	fsw	fa2,88(sp)
   175a0:	5750                	lw	a2,44(a4)
   175a2:	b24d                	j	16f44 <__subdf3+0x6f6>
   175a4:	d0a8                	sw	a0,96(s1)
   175a6:	20ce                	fld	ft1,208(sp)
   175a8:	2020                	fld	fs0,64(s0)
   175aa:	2020                	fld	fs0,64(s0)
   175ac:	2020                	fld	fs0,64(s0)
   175ae:	2020                	fld	fs0,64(s0)
   175b0:	2020                	fld	fs0,64(s0)
   175b2:	2020                	fld	fs0,64(s0)
   175b4:	2020                	fld	fs0,64(s0)
   175b6:	2020                	fld	fs0,64(s0)
   175b8:	2020                	fld	fs0,64(s0)
   175ba:	2020                	fld	fs0,64(s0)
   175bc:	2020                	fld	fs0,64(s0)
   175be:	000a                	c.slli	zero,0x2
   175c0:	bea1                	j	17118 <__floatunsidf+0x4a>
   175c2:	febcb2d3          	0xfebcb2d3
   175c6:	acc1                	j	17896 <__clz_tab+0x8e>
   175c8:	d3bd                	beqz	a5,1752e <strlen+0x14c>
   175ca:	bfa1                	j	17522 <strlen+0x140>
   175cc:	fbbc                	fsw	fa5,112(a5)
   175ce:	beb1                	j	1712a <__floatunsidf+0x5c>
   175d0:	a4b9                	j	1781e <__clz_tab+0x16>
   175d2:	3530ccb3          	0x3530ccb3
   175d6:	555f 6573 4272      	0x42726573555f
   175dc:	6472616f          	jal	sp,3e422 <_data_lma+0x26b1a>
   175e0:	c4ce                	sw	s3,72(sp)
   175e2:	febc                	fsw	fa5,120(a3)
   175e4:	d0bc                	sw	a5,96(s1)
   175e6:	7375c2cf          	fnmadd.d	ft5,fa1,fs7,fa4,rmm
   175ea:	7265                	lui	tp,0xffff9
   175ec:	682e                	flw	fa6,200(sp)
   175ee:	c4ce                	sw	s3,72(sp)
   175f0:	febc                	fsw	fa5,120(a3)
   175f2:	2020                	fld	fs0,64(s0)
   175f4:	2020                	fld	fs0,64(s0)
   175f6:	2020                	fld	fs0,64(s0)
   175f8:	2020                	fld	fs0,64(s0)
   175fa:	2020                	fld	fs0,64(s0)
   175fc:	2020                	fld	fs0,64(s0)
   175fe:	000a                	c.slli	zero,0x2
   17600:	bea1                	j	17158 <__fixunsdfdi+0x1e>
   17602:	d9b2                	sw	a2,240(sp)
   17604:	b5cbf7d7          	0xb5cbf7d7
   17608:	bfa1f7c3          	fmadd.q	fa5,ft3,fs10,fs7
   1760c:	cbd4                	sw	a3,20(a5)
   1760e:	d0d0                	sw	a2,36(s1)
   17610:	4350                	lw	a2,4(a4)
   17612:	c4b5bdb7          	lui	s11,0xc4b5b
   17616:	5750                	lw	a2,44(a4)
   17618:	2d4d                	jal	17cca <_data_lma+0x3c2>
   1761a:	e2b2                	fsw	fa2,68(sp)
   1761c:	d4ca                	sw	s2,104(sp)
   1761e:	f2d0ccb3          	0xf2d0ccb3
   17622:	20202343          	fmadd.s	ft6,ft0,ft2,ft4,rdn
   17626:	2020                	fld	fs0,64(s0)
   17628:	2020                	fld	fs0,64(s0)
   1762a:	2020                	fld	fs0,64(s0)
   1762c:	2020                	fld	fs0,64(s0)
   1762e:	2020                	fld	fs0,64(s0)
   17630:	2020                	fld	fs0,64(s0)
   17632:	2020                	fld	fs0,64(s0)
   17634:	2020                	fld	fs0,64(s0)
   17636:	2020                	fld	fs0,64(s0)
   17638:	2020                	fld	fs0,64(s0)
   1763a:	2020                	fld	fs0,64(s0)
   1763c:	0a20                	addi	s0,sp,280
   1763e:	0000                	unimp
   17640:	bcd5                	j	17134 <__floatunsidf+0x66>
   17642:	c8b1d5bf 2c64253d 	0x2c64253dc8b1d5bf
   1764a:	b920                	fsd	fs0,112(a0)
   1764c:	c0ecb2db          	0xc0ecb2db
   17650:	b5b6                	fsd	fa3,232(sp)
   17652:	2cc6                	fld	fs9,80(sp)
   17654:	cbd4                	sw	a3,20(a5)
   17656:	d0d0                	sw	a2,36(s1)
   17658:	5750                	lw	a2,44(a4)
   1765a:	2d4d                	jal	17d0c <_data_lma+0x404>
   1765c:	a1a32343          	fmadd.s	ft6,ft6,fs10,fs4,rdn
   17660:	0a0d                	addi	s4,s4,3
   17662:	0000                	unimp
   17664:	dfb8                	sw	a4,120(a5)
   17666:	e7b5                	bnez	a5,176d2 <strlen+0x2f0>
   17668:	bdc6                	fsd	fa7,248(sp)
   1766a:	0a31baa3          	0xa31baa3
   1766e:	0000                	unimp
   17670:	cdb5                	beqz	a1,176ec <strlen+0x30a>
   17672:	e7b5                	bnez	a5,176de <strlen+0x2fc>
   17674:	bdc6                	fsd	fa7,248(sp)
   17676:	0a30baa3          	0xa30baa3
	...
   17686:	4059                	c.li	zero,22
   17688:	2020                	fld	fs0,64(s0)
   1768a:	bea1                	j	171e2 <__floatundidf+0xa>
   1768c:	7355                	lui	t1,0xffff5
   1768e:	7265                	lui	tp,0xffff9
   17690:	e1cc                	fsw	fa1,4(a1)
   17692:	beca                	fsd	fs2,376(sp)
   17694:	bfa1                	j	175ec <strlen+0x20a>
   17696:	abbdbaa3          	0xabbdbaa3
   1769a:	f8bd                	bnez	s1,17610 <strlen+0x22e>
   1769c:	ebc8                	fsw	fa0,20(a5)
   1769e:	7355                	lui	t1,0xffff5
   176a0:	7265                	lui	tp,0xffff9
   176a2:	c4b5                	beqz	s1,1770e <strlen+0x32c>
   176a4:	616d                	addi	sp,sp,240
   176a6:	6e69                	lui	t3,0x1a
   176a8:	afba                	fsd	fa4,472(sp)
   176aa:	fdca                	fsw	fs2,248(sp)
   176ac:	b4d6                	fsd	fs5,104(sp)
   176ae:	d0d0                	sw	a2,36(s1)
   176b0:	2e2e                	fld	ft8,200(sp)
   176b2:	0d2e                	slli	s10,s10,0xb
   176b4:	0a0a                	slli	s4,s4,0x2
   176b6:	0000                	unimp
   176b8:	cd72                	sw	t3,152(sp)
   176ba:	ffff                	0xffff
   176bc:	cdf4                	sw	a3,92(a1)
   176be:	ffff                	0xffff
   176c0:	cdf4                	sw	a3,92(a1)
   176c2:	ffff                	0xffff
   176c4:	cd7e                	sw	t6,152(sp)
   176c6:	ffff                	0xffff
   176c8:	cdf4                	sw	a3,92(a1)
   176ca:	ffff                	0xffff
   176cc:	cdf4                	sw	a3,92(a1)
   176ce:	ffff                	0xffff
   176d0:	cdf4                	sw	a3,92(a1)
   176d2:	ffff                	0xffff
   176d4:	cdf4                	sw	a3,92(a1)
   176d6:	ffff                	0xffff
   176d8:	cdf4                	sw	a3,92(a1)
   176da:	ffff                	0xffff
   176dc:	cdf4                	sw	a3,92(a1)
   176de:	ffff                	0xffff
   176e0:	cdf4                	sw	a3,92(a1)
   176e2:	ffff                	0xffff
   176e4:	cd6c                	sw	a1,92(a0)
   176e6:	ffff                	0xffff
   176e8:	cdf4                	sw	a3,92(a1)
   176ea:	ffff                	0xffff
   176ec:	cd48                	sw	a0,28(a0)
   176ee:	ffff                	0xffff
   176f0:	cdf4                	sw	a3,92(a1)
   176f2:	ffff                	0xffff
   176f4:	cdf4                	sw	a3,92(a1)
   176f6:	ffff                	0xffff
   176f8:	cd78                	sw	a4,92(a0)
   176fa:	ffff                	0xffff
   176fc:	cfe0                	sw	s0,92(a5)
   176fe:	ffff                	0xffff
   17700:	d26e                	sw	s11,36(sp)
   17702:	ffff                	0xffff
   17704:	d26e                	sw	s11,36(sp)
   17706:	ffff                	0xffff
   17708:	d26e                	sw	s11,36(sp)
   1770a:	ffff                	0xffff
   1770c:	d26e                	sw	s11,36(sp)
   1770e:	ffff                	0xffff
   17710:	d26e                	sw	s11,36(sp)
   17712:	ffff                	0xffff
   17714:	d26e                	sw	s11,36(sp)
   17716:	ffff                	0xffff
   17718:	d26e                	sw	s11,36(sp)
   1771a:	ffff                	0xffff
   1771c:	d26e                	sw	s11,36(sp)
   1771e:	ffff                	0xffff
   17720:	d26e                	sw	s11,36(sp)
   17722:	ffff                	0xffff
   17724:	d0e4                	sw	s1,100(s1)
   17726:	ffff                	0xffff
   17728:	d1c0                	sw	s0,36(a1)
   1772a:	ffff                	0xffff
   1772c:	cdf0                	sw	a2,92(a1)
   1772e:	ffff                	0xffff
   17730:	d26e                	sw	s11,36(sp)
   17732:	ffff                	0xffff
   17734:	ce98                	sw	a4,24(a3)
   17736:	ffff                	0xffff
   17738:	d26e                	sw	s11,36(sp)
   1773a:	ffff                	0xffff
   1773c:	d26e                	sw	s11,36(sp)
   1773e:	ffff                	0xffff
   17740:	cdf0                	sw	a2,92(a1)
   17742:	ffff                	0xffff
   17744:	d26e                	sw	s11,36(sp)
   17746:	ffff                	0xffff
   17748:	d26e                	sw	s11,36(sp)
   1774a:	ffff                	0xffff
   1774c:	d26e                	sw	s11,36(sp)
   1774e:	ffff                	0xffff
   17750:	d26e                	sw	s11,36(sp)
   17752:	ffff                	0xffff
   17754:	d262                	sw	s8,36(sp)
   17756:	ffff                	0xffff
   17758:	d0ac                	sw	a1,96(s1)
   1775a:	ffff                	0xffff
   1775c:	d104                	sw	s1,32(a0)
   1775e:	ffff                	0xffff
   17760:	d26e                	sw	s11,36(sp)
   17762:	ffff                	0xffff
   17764:	d26e                	sw	s11,36(sp)
   17766:	ffff                	0xffff
   17768:	d1d8                	sw	a4,36(a1)
   1776a:	ffff                	0xffff
   1776c:	d26e                	sw	s11,36(sp)
   1776e:	ffff                	0xffff
   17770:	d124                	sw	s1,96(a0)
   17772:	ffff                	0xffff
   17774:	d26e                	sw	s11,36(sp)
   17776:	ffff                	0xffff
   17778:	d26e                	sw	s11,36(sp)
   1777a:	ffff                	0xffff
   1777c:	cfe0                	sw	s0,92(a5)
   1777e:	ffff                	0xffff
   17780:	999a                	add	s3,s3,t1
   17782:	9999                	andi	a1,a1,-26
   17784:	9999                	andi	a1,a1,-26
   17786:	3fb9                	jal	176e4 <strlen+0x302>
   17788:	e764                	fsw	fs1,76(a4)
   1778a:	ffff                	0xffff
   1778c:	e5e0                	fsw	fs0,76(a1)
   1778e:	ffff                	0xffff
   17790:	e6f8                	fsw	fa4,76(a3)
   17792:	ffff                	0xffff
   17794:	e700                	fsw	fs0,8(a4)
   17796:	ffff                	0xffff
   17798:	e6f8                	fsw	fa4,76(a3)
   1779a:	ffff                	0xffff
   1779c:	e610                	fsw	fa2,8(a2)
   1779e:	ffff                	0xffff
   177a0:	e6f8                	fsw	fa4,76(a3)
   177a2:	ffff                	0xffff
   177a4:	e700                	fsw	fs0,8(a4)
   177a6:	ffff                	0xffff
   177a8:	e5e0                	fsw	fs0,76(a1)
   177aa:	ffff                	0xffff
   177ac:	e5e0                	fsw	fs0,76(a1)
   177ae:	ffff                	0xffff
   177b0:	e610                	fsw	fa2,8(a2)
   177b2:	ffff                	0xffff
   177b4:	e700                	fsw	fs0,8(a4)
   177b6:	ffff                	0xffff
   177b8:	e75a                	fsw	fs6,140(sp)
   177ba:	ffff                	0xffff
   177bc:	e75a                	fsw	fs6,140(sp)
   177be:	ffff                	0xffff
   177c0:	e75a                	fsw	fs6,140(sp)
   177c2:	ffff                	0xffff
   177c4:	e610                	fsw	fa2,8(a2)
   177c6:	ffff                	0xffff
   177c8:	edd6                	fsw	fs5,216(sp)
   177ca:	ffff                	0xffff
   177cc:	ecc0                	fsw	fs0,28(s1)
   177ce:	ffff                	0xffff
   177d0:	ecc0                	fsw	fs0,28(s1)
   177d2:	ffff                	0xffff
   177d4:	ecbe                	fsw	fa5,88(sp)
   177d6:	ffff                	0xffff
   177d8:	ecc6                	fsw	fa7,88(sp)
   177da:	ffff                	0xffff
   177dc:	ecc6                	fsw	fa7,88(sp)
   177de:	ffff                	0xffff
   177e0:	ec8c                	fsw	fa1,24(s1)
   177e2:	ffff                	0xffff
   177e4:	ecbe                	fsw	fa5,88(sp)
   177e6:	ffff                	0xffff
   177e8:	ecc6                	fsw	fa7,88(sp)
   177ea:	ffff                	0xffff
   177ec:	ec8c                	fsw	fa1,24(s1)
   177ee:	ffff                	0xffff
   177f0:	ecc6                	fsw	fa7,88(sp)
   177f2:	ffff                	0xffff
   177f4:	ecbe                	fsw	fa5,88(sp)
   177f6:	ffff                	0xffff
   177f8:	edc2                	fsw	fa6,216(sp)
   177fa:	ffff                	0xffff
   177fc:	edc2                	fsw	fa6,216(sp)
   177fe:	ffff                	0xffff
   17800:	edc2                	fsw	fa6,216(sp)
   17802:	ffff                	0xffff
   17804:	ec8c                	fsw	fa1,24(s1)
   17806:	ffff                	0xffff

00017808 <__clz_tab>:
   17808:	0100 0202 0303 0303 0404 0404 0404 0404     ................
   17818:	0505 0505 0505 0505 0505 0505 0505 0505     ................
   17828:	0606 0606 0606 0606 0606 0606 0606 0606     ................
   17838:	0606 0606 0606 0606 0606 0606 0606 0606     ................
   17848:	0707 0707 0707 0707 0707 0707 0707 0707     ................
   17858:	0707 0707 0707 0707 0707 0707 0707 0707     ................
   17868:	0707 0707 0707 0707 0707 0707 0707 0707     ................
   17878:	0707 0707 0707 0707 0707 0707 0707 0707     ................
   17888:	0808 0808 0808 0808 0808 0808 0808 0808     ................
   17898:	0808 0808 0808 0808 0808 0808 0808 0808     ................
   178a8:	0808 0808 0808 0808 0808 0808 0808 0808     ................
   178b8:	0808 0808 0808 0808 0808 0808 0808 0808     ................
   178c8:	0808 0808 0808 0808 0808 0808 0808 0808     ................
   178d8:	0808 0808 0808 0808 0808 0808 0808 0808     ................
   178e8:	0808 0808 0808 0808 0808 0808 0808 0808     ................
   178f8:	0808 0808 0808 0808 0808 0808 0808 0808     ................
